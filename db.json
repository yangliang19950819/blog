{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/after.png","path":"img/after.png","modified":0,"renderable":0},{"_id":"source/img/before.png","path":"img/before.png","modified":0,"renderable":0},{"_id":"source/img/cache.webp","path":"img/cache.webp","modified":0,"renderable":0},{"_id":"source/img/css-module.webp","path":"img/css-module.webp","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/gitservice.webp","path":"img/gitservice.webp","modified":0,"renderable":0},{"_id":"source/img/hand-z.webp","path":"img/hand-z.webp","modified":0,"renderable":0},{"_id":"source/img/hand.webp","path":"img/hand.webp","modified":0,"renderable":0},{"_id":"source/img/hook.webp","path":"img/hook.webp","modified":0,"renderable":0},{"_id":"source/img/i18n-ally.png","path":"img/i18n-ally.png","modified":0,"renderable":0},{"_id":"source/img/index.png","path":"img/index.png","modified":0,"renderable":0},{"_id":"source/img/life-z.webp","path":"img/life-z.webp","modified":0,"renderable":0},{"_id":"source/img/life.webp","path":"img/life.webp","modified":0,"renderable":0},{"_id":"source/img/light-z.webp","path":"img/light-z.webp","modified":0,"renderable":0},{"_id":"source/img/light.png","path":"img/light.png","modified":0,"renderable":0},{"_id":"source/img/link-z.webp","path":"img/link-z.webp","modified":0,"renderable":0},{"_id":"source/img/link.webp","path":"img/link.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId.webp","path":"img/moduleId.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId1.webp","path":"img/moduleId1.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId2.webp","path":"img/moduleId2.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId3.png","path":"img/moduleId3.png","modified":0,"renderable":0},{"_id":"source/img/moduleId3.webp","path":"img/moduleId3.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId4.webp","path":"img/moduleId4.webp","modified":0,"renderable":0},{"_id":"source/img/moduleId5.webp","path":"img/moduleId5.webp","modified":0,"renderable":0},{"_id":"source/img/node.png","path":"img/node.png","modified":0,"renderable":0},{"_id":"source/img/oneLiner.webp","path":"img/oneLiner.webp","modified":0,"renderable":0},{"_id":"source/img/prev.webp","path":"img/prev.webp","modified":0,"renderable":0},{"_id":"source/img/react-s.webp","path":"img/react-s.webp","modified":0,"renderable":0},{"_id":"source/img/redux-res.webp","path":"img/redux-res.webp","modified":0,"renderable":0},{"_id":"source/img/redux.jpeg","path":"img/redux.jpeg","modified":0,"renderable":0},{"_id":"source/img/redux.webp","path":"img/redux.webp","modified":0,"renderable":0},{"_id":"source/img/rush.png","path":"img/rush.png","modified":0,"renderable":0},{"_id":"source/img/rush.webp","path":"img/rush.webp","modified":0,"renderable":0},{"_id":"source/img/rush1.webp","path":"img/rush1.webp","modified":0,"renderable":0},{"_id":"source/img/rush2.webp","path":"img/rush2.webp","modified":0,"renderable":0},{"_id":"source/img/rush3.webp","path":"img/rush3.webp","modified":0,"renderable":0},{"_id":"source/img/rush5.webp","path":"img/rush5.webp","modified":0,"renderable":0},{"_id":"source/img/scopecss-z.webp","path":"img/scopecss-z.webp","modified":0,"renderable":0},{"_id":"source/img/scopecss.webp","path":"img/scopecss.webp","modified":0,"renderable":0},{"_id":"source/img/service.jpg","path":"img/service.jpg","modified":0,"renderable":0},{"_id":"source/img/serviceworker-z.webp","path":"img/serviceworker-z.webp","modified":0,"renderable":0},{"_id":"source/img/serviceworker.webp","path":"img/serviceworker.webp","modified":0,"renderable":0},{"_id":"source/img/shoe.jpg","path":"img/shoe.jpg","modified":0,"renderable":0},{"_id":"source/img/skip.webp","path":"img/skip.webp","modified":0,"renderable":0},{"_id":"source/img/strapi.png","path":"img/strapi.png","modified":0,"renderable":0},{"_id":"source/img/swa.png","path":"img/swa.png","modified":0,"renderable":0},{"_id":"source/img/swa.webp","path":"img/swa.webp","modified":0,"renderable":0},{"_id":"source/img/tags-z.webp","path":"img/tags-z.webp","modified":0,"renderable":0},{"_id":"source/img/tags.webp","path":"img/tags.webp","modified":0,"renderable":0},{"_id":"source/img/thread.jpg","path":"img/thread.jpg","modified":0,"renderable":0},{"_id":"source/img/token.webp","path":"img/token.webp","modified":0,"renderable":0},{"_id":"source/img/type.png","path":"img/type.png","modified":0,"renderable":0},{"_id":"source/img/useState.png","path":"img/useState.png","modified":0,"renderable":0},{"_id":"source/img/useState.webp","path":"img/useState.webp","modified":0,"renderable":0},{"_id":"source/img/web-c-z.webp","path":"img/web-c-z.webp","modified":0,"renderable":0},{"_id":"source/img/web-c.webp","path":"img/web-c.webp","modified":0,"renderable":0},{"_id":"source/img/webpack.webp","path":"img/webpack.webp","modified":0,"renderable":0},{"_id":"source/img/yapi.png","path":"img/yapi.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e517bddb674d0e2a2b462a4459002c0514779489","modified":1725332706014},{"_id":"source/_posts/i18n.md","hash":"31b67ac55ad4f775e9ef87c1583921824f6de1c5","modified":1725330409851},{"_id":"source/_posts/oneLinerJsSkill.md","hash":"cc89d264670ec4280bb95286aa2f4af6de613562","modified":1632204164891},{"_id":"source/_posts/css-module.md","hash":"c55aaed064feb760f2630f0c8636bcb1c2d46051","modified":1634008329469},{"_id":"source/_posts/reactSource.md","hash":"40ab92744260c14fa947bf501ad8d6ed010ac2ef","modified":1635927330740},{"_id":"source/_posts/react.md","hash":"0dc521662ac88e3ad5d0ecd19558a2bd66d7a5e2","modified":1629600302695},{"_id":"source/_posts/rush-pnpm.md","hash":"f111c90869c26c2ef31d68682fd700d071a5ec30","modified":1631069804791},{"_id":"source/_posts/redux.md","hash":"6ee5fe11e0090acb8480319215aa167868b2e307","modified":1630382015060},{"_id":"source/_posts/service-worker.md","hash":"61f843aeeab494309ebfb714a3dff7921fba9a7a","modified":1747812753221},{"_id":"source/_posts/vue-computed.md","hash":"97f142de4782f6ec63dfe173665bb16719af5021","modified":1629600241465},{"_id":"source/_posts/ts-skills.md","hash":"1dd1e16f70653e0d682d169b4c1f59daf3acfe5e","modified":1636428386816},{"_id":"source/_posts/vue-scoped-css.md","hash":"d1b7a3cb736e9e606ba429fddbc0f598a6ef2658","modified":1630028708556},{"_id":"source/_posts/yapi.md","hash":"b44d218d48fedb7c0490aa5b66f4fa13fda13c27","modified":1725332917784},{"_id":"source/_posts/strapi.md","hash":"4fe034b4521fadb0054e4af214a8b37386772951","modified":1725331556666},{"_id":"source/_posts/webpackO.md","hash":"8f5da946ee206b27bb82988acf5bbbcedddc5c6b","modified":1629600106975},{"_id":"source/_posts/webpack-plugin-loader.md","hash":"4d4ca8ebdb641bdd660e90ce1447ff64afa97d8b","modified":1630052057373},{"_id":"source/img/.DS_Store","hash":"dd6dade327f9e760d96c90e6a990630834d5b67a","modified":1725332706015},{"_id":"source/img/cache.webp","hash":"f44a9185aaaa66f10c1c637cbf163aedd9c96488","modified":1629168313853},{"_id":"source/img/css-module.webp","hash":"e5213fe479eef63877256664e212443dec8a7f0b","modified":1634006771996},{"_id":"source/img/favicon.ico","hash":"b3964f1d1884df11fe44585ee8b46256c6557b50","modified":1627372172111},{"_id":"source/categories/index.md","hash":"b3335d97e8785b14d6fdeb77723c2ca99a237d69","modified":1629600957756},{"_id":"source/_posts/webComponents.md","hash":"2676210acfc776b8798da3fcbefd75454787d3eb","modified":1629603155563},{"_id":"source/_posts/pm2.md","hash":"e8db27ca4d8feba6524afc0d8c4fe3e9249c81b3","modified":1628305055607},{"_id":"source/img/before.png","hash":"de55e1d048e3a5bcf0d72c903e4318b50c85b175","modified":1725331400551},{"_id":"source/img/hand-z.webp","hash":"aaef859099f9b08cd040f2edeaa6f882a5c06241","modified":1629600102820},{"_id":"source/img/light-z.webp","hash":"6799f88e593c7bf928151caa2ad781360c5359ac","modified":1629600050133},{"_id":"source/img/link-z.webp","hash":"009ff72ce53880e772670fb9f0b8ea2bdf101032","modified":1629600463718},{"_id":"source/img/link.webp","hash":"25cf589d8fd87fc1951659dc00c1e6fee3e93986","modified":1627371684882},{"_id":"source/img/moduleId1.webp","hash":"5b386ce5bc115533c468aea27e48a08ceb663201","modified":1629858934338},{"_id":"source/img/moduleId.webp","hash":"0352209c3520a1652af237e28499ba8b8754294d","modified":1629858595174},{"_id":"source/img/hook.webp","hash":"d93c5a0f54a1672bcb9c39e54362dc2421e0f56e","modified":1635920804675},{"_id":"source/img/moduleId2.webp","hash":"3555f3ee907b2c10501a877692eda462ee2abd01","modified":1629861000356},{"_id":"source/img/moduleId3.webp","hash":"34b0df00c1eb59ea9d2d303fc14096ea2d683c4a","modified":1629862215083},{"_id":"source/img/oneLiner.webp","hash":"c480be3afcc901855b147097bf9dcb4b0b06b815","modified":1632202689748},{"_id":"source/img/moduleId4.webp","hash":"14bc33b01fb04e3d5acd00f73253bae3abc5ae5a","modified":1630028246917},{"_id":"source/img/moduleId5.webp","hash":"53c20699f62ed55e8eecb5ba30b5a23c5b68441d","modified":1630028254241},{"_id":"source/img/react-s.webp","hash":"a23c26c20a45e742ed2a134578b7750b85e847d7","modified":1634006594583},{"_id":"source/img/prev.webp","hash":"188e32c489302dbd6f67d35ac78f5a5a848597f0","modified":1629169039323},{"_id":"source/img/redux-res.webp","hash":"66dd5975c5bc45cf4baf2adc1248e461bc114ad7","modified":1630381484118},{"_id":"source/img/rush.webp","hash":"43090bedd22251b5e177e7f07bf748e64367319c","modified":1631064075217},{"_id":"source/img/scopecss-z.webp","hash":"39ac336f96f939015c7e272af1534ab111f3cc3b","modified":1629856545821},{"_id":"source/img/rush1.webp","hash":"4ed09e4709625e6e845691b50e52ab14c8e27dab","modified":1631065524597},{"_id":"source/img/rush3.webp","hash":"0cfa5eedc2eb045e5e51139e70be728cb797a7a2","modified":1631066010181},{"_id":"source/img/rush5.webp","hash":"c6f13c03ed5dd5b918e7ecf7d1e53f93f064bfe7","modified":1631068966967},{"_id":"source/img/scopecss.webp","hash":"24d0eb1f9ed10848ed186674a1c01c2588dd6a75","modified":1629856509439},{"_id":"source/img/rush2.webp","hash":"1b822c247f136186b3499353bc91bb7d568b1a55","modified":1631065536765},{"_id":"source/img/serviceworker-z.webp","hash":"3b9d456e590f8d4a1856e210db3144e6bf19135e","modified":1629600166804},{"_id":"source/img/strapi.png","hash":"1cc9e7468cd87781e5533e0998fb205f08c6d0e2","modified":1725330864960},{"_id":"source/img/serviceworker.webp","hash":"4ecd94f4361864de3025316e7afc4fa5d5c3dfcb","modified":1629161970913},{"_id":"source/img/service.jpg","hash":"bfeec49cd4926dff99b3a6681cdadd32eb3ef551","modified":1626838447446},{"_id":"source/img/tags-z.webp","hash":"8e7957bf6970a7fa396311177f20420b92f1a0a3","modified":1629600471127},{"_id":"source/img/token.webp","hash":"bb9bdfb8ace519b3201f57ff17b2d0b558dce893","modified":1629172692219},{"_id":"source/img/useState.webp","hash":"a9722edd88f1b6bdabcbf8c05774a1bdc55c3d6e","modified":1635843005088},{"_id":"source/img/yapi.png","hash":"8c1d9c334f67e9a008c11daaae181b6500ca7627","modified":1725332241190},{"_id":"source/img/webpack.webp","hash":"c3540318fe4d65b6a5e61fbd43218a4e9afd4f86","modified":1630029016146},{"_id":"source/link/index.md","hash":"35488d678a28077bf9322e272c730a1124336224","modified":1629600522633},{"_id":"source/tags/index.md","hash":"48a1b0a54687417bf3dd5c8f0af5eab5114ee047","modified":1629600530299},{"_id":"source/img/after.png","hash":"1db2c0dedf99b54e2dd8a112e9888e2ac76abeaa","modified":1725331398402},{"_id":"source/img/gitservice.webp","hash":"5358ecc46cd2789d0417917f9568396e1680c1a7","modified":1629173635159},{"_id":"source/img/life-z.webp","hash":"8f59e7c7f655f5fb79b7afbad9eb3eabc8879985","modified":1629600297804},{"_id":"source/img/moduleId3.png","hash":"fce4193c21491ea0cb102a723775d28c8aee1157","modified":1629862160647},{"_id":"source/img/swa.webp","hash":"7bbdc860bc011de15825420326a9159a6aff31f2","modified":1629167818882},{"_id":"source/img/type.png","hash":"dcda607e177774b034d6730546c3421ad4a8666b","modified":1725332730185},{"_id":"source/img/redux.webp","hash":"d935118e5ec508b3965bf95a41a5111199df1f7c","modified":1630377711971},{"_id":"source/img/node.png","hash":"e71863fa1281e346fd9091c53c9e45be84c423fa","modified":1626836644375},{"_id":"source/img/thread.jpg","hash":"1c3db76641bcdfa720eb35bdbf5176e487518e35","modified":1627092166111},{"_id":"source/img/index.png","hash":"d187a3cb18886101846b7e0550d5dd5595c4d47a","modified":1725330643096},{"_id":"source/img/i18n-ally.png","hash":"493cb84d1770967734f21c7c6717de90962fcc08","modified":1725330126159},{"_id":"source/img/tags.webp","hash":"8c01b7e251ca32356525d5fee8861ccc21f6598f","modified":1627371911303},{"_id":"source/img/life.webp","hash":"e6b1129033ab98f76958a21edbc86adbe03480bc","modified":1628174119948},{"_id":"source/img/light.png","hash":"272b64ab2bfc55312a664aeac8745dfda6d91714","modified":1627380584957},{"_id":"source/img/web-c-z.webp","hash":"6e82abd3ad72dae32588ba78ed0e750dafeb067e","modified":1629599409466},{"_id":"source/img/hand.webp","hash":"0c6a09e456a39c46e0fe3b1048ab174b53ac2e75","modified":1627961953863},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"2653bbaedf63733f8065d650c4b4430c2b5696cd","modified":1716540775148},{"_id":"source/img/skip.webp","hash":"89a1b0ca4570961776053884c3136f348d81e08a","modified":1627371096272},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d807fbb62163bb6fc5a83a24ebd69ac14cf45f67","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"18d08be0cd9b1f8c049d4b922e80f8163a55c947","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f77f0fdeac2bc8a72f71a58f9b75aa39f0a108c8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"5c29b5887e2e6cd81e1f13b32da53d9c139b788b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"7aa443b4881448979b810864e206e58c9ed787e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"17080aba1754478197ab089f7948ed900f116d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":499162500000},{"_id":"source/img/rush.png","hash":"14945bd2b977ebed5e6e821d25bb491781e841db","modified":1631064003837},{"_id":"source/img/swa.png","hash":"b05a34ad865a1b2bb90bb1ffd64fcb562489ef0e","modified":1629167758456},{"_id":"source/img/web-c.webp","hash":"3a1f272a551abfeda056183ae8cd6731e54643c0","modified":1629599258797},{"_id":"source/img/useState.png","hash":"75507e80b6d4428b8916552f38265944757208c9","modified":1635842924448},{"_id":"source/img/shoe.jpg","hash":"56399b6161d2c33b06ff32a2866b67f0a228cc0e","modified":1725328527826},{"_id":"source/img/redux.jpeg","hash":"b9178151f1ac8d2397b56401047458ee57410ffe","modified":1630377411272},{"_id":"public/404.html","hash":"a456f6fa9259a3ab26234a158fae9c1c3015afe5","modified":1747812766726},{"_id":"public/categories/index.html","hash":"c441cf285e3ae7d73299321e6031b79a06d51923","modified":1747812766726},{"_id":"public/link/index.html","hash":"a176ea39a222af256e528f2194b9adfdfb45463a","modified":1747812766726},{"_id":"public/tags/index.html","hash":"6c9f2d13825b5887e5ccae08644f9eefc26c6f9f","modified":1747812766726},{"_id":"public/2021/11/09/ts-skills/index.html","hash":"9e49ca8b86c1c2683260f9d6f9febd3d4983d4d7","modified":1747812766726},{"_id":"public/2021/10/12/css-module/index.html","hash":"57221206c672c2c198e8e51b781d29575a1850ab","modified":1747812766726},{"_id":"public/2021/09/22/reactSource/index.html","hash":"4dfbc3c175c07dc502075cd58bbc4edf7e62c536","modified":1747812766726},{"_id":"public/2021/09/21/oneLinerJsSkill/index.html","hash":"b82ffe3a5bcb3c8ac2f62e5842c0b1ea65b4c613","modified":1747812766726},{"_id":"public/2024/09/03/i18n/index.html","hash":"40b06f5fcc2a9b37980e58116b10540bb7b9e95b","modified":1747812766726},{"_id":"public/2021/09/08/rush-pnpm/index.html","hash":"c2cfa52a69be0e647d484537dd602111033e9327","modified":1747812766726},{"_id":"public/2024/09/03/yapi/index.html","hash":"f306068d9b1949c330add6c7b92eb3823f0861ff","modified":1747812766726},{"_id":"public/2021/08/31/redux/index.html","hash":"8fee1e0d1d76bd4bf1765847c19ced801bf105e0","modified":1747812766726},{"_id":"public/2021/08/26/webpack-plugin-loader/index.html","hash":"3a9e274eb1cc8af7f130913788a2ff0561fce4cc","modified":1747812766726},{"_id":"public/2024/09/03/strapi/index.html","hash":"aeba3c87378464b0f7b48cb237e525dd77aa4071","modified":1747812766726},{"_id":"public/2021/08/22/webComponents/index.html","hash":"50651bc4b404a3384ef760d68d7b6c2eef680d2c","modified":1747812766726},{"_id":"public/2021/08/25/vue-scoped-css/index.html","hash":"0dee69bf3dd1470066bc0f647c97426209f36ef6","modified":1747812766726},{"_id":"public/2021/08/17/service-worker/index.html","hash":"b9a60703698ab3a31f0648738741596b21536904","modified":1747812766726},{"_id":"public/2021/08/05/react/index.html","hash":"7cde00c91c11ec67f64d490dd68be9800cd2d7b7","modified":1747812766726},{"_id":"public/2021/08/03/webpackO/index.html","hash":"996980894f89ffc929c1b589dc76048bb2061af9","modified":1747812766726},{"_id":"public/2021/07/27/vue-computed/index.html","hash":"3a2d53f9dc4f266d9061943da97dae4d5794ef2c","modified":1747812766726},{"_id":"public/2021/07/23/pm2/index.html","hash":"9478c5011b209b034a2407d21fac98a0a07ef20f","modified":1747812766726},{"_id":"public/index.html","hash":"92474148e0a0d5554ec4a03fcd08b92192e2e88e","modified":1747812766726},{"_id":"public/page/2/index.html","hash":"f08df3daee51ca789e15bb08e809f596ff14077c","modified":1747812766726},{"_id":"public/archives/index.html","hash":"6156559a59b97c239c69ce8a05b9cbd6bb81d7e5","modified":1747812766726},{"_id":"public/archives/page/2/index.html","hash":"9869416556a24408d7ac40ce39680ff88da5f996","modified":1747812766726},{"_id":"public/archives/2021/index.html","hash":"cf83acec452c7a83d8c2f5894fc78055ac01e415","modified":1747812766726},{"_id":"public/archives/2021/page/2/index.html","hash":"bb71ca4d512ed784e42ee7b3e3dcef6edb97d363","modified":1747812766726},{"_id":"public/archives/2021/07/index.html","hash":"f4143935996d9eba55cebc4973635834f4e0c211","modified":1747812766726},{"_id":"public/archives/2021/08/index.html","hash":"667f700f1ffbe6563648831d103b742b9610ead8","modified":1747812766726},{"_id":"public/archives/2021/09/index.html","hash":"2b92ed32601dbde0b6c58038034cb73389f2d940","modified":1747812766726},{"_id":"public/archives/2021/10/index.html","hash":"0beffade362fedabfc1354f070b5e0e1c4cc5fee","modified":1747812766726},{"_id":"public/archives/2021/11/index.html","hash":"633b5f6f830983ae5908e85ccf5d981b3f468ba0","modified":1747812766726},{"_id":"public/archives/2024/index.html","hash":"fa18c0e0f5aba7bebe4fee864114f87d5fe5a201","modified":1747812766726},{"_id":"public/archives/2024/09/index.html","hash":"68696a4cc034dff0d588a01f03517d716dd44247","modified":1747812766726},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1725332958298},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1725332958298},{"_id":"public/img/cache.webp","hash":"f44a9185aaaa66f10c1c637cbf163aedd9c96488","modified":1725332958298},{"_id":"public/img/before.png","hash":"de55e1d048e3a5bcf0d72c903e4318b50c85b175","modified":1725332958298},{"_id":"public/img/favicon.ico","hash":"b3964f1d1884df11fe44585ee8b46256c6557b50","modified":1725332958298},{"_id":"public/img/css-module.webp","hash":"e5213fe479eef63877256664e212443dec8a7f0b","modified":1725332958298},{"_id":"public/img/hand-z.webp","hash":"aaef859099f9b08cd040f2edeaa6f882a5c06241","modified":1725332958298},{"_id":"public/img/hook.webp","hash":"d93c5a0f54a1672bcb9c39e54362dc2421e0f56e","modified":1725332958298},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1725332958298},{"_id":"public/img/link.webp","hash":"25cf589d8fd87fc1951659dc00c1e6fee3e93986","modified":1725332958298},{"_id":"public/img/moduleId.webp","hash":"0352209c3520a1652af237e28499ba8b8754294d","modified":1725332958298},{"_id":"public/img/moduleId2.webp","hash":"3555f3ee907b2c10501a877692eda462ee2abd01","modified":1725332958298},{"_id":"public/img/moduleId1.webp","hash":"5b386ce5bc115533c468aea27e48a08ceb663201","modified":1725332958298},{"_id":"public/img/link-z.webp","hash":"009ff72ce53880e772670fb9f0b8ea2bdf101032","modified":1725332958298},{"_id":"public/img/light-z.webp","hash":"6799f88e593c7bf928151caa2ad781360c5359ac","modified":1725332958298},{"_id":"public/img/moduleId3.webp","hash":"34b0df00c1eb59ea9d2d303fc14096ea2d683c4a","modified":1725332958298},{"_id":"public/img/moduleId5.webp","hash":"53c20699f62ed55e8eecb5ba30b5a23c5b68441d","modified":1725332958298},{"_id":"public/img/oneLiner.webp","hash":"c480be3afcc901855b147097bf9dcb4b0b06b815","modified":1725332958298},{"_id":"public/img/moduleId4.webp","hash":"14bc33b01fb04e3d5acd00f73253bae3abc5ae5a","modified":1725332958298},{"_id":"public/img/redux-res.webp","hash":"66dd5975c5bc45cf4baf2adc1248e461bc114ad7","modified":1725332958298},{"_id":"public/img/react-s.webp","hash":"a23c26c20a45e742ed2a134578b7750b85e847d7","modified":1725332958298},{"_id":"public/img/prev.webp","hash":"188e32c489302dbd6f67d35ac78f5a5a848597f0","modified":1725332958298},{"_id":"public/img/rush1.webp","hash":"4ed09e4709625e6e845691b50e52ab14c8e27dab","modified":1725332958298},{"_id":"public/img/rush2.webp","hash":"1b822c247f136186b3499353bc91bb7d568b1a55","modified":1725332958298},{"_id":"public/img/scopecss-z.webp","hash":"39ac336f96f939015c7e272af1534ab111f3cc3b","modified":1725332958298},{"_id":"public/img/rush5.webp","hash":"c6f13c03ed5dd5b918e7ecf7d1e53f93f064bfe7","modified":1725332958298},{"_id":"public/img/rush3.webp","hash":"0cfa5eedc2eb045e5e51139e70be728cb797a7a2","modified":1725332958298},{"_id":"public/img/serviceworker-z.webp","hash":"3b9d456e590f8d4a1856e210db3144e6bf19135e","modified":1725332958298},{"_id":"public/img/rush.webp","hash":"43090bedd22251b5e177e7f07bf748e64367319c","modified":1725332958298},{"_id":"public/img/scopecss.webp","hash":"24d0eb1f9ed10848ed186674a1c01c2588dd6a75","modified":1725332958298},{"_id":"public/img/serviceworker.webp","hash":"4ecd94f4361864de3025316e7afc4fa5d5c3dfcb","modified":1725332958298},{"_id":"public/img/service.jpg","hash":"bfeec49cd4926dff99b3a6681cdadd32eb3ef551","modified":1725332958298},{"_id":"public/img/tags-z.webp","hash":"8e7957bf6970a7fa396311177f20420b92f1a0a3","modified":1725332958298},{"_id":"public/img/strapi.png","hash":"1cc9e7468cd87781e5533e0998fb205f08c6d0e2","modified":1725332958298},{"_id":"public/img/token.webp","hash":"bb9bdfb8ace519b3201f57ff17b2d0b558dce893","modified":1725332958298},{"_id":"public/img/useState.webp","hash":"a9722edd88f1b6bdabcbf8c05774a1bdc55c3d6e","modified":1725332958298},{"_id":"public/img/yapi.png","hash":"8c1d9c334f67e9a008c11daaae181b6500ca7627","modified":1725332958298},{"_id":"public/img/webpack.webp","hash":"c3540318fe4d65b6a5e61fbd43218a4e9afd4f86","modified":1725332958298},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1725332958298},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1725332958298},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1725332958298},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1725332958298},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1725332958298},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1725332958298},{"_id":"public/css/index.css","hash":"11036e1d7dea5a45810c3c25f432b61ebfd8cc44","modified":1725332958298},{"_id":"public/img/gitservice.webp","hash":"5358ecc46cd2789d0417917f9568396e1680c1a7","modified":1725332958298},{"_id":"public/img/life-z.webp","hash":"8f59e7c7f655f5fb79b7afbad9eb3eabc8879985","modified":1725332958298},{"_id":"public/img/after.png","hash":"1db2c0dedf99b54e2dd8a112e9888e2ac76abeaa","modified":1725332958298},{"_id":"public/img/moduleId3.png","hash":"fce4193c21491ea0cb102a723775d28c8aee1157","modified":1725332958298},{"_id":"public/img/swa.webp","hash":"7bbdc860bc011de15825420326a9159a6aff31f2","modified":1725332958298},{"_id":"public/img/type.png","hash":"dcda607e177774b034d6730546c3421ad4a8666b","modified":1725332958298},{"_id":"public/img/node.png","hash":"e71863fa1281e346fd9091c53c9e45be84c423fa","modified":1725332958298},{"_id":"public/img/redux.webp","hash":"d935118e5ec508b3965bf95a41a5111199df1f7c","modified":1725332958298},{"_id":"public/img/thread.jpg","hash":"1c3db76641bcdfa720eb35bdbf5176e487518e35","modified":1725332958298},{"_id":"public/img/index.png","hash":"d187a3cb18886101846b7e0550d5dd5595c4d47a","modified":1725332958298},{"_id":"public/img/i18n-ally.png","hash":"493cb84d1770967734f21c7c6717de90962fcc08","modified":1725332958298},{"_id":"public/img/tags.webp","hash":"8c01b7e251ca32356525d5fee8861ccc21f6598f","modified":1725332958298},{"_id":"public/img/life.webp","hash":"e6b1129033ab98f76958a21edbc86adbe03480bc","modified":1725332958298},{"_id":"public/img/light.png","hash":"272b64ab2bfc55312a664aeac8745dfda6d91714","modified":1725332958298},{"_id":"public/img/web-c-z.webp","hash":"6e82abd3ad72dae32588ba78ed0e750dafeb067e","modified":1725332958298},{"_id":"public/img/hand.webp","hash":"0c6a09e456a39c46e0fe3b1048ab174b53ac2e75","modified":1725332958298},{"_id":"public/img/skip.webp","hash":"89a1b0ca4570961776053884c3136f348d81e08a","modified":1725332958298},{"_id":"public/img/rush.png","hash":"14945bd2b977ebed5e6e821d25bb491781e841db","modified":1725332958298},{"_id":"public/img/swa.png","hash":"b05a34ad865a1b2bb90bb1ffd64fcb562489ef0e","modified":1725332958298},{"_id":"public/img/web-c.webp","hash":"3a1f272a551abfeda056183ae8cd6731e54643c0","modified":1725332958298},{"_id":"public/img/useState.png","hash":"75507e80b6d4428b8916552f38265944757208c9","modified":1725332958298},{"_id":"public/img/shoe.jpg","hash":"56399b6161d2c33b06ff32a2866b67f0a228cc0e","modified":1725332958298},{"_id":"public/img/redux.jpeg","hash":"b9178151f1ac8d2397b56401047458ee57410ffe","modified":1725332958298}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2021-07-23T08:10:11.000Z","type":"categories","top_img":"/img/one-z.webp","_content":"","source":"categories/index.md","raw":"---\ntitle: \"分类\"\ndate: 2021-07-23 16:10:11\ntype: categories\ntop_img: /img/one-z.webp\n---\n","updated":"2021-08-22T02:55:57.756Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm0lup406000042u78dh45qnz","content":"","cover":false,"excerpt":"","more":""},{"title":"友情链接","date":"2021-07-23T08:10:57.000Z","type":"link","top_img":"/img/link-z.webp","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-07-23 16:10:57\ntype: \"link\"\ntop_img: /img/link-z.webp\n---\n","updated":"2021-08-22T02:48:42.633Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm0lup409000242u79yeh1hkj","content":"","cover":false,"excerpt":"","more":""},{"title":"标签","date":"2021-07-23T08:10:42.000Z","type":"tags","top_img":"/img/tags-z.webp","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-07-23 16:10:42\ntype: \"tags\"\ntop_img: /img/tags-z.webp \n---\n","updated":"2021-08-22T02:48:50.299Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm0lup40a000442u7g4ul7713","content":"","cover":false,"excerpt":"","more":""}],"Post":[{"title":"20个一行js的小技巧","cover":"/img/oneLiner.webp","_content":"\n### 获取浏览器cookie\n\n```js\nconst cookie = name => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();\n\ncookie('_ga');\n// Result: \"GA1.2.1929736587.1601974046\"\n```\n\n\n### 转换 RGB to Hex\n\n\n```js\nconst rgbToHex = (r, g, b) =>\n  \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n\nrgbToHex(0, 51, 255); \n// Result: #0033ff\n```\n\n\n### 复制到剪切板\n\n```js\nconst copyToClipboard = (text) => navigator.clipboard.writeText(text);\n\ncopyToClipboard(\"Hello World\");\n```\n\n### 检查日期是否合法\n\n```js\nconst isDateValid = (...val) => !Number.isNaN(new Date(...val).valueOf());\n\nisDateValid(\"December 17, 1995 03:24:00\");\n// Result: true\n```\n\n\n### 查找一年中的某一天\n\n```js\nconst dayOfYear = (date) =>\n  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\n\ndayOfYear(new Date());\n// Result: 264\n```\n\n\n### 转换字符的首字母为大写\n\n```js\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\n\ncapitalize(\"follow for more\")\n// Result: Follow for more\n```\n\n\n### 两个日期之间相隔多少天\n\n```js\nconst dayDif = (date1, date2) => Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)\n\ndayDif(new Date(\"2020-10-21\"), new Date(\"2021-10-22\"))\n// Result: 366\n```\n\n\n### 清除所有的cookies\n\n```js\nconst clearCookies = document.cookie.split(';').forEach(cookie => document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`));\n```\n\n\n### 生成随机的hex\n\n```js\nconst randomHex = () => `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \"0\")}`;\n\nconsole.log(randomHex());\n// Result: #92b008\n```\n\n\n### 数组去除重复\n\n```js\nconst removeDuplicates = (arr) => [...new Set(arr)];\n\nconsole.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));\n// Result: [ 1, 2, 3, 4, 5, 6 ]\n```\n\n\n### 获取url参数\n\n```js\nconst getParameters = (URL) => {\n  URL = JSON.parse('{\"' + decodeURI(URL.split(\"?\")[1]).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') +'\"}');\n  return JSON.stringify(URL);\n};\n\ngetParameters(window.location)\n// Result: { search : \"easy\", page : 3 }\n```\n\n### 从日期中取出时间\n\n```js\nconst timeFromDate = date => date.toTimeString().slice(0, 8);\n\nconsole.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0))); \n// Result: \"17:30:00\"\n```\n\n### 判断数字是奇数还是偶数\n\n```js\nconst isEven = num => num % 2 === 0;\n\nconsole.log(isEven(2)); \n// Result: True\n```\n\n### 在数字中找平均数\n\n```js\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\n\naverage(1, 2, 3, 4);\n// Result: 2.5\n```\n\n\n### 滚动到浏览器顶部\n\n```js\nconst goToTop = () => window.scrollTo(0, 0);\n\ngoToTop();\n```\n\n\n### 反转字符串\n\n```js\nconst reverse = str => str.split('').reverse().join('');\n\nreverse('hello world');     \n// Result: 'dlrow olleh'\n```\n\n### 检查数组是否为空\n\n```js\nconst isNotEmpty = arr => Array.isArray(arr) && arr.length > 0;\n\nisNotEmpty([1, 2, 3]);\n// Result: true\n```\n\n### 用户选择的文本范围或光标的当前位置\n\n```js\nconst getSelectedText = () => window.getSelection().toString();\n\ngetSelectedText();\n```\n\n\n### 数组乱序\n\n```js\nconst shuffleArray = (arr) => arr.sort(() => 0.5 - Math.random());\n\nconsole.log(shuffleArray([1, 2, 3, 4]));\n// Result: [ 1, 4, 3, 2 ]\n```\n\n### 检查是否是暗黑模式\n\n```js\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n\nconsole.log(isDarkMode) // Result: True or False\n```","source":"_posts/oneLinerJsSkill.md","raw":"---\ntitle: 20个一行js的小技巧\ncover: /img/oneLiner.webp\n---\n\n### 获取浏览器cookie\n\n```js\nconst cookie = name => `; ${document.cookie}`.split(`; ${name}=`).pop().split(';').shift();\n\ncookie('_ga');\n// Result: \"GA1.2.1929736587.1601974046\"\n```\n\n\n### 转换 RGB to Hex\n\n\n```js\nconst rgbToHex = (r, g, b) =>\n  \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n\nrgbToHex(0, 51, 255); \n// Result: #0033ff\n```\n\n\n### 复制到剪切板\n\n```js\nconst copyToClipboard = (text) => navigator.clipboard.writeText(text);\n\ncopyToClipboard(\"Hello World\");\n```\n\n### 检查日期是否合法\n\n```js\nconst isDateValid = (...val) => !Number.isNaN(new Date(...val).valueOf());\n\nisDateValid(\"December 17, 1995 03:24:00\");\n// Result: true\n```\n\n\n### 查找一年中的某一天\n\n```js\nconst dayOfYear = (date) =>\n  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\n\ndayOfYear(new Date());\n// Result: 264\n```\n\n\n### 转换字符的首字母为大写\n\n```js\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\n\ncapitalize(\"follow for more\")\n// Result: Follow for more\n```\n\n\n### 两个日期之间相隔多少天\n\n```js\nconst dayDif = (date1, date2) => Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000)\n\ndayDif(new Date(\"2020-10-21\"), new Date(\"2021-10-22\"))\n// Result: 366\n```\n\n\n### 清除所有的cookies\n\n```js\nconst clearCookies = document.cookie.split(';').forEach(cookie => document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`));\n```\n\n\n### 生成随机的hex\n\n```js\nconst randomHex = () => `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \"0\")}`;\n\nconsole.log(randomHex());\n// Result: #92b008\n```\n\n\n### 数组去除重复\n\n```js\nconst removeDuplicates = (arr) => [...new Set(arr)];\n\nconsole.log(removeDuplicates([1, 2, 3, 3, 4, 4, 5, 5, 6]));\n// Result: [ 1, 2, 3, 4, 5, 6 ]\n```\n\n\n### 获取url参数\n\n```js\nconst getParameters = (URL) => {\n  URL = JSON.parse('{\"' + decodeURI(URL.split(\"?\")[1]).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') +'\"}');\n  return JSON.stringify(URL);\n};\n\ngetParameters(window.location)\n// Result: { search : \"easy\", page : 3 }\n```\n\n### 从日期中取出时间\n\n```js\nconst timeFromDate = date => date.toTimeString().slice(0, 8);\n\nconsole.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0))); \n// Result: \"17:30:00\"\n```\n\n### 判断数字是奇数还是偶数\n\n```js\nconst isEven = num => num % 2 === 0;\n\nconsole.log(isEven(2)); \n// Result: True\n```\n\n### 在数字中找平均数\n\n```js\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\n\naverage(1, 2, 3, 4);\n// Result: 2.5\n```\n\n\n### 滚动到浏览器顶部\n\n```js\nconst goToTop = () => window.scrollTo(0, 0);\n\ngoToTop();\n```\n\n\n### 反转字符串\n\n```js\nconst reverse = str => str.split('').reverse().join('');\n\nreverse('hello world');     \n// Result: 'dlrow olleh'\n```\n\n### 检查数组是否为空\n\n```js\nconst isNotEmpty = arr => Array.isArray(arr) && arr.length > 0;\n\nisNotEmpty([1, 2, 3]);\n// Result: true\n```\n\n### 用户选择的文本范围或光标的当前位置\n\n```js\nconst getSelectedText = () => window.getSelection().toString();\n\ngetSelectedText();\n```\n\n\n### 数组乱序\n\n```js\nconst shuffleArray = (arr) => arr.sort(() => 0.5 - Math.random());\n\nconsole.log(shuffleArray([1, 2, 3, 4]));\n// Result: [ 1, 4, 3, 2 ]\n```\n\n### 检查是否是暗黑模式\n\n```js\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n\nconsole.log(isDarkMode) // Result: True or False\n```","slug":"oneLinerJsSkill","published":1,"date":"2021-09-21T05:28:04.592Z","updated":"2021-09-21T06:02:44.891Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup408000142u7ak9y54g2","content":"<h3 id=\"获取浏览器cookie\"><a href=\"#获取浏览器cookie\" class=\"headerlink\" title=\"获取浏览器cookie\"></a>获取浏览器cookie</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cookie</span> = name =&gt; <span class=\"string\">`; <span class=\"subst\">$&#123;<span class=\"variable language_\">document</span>.cookie&#125;</span>`</span>.<span class=\"title function_\">split</span>(<span class=\"string\">`; <span class=\"subst\">$&#123;name&#125;</span>=`</span>).<span class=\"title function_\">pop</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).<span class=\"title function_\">shift</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">cookie</span>(<span class=\"string\">&#x27;_ga&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: &quot;GA1.2.1929736587.1601974046&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"转换-RGB-to-Hex\"><a href=\"#转换-RGB-to-Hex\" class=\"headerlink\" title=\"转换 RGB to Hex\"></a>转换 RGB to Hex</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">rgbToHex</span> = (<span class=\"params\">r, g, b</span>) =&gt;</span><br><span class=\"line\">  <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">rgbToHex</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>, <span class=\"number\">255</span>); </span><br><span class=\"line\"><span class=\"comment\">// Result: #0033ff</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"复制到剪切板\"><a href=\"#复制到剪切板\" class=\"headerlink\" title=\"复制到剪切板\"></a>复制到剪切板</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\">text</span>) =&gt; navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">copyToClipboard</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查日期是否合法\"><a href=\"#检查日期是否合法\" class=\"headerlink\" title=\"检查日期是否合法\"></a>检查日期是否合法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isDateValid</span> = (<span class=\"params\">...val</span>) =&gt; !<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(...val).<span class=\"title function_\">valueOf</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isDateValid</span>(<span class=\"string\">&quot;December 17, 1995 03:24:00&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: true</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"查找一年中的某一天\"><a href=\"#查找一年中的某一天\" class=\"headerlink\" title=\"查找一年中的某一天\"></a>查找一年中的某一天</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayOfYear</span> = (<span class=\"params\">date</span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((date - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date.<span class=\"title function_\">getFullYear</span>(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayOfYear</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// Result: 264</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"转换字符的首字母为大写\"><a href=\"#转换字符的首字母为大写\" class=\"headerlink\" title=\"转换字符的首字母为大写\"></a>转换字符的首字母为大写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">capitalize</span> = str =&gt; str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>).<span class=\"title function_\">toUpperCase</span>() + str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">capitalize</span>(<span class=\"string\">&quot;follow for more&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// Result: Follow for more</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"两个日期之间相隔多少天\"><a href=\"#两个日期之间相隔多少天\" class=\"headerlink\" title=\"两个日期之间相隔多少天\"></a>两个日期之间相隔多少天</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayDif</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1.<span class=\"title function_\">getTime</span>() - date2.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">86400000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayDif</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2020-10-21&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-22&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// Result: 366</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"清除所有的cookies\"><a href=\"#清除所有的cookies\" class=\"headerlink\" title=\"清除所有的cookies\"></a>清除所有的cookies</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clearCookies = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cookie</span> =&gt;</span> <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = cookie.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^ +/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/=.*/</span>, <span class=\"string\">`=;expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">0</span>).toUTCString()&#125;</span>;path=/`</span>));</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成随机的hex\"><a href=\"#生成随机的hex\" class=\"headerlink\" title=\"生成随机的hex\"></a>生成随机的hex</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomHex</span> = (<span class=\"params\"></span>) =&gt; <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xffffff</span>).toString(<span class=\"number\">16</span>).padEnd(<span class=\"number\">6</span>, <span class=\"string\">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">randomHex</span>());</span><br><span class=\"line\"><span class=\"comment\">// Result: #92b008</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"数组去除重复\"><a href=\"#数组去除重复\" class=\"headerlink\" title=\"数组去除重复\"></a>数组去除重复</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">removeDuplicates</span> = (<span class=\"params\">arr</span>) =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">removeDuplicates</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]));</span><br><span class=\"line\"><span class=\"comment\">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParameters</span> = (<span class=\"params\">URL</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">URL</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;&#123;&quot;&#x27;</span> + <span class=\"built_in\">decodeURI</span>(<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>]).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&#x27;\\\\&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">&#x27;&quot;,&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/=/g</span>, <span class=\"string\">&#x27;&quot;:&quot;&#x27;</span>) +<span class=\"string\">&#x27;&quot;&#125;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"variable constant_\">URL</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getParameters</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>)</span><br><span class=\"line\"><span class=\"comment\">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从日期中取出时间\"><a href=\"#从日期中取出时间\" class=\"headerlink\" title=\"从日期中取出时间\"></a>从日期中取出时间</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">timeFromDate</span> = date =&gt; date.<span class=\"title function_\">toTimeString</span>().<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">timeFromDate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>))); </span><br><span class=\"line\"><span class=\"comment\">// Result: &quot;17:30:00&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断数字是奇数还是偶数\"><a href=\"#判断数字是奇数还是偶数\" class=\"headerlink\" title=\"判断数字是奇数还是偶数\"></a>判断数字是奇数还是偶数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEven</span> = num =&gt; num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isEven</span>(<span class=\"number\">2</span>)); </span><br><span class=\"line\"><span class=\"comment\">// Result: True</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在数字中找平均数\"><a href=\"#在数字中找平均数\" class=\"headerlink\" title=\"在数字中找平均数\"></a>在数字中找平均数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">...args</span>) =&gt; args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / args.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">average</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: 2.5</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"滚动到浏览器顶部\"><a href=\"#滚动到浏览器顶部\" class=\"headerlink\" title=\"滚动到浏览器顶部\"></a>滚动到浏览器顶部</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">goToTop</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">scrollTo</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">goToTop</span>();</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverse</span> = str =&gt; str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);     </span><br><span class=\"line\"><span class=\"comment\">// Result: &#x27;dlrow olleh&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查数组是否为空\"><a href=\"#检查数组是否为空\" class=\"headerlink\" title=\"检查数组是否为空\"></a>检查数组是否为空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isNotEmpty</span> = arr =&gt; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) &amp;&amp; arr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isNotEmpty</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// Result: true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户选择的文本范围或光标的当前位置\"><a href=\"#用户选择的文本范围或光标的当前位置\" class=\"headerlink\" title=\"用户选择的文本范围或光标的当前位置\"></a>用户选择的文本范围或光标的当前位置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getSelectedText</span>();</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"数组乱序\"><a href=\"#数组乱序\" class=\"headerlink\" title=\"数组乱序\"></a>数组乱序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">shuffleArray</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">() =&gt;</span> <span class=\"number\">0.5</span> - <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">shuffleArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));</span><br><span class=\"line\"><span class=\"comment\">// Result: [ 1, 4, 3, 2 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查是否是暗黑模式\"><a href=\"#检查是否是暗黑模式\" class=\"headerlink\" title=\"检查是否是暗黑模式\"></a>检查是否是暗黑模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDarkMode = <span class=\"variable language_\">window</span>.<span class=\"property\">matchMedia</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class=\"property\">matches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(isDarkMode) <span class=\"comment\">// Result: True or False</span></span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h3 id=\"获取浏览器cookie\"><a href=\"#获取浏览器cookie\" class=\"headerlink\" title=\"获取浏览器cookie\"></a>获取浏览器cookie</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cookie</span> = name =&gt; <span class=\"string\">`; <span class=\"subst\">$&#123;<span class=\"variable language_\">document</span>.cookie&#125;</span>`</span>.<span class=\"title function_\">split</span>(<span class=\"string\">`; <span class=\"subst\">$&#123;name&#125;</span>=`</span>).<span class=\"title function_\">pop</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).<span class=\"title function_\">shift</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">cookie</span>(<span class=\"string\">&#x27;_ga&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: &quot;GA1.2.1929736587.1601974046&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"转换-RGB-to-Hex\"><a href=\"#转换-RGB-to-Hex\" class=\"headerlink\" title=\"转换 RGB to Hex\"></a>转换 RGB to Hex</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">rgbToHex</span> = (<span class=\"params\">r, g, b</span>) =&gt;</span><br><span class=\"line\">  <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">rgbToHex</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>, <span class=\"number\">255</span>); </span><br><span class=\"line\"><span class=\"comment\">// Result: #0033ff</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"复制到剪切板\"><a href=\"#复制到剪切板\" class=\"headerlink\" title=\"复制到剪切板\"></a>复制到剪切板</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\">text</span>) =&gt; navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">copyToClipboard</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查日期是否合法\"><a href=\"#检查日期是否合法\" class=\"headerlink\" title=\"检查日期是否合法\"></a>检查日期是否合法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isDateValid</span> = (<span class=\"params\">...val</span>) =&gt; !<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(...val).<span class=\"title function_\">valueOf</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isDateValid</span>(<span class=\"string\">&quot;December 17, 1995 03:24:00&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: true</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"查找一年中的某一天\"><a href=\"#查找一年中的某一天\" class=\"headerlink\" title=\"查找一年中的某一天\"></a>查找一年中的某一天</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayOfYear</span> = (<span class=\"params\">date</span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((date - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date.<span class=\"title function_\">getFullYear</span>(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayOfYear</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// Result: 264</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"转换字符的首字母为大写\"><a href=\"#转换字符的首字母为大写\" class=\"headerlink\" title=\"转换字符的首字母为大写\"></a>转换字符的首字母为大写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">capitalize</span> = str =&gt; str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>).<span class=\"title function_\">toUpperCase</span>() + str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">capitalize</span>(<span class=\"string\">&quot;follow for more&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// Result: Follow for more</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"两个日期之间相隔多少天\"><a href=\"#两个日期之间相隔多少天\" class=\"headerlink\" title=\"两个日期之间相隔多少天\"></a>两个日期之间相隔多少天</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayDif</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1.<span class=\"title function_\">getTime</span>() - date2.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">86400000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayDif</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2020-10-21&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-22&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// Result: 366</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"清除所有的cookies\"><a href=\"#清除所有的cookies\" class=\"headerlink\" title=\"清除所有的cookies\"></a>清除所有的cookies</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clearCookies = <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cookie</span> =&gt;</span> <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> = cookie.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^ +/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/=.*/</span>, <span class=\"string\">`=;expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">0</span>).toUTCString()&#125;</span>;path=/`</span>));</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成随机的hex\"><a href=\"#生成随机的hex\" class=\"headerlink\" title=\"生成随机的hex\"></a>生成随机的hex</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomHex</span> = (<span class=\"params\"></span>) =&gt; <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xffffff</span>).toString(<span class=\"number\">16</span>).padEnd(<span class=\"number\">6</span>, <span class=\"string\">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">randomHex</span>());</span><br><span class=\"line\"><span class=\"comment\">// Result: #92b008</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"数组去除重复\"><a href=\"#数组去除重复\" class=\"headerlink\" title=\"数组去除重复\"></a>数组去除重复</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">removeDuplicates</span> = (<span class=\"params\">arr</span>) =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">removeDuplicates</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]));</span><br><span class=\"line\"><span class=\"comment\">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"获取url参数\"><a href=\"#获取url参数\" class=\"headerlink\" title=\"获取url参数\"></a>获取url参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParameters</span> = (<span class=\"params\">URL</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">URL</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;&#123;&quot;&#x27;</span> + <span class=\"built_in\">decodeURI</span>(<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>]).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&#x27;\\\\&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">&#x27;&quot;,&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/=/g</span>, <span class=\"string\">&#x27;&quot;:&quot;&#x27;</span>) +<span class=\"string\">&#x27;&quot;&#125;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"variable constant_\">URL</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getParameters</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>)</span><br><span class=\"line\"><span class=\"comment\">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从日期中取出时间\"><a href=\"#从日期中取出时间\" class=\"headerlink\" title=\"从日期中取出时间\"></a>从日期中取出时间</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">timeFromDate</span> = date =&gt; date.<span class=\"title function_\">toTimeString</span>().<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">timeFromDate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>))); </span><br><span class=\"line\"><span class=\"comment\">// Result: &quot;17:30:00&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断数字是奇数还是偶数\"><a href=\"#判断数字是奇数还是偶数\" class=\"headerlink\" title=\"判断数字是奇数还是偶数\"></a>判断数字是奇数还是偶数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEven</span> = num =&gt; num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isEven</span>(<span class=\"number\">2</span>)); </span><br><span class=\"line\"><span class=\"comment\">// Result: True</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在数字中找平均数\"><a href=\"#在数字中找平均数\" class=\"headerlink\" title=\"在数字中找平均数\"></a>在数字中找平均数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">...args</span>) =&gt; args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / args.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">average</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// Result: 2.5</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"滚动到浏览器顶部\"><a href=\"#滚动到浏览器顶部\" class=\"headerlink\" title=\"滚动到浏览器顶部\"></a>滚动到浏览器顶部</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">goToTop</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">scrollTo</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">goToTop</span>();</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverse</span> = str =&gt; str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);     </span><br><span class=\"line\"><span class=\"comment\">// Result: &#x27;dlrow olleh&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查数组是否为空\"><a href=\"#检查数组是否为空\" class=\"headerlink\" title=\"检查数组是否为空\"></a>检查数组是否为空</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isNotEmpty</span> = arr =&gt; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) &amp;&amp; arr.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isNotEmpty</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// Result: true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户选择的文本范围或光标的当前位置\"><a href=\"#用户选择的文本范围或光标的当前位置\" class=\"headerlink\" title=\"用户选择的文本范围或光标的当前位置\"></a>用户选择的文本范围或光标的当前位置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getSelectedText</span>();</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"数组乱序\"><a href=\"#数组乱序\" class=\"headerlink\" title=\"数组乱序\"></a>数组乱序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">shuffleArray</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">() =&gt;</span> <span class=\"number\">0.5</span> - <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">shuffleArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));</span><br><span class=\"line\"><span class=\"comment\">// Result: [ 1, 4, 3, 2 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查是否是暗黑模式\"><a href=\"#检查是否是暗黑模式\" class=\"headerlink\" title=\"检查是否是暗黑模式\"></a>检查是否是暗黑模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isDarkMode = <span class=\"variable language_\">window</span>.<span class=\"property\">matchMedia</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class=\"property\">matches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(isDarkMode) <span class=\"comment\">// Result: True or False</span></span><br></pre></td></tr></table></figure>"},{"title":"css-loader怎么实现css-module","cover":"/img/css-module.webp","_content":"\n### css-loader 中 utils.js\n\n- generateScopedName函数拿到css类名，根据传入所需的hash算法生成与每个css类名对应的hash值，最后作为编译后的类名来防止类名冲突。\n\n```js \nvar _postcssModulesScope = _interopRequireDefault(require(\"postcss-modules-scope\"));\n\n(0, _postcssModulesScope.default)({ \n        generateScopedName(exportName) {\n        //exportName是传入的css的类名\n        let localIdent;\n        if (typeof getLocalIdent !== \"undefined\") {\n          localIdent = getLocalIdent(loaderContext, localIdentName, unescape(exportName), {\n            context: localIdentContext,\n            hashSalt: localIdentHashSalt,\n            hashFunction: localIdentHashFunction,\n            hashDigest: localIdentHashDigest,\n            hashDigestLength: localIdentHashDigestLength,\n            regExp: localIdentRegExp\n          });\n        } // A null/undefined value signals that we should invoke the default\n        // getLocalIdent method.\n\n\n        if (typeof localIdent === \"undefined\" || localIdent === null) {\n          localIdent = defaultGetLocalIdent(\n            loaderContext, /*loader的上下文*/\n            localIdentName, /*[hash:base64]*/\n            unescape(exportName), /*去掉反斜杠*/\n            {\n            context: localIdentContext,\n            hashSalt: localIdentHashSalt,\n            hashFunction: localIdentHashFunction,\n            hashDigest: localIdentHashDigest,\n            hashDigestLength: localIdentHashDigestLength,\n            regExp: localIdentRegExp\n          });\n          return escapeLocalIdent(localIdent).replace(/\\\\\\[local\\\\]/gi, exportName);\n        }\n        \n        return escapeLocalIdent(localIdent);\n      },\n\nfunction defaultGetLocalIdent(loaderContext, localIdentName /*[hash:base64]*/, localName/*css类名*/, options) {\n  let relativeMatchResource = \"\"; // eslint-disable-next-line no-underscore-dangle\n\n  if (loaderContext._module && loaderContext._module.matchResource) {\n    relativeMatchResource = `${normalizePath( // eslint-disable-next-line no-underscore-dangle\n    _path.default.relative(options.context, loaderContext._module.matchResource))}\\x00`;\n  }\n\n  const relativeResourcePath = normalizePath(_path.default.relative(options.context, loaderContext.resourcePath /*css文件所在的路径*/)); // eslint-disable-next-line no-param-reassign\n\n  //relativeResourcePath css文件的相对路径  normalizePath 转换对应系统的斜线的分割符号\n\n\n  options.content = `${relativeMatchResource}${relativeResourcePath}\\x00${localName}`;\n  let {\n    hashFunction, //md4\n    hashDigest, // hex\n    hashDigestLength //20\n  } = options;\n\n  //localIdentName 哪种hash算法\n  const mathes = localIdentName.match(/\\[(?:([^:\\]]+):)?(?:(hash|contenthash|fullhash))(?::([a-z]+\\d*))?(?::(\\d+))?\\]/i);\n\n  if (mathes) {\n    const hashName = mathes[2] || hashFunction;\n    hashFunction = mathes[1] || hashFunction;\n    hashDigest = mathes[3] || hashDigest;\n    hashDigestLength = mathes[4] || hashDigestLength; // `hash` and `contenthash` are same in `loader-utils` context\n    // let's keep `hash` for backward compatibility\n    // eslint-disable-next-line no-param-reassign\n\n    localIdentName = localIdentName.replace(/\\[(?:([^:\\]]+):)?(?:hash|contenthash|fullhash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi, () => hashName === \"fullhash\" ? \"[fullhash]\" : \"[contenthash]\");\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  const hash = loaderContext._compiler.webpack.util.createHash(hashFunction);\n\n  const {\n    hashSalt\n  } = options;\n\n  if (hashSalt) {\n    hash.update(hashSalt);\n  }\n\n  hash.update(options.content);\n  const localIdentHash = hash.digest(hashDigest).slice(0, hashDigestLength).replace(/[/+]/g, \"_\").replace(/^\\d/g, \"_\"); // TODO need improve on webpack side, we should allow to pass hash/contentHash without chunk property, also `data` for `getPath` should be looks good without chunk property\n\n  const ext = _path.default.extname(loaderContext.resourcePath);\n\n  const base = _path.default.basename(loaderContext.resourcePath);\n\n  const name = base.slice(0, base.length - ext.length);\n  const data = {\n    filename: _path.default.relative(options.context, loaderContext.resourcePath),\n    contentHash: localIdentHash,\n    chunk: {\n      name,\n      hash: localIdentHash,\n      contentHash: localIdentHash\n    }\n  }; // eslint-disable-next-line no-underscore-dangle\n\n  let result = loaderContext._compilation.getPath(localIdentName, data);\n\n  if (options.regExp) {\n    const match = loaderContext.resourcePath.match(options.regExp);\n\n    if (match) {\n      match.forEach((matched, i) => {\n        result = result.replace(new RegExp(`\\\\[${i}\\\\]`, \"ig\"), matched);\n      });\n    }\n  }\n\n  return result;\n}\n\n```\n\n\n### postcss-modules-scope src中的index.js\n\n- 在postcss-modules-scope中可以拿到我们写的css类的命名了，也可以看到generateScopedName函数生成作用域命名时，如果传入的options有这个函数,则调用传入的函数，在css-loader的utils.js中可以找到该函数。\n\n```js\nconst generateScopedName =\n    (options && options.generateScopedName) || plugin.generateScopedName;\n\nfunction exportScopedName(name, rawName) {\n        // console.log(name,'🌹') //这里传入了css的类名\n        const scopedName = generateScopedName(\n          rawName ? rawName : name,\n          root.source.input.from,\n          root.source.input.css\n        );\n        const exportEntry = generateExportEntry(\n          rawName ? rawName : name,\n          scopedName,\n          root.source.input.from,\n          root.source.input.css\n        );\n        const { key, value } = exportEntry;\n\n        exports[key] = exports[key] || [];\n\n        if (exports[key].indexOf(value) < 0) {\n          exports[key].push(value);\n        }\n        return scopedName;\n      }\n\n```","source":"_posts/css-module.md","raw":"---\ntitle: css-loader怎么实现css-module\ncover: /img/css-module.webp\n---\n\n### css-loader 中 utils.js\n\n- generateScopedName函数拿到css类名，根据传入所需的hash算法生成与每个css类名对应的hash值，最后作为编译后的类名来防止类名冲突。\n\n```js \nvar _postcssModulesScope = _interopRequireDefault(require(\"postcss-modules-scope\"));\n\n(0, _postcssModulesScope.default)({ \n        generateScopedName(exportName) {\n        //exportName是传入的css的类名\n        let localIdent;\n        if (typeof getLocalIdent !== \"undefined\") {\n          localIdent = getLocalIdent(loaderContext, localIdentName, unescape(exportName), {\n            context: localIdentContext,\n            hashSalt: localIdentHashSalt,\n            hashFunction: localIdentHashFunction,\n            hashDigest: localIdentHashDigest,\n            hashDigestLength: localIdentHashDigestLength,\n            regExp: localIdentRegExp\n          });\n        } // A null/undefined value signals that we should invoke the default\n        // getLocalIdent method.\n\n\n        if (typeof localIdent === \"undefined\" || localIdent === null) {\n          localIdent = defaultGetLocalIdent(\n            loaderContext, /*loader的上下文*/\n            localIdentName, /*[hash:base64]*/\n            unescape(exportName), /*去掉反斜杠*/\n            {\n            context: localIdentContext,\n            hashSalt: localIdentHashSalt,\n            hashFunction: localIdentHashFunction,\n            hashDigest: localIdentHashDigest,\n            hashDigestLength: localIdentHashDigestLength,\n            regExp: localIdentRegExp\n          });\n          return escapeLocalIdent(localIdent).replace(/\\\\\\[local\\\\]/gi, exportName);\n        }\n        \n        return escapeLocalIdent(localIdent);\n      },\n\nfunction defaultGetLocalIdent(loaderContext, localIdentName /*[hash:base64]*/, localName/*css类名*/, options) {\n  let relativeMatchResource = \"\"; // eslint-disable-next-line no-underscore-dangle\n\n  if (loaderContext._module && loaderContext._module.matchResource) {\n    relativeMatchResource = `${normalizePath( // eslint-disable-next-line no-underscore-dangle\n    _path.default.relative(options.context, loaderContext._module.matchResource))}\\x00`;\n  }\n\n  const relativeResourcePath = normalizePath(_path.default.relative(options.context, loaderContext.resourcePath /*css文件所在的路径*/)); // eslint-disable-next-line no-param-reassign\n\n  //relativeResourcePath css文件的相对路径  normalizePath 转换对应系统的斜线的分割符号\n\n\n  options.content = `${relativeMatchResource}${relativeResourcePath}\\x00${localName}`;\n  let {\n    hashFunction, //md4\n    hashDigest, // hex\n    hashDigestLength //20\n  } = options;\n\n  //localIdentName 哪种hash算法\n  const mathes = localIdentName.match(/\\[(?:([^:\\]]+):)?(?:(hash|contenthash|fullhash))(?::([a-z]+\\d*))?(?::(\\d+))?\\]/i);\n\n  if (mathes) {\n    const hashName = mathes[2] || hashFunction;\n    hashFunction = mathes[1] || hashFunction;\n    hashDigest = mathes[3] || hashDigest;\n    hashDigestLength = mathes[4] || hashDigestLength; // `hash` and `contenthash` are same in `loader-utils` context\n    // let's keep `hash` for backward compatibility\n    // eslint-disable-next-line no-param-reassign\n\n    localIdentName = localIdentName.replace(/\\[(?:([^:\\]]+):)?(?:hash|contenthash|fullhash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi, () => hashName === \"fullhash\" ? \"[fullhash]\" : \"[contenthash]\");\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  const hash = loaderContext._compiler.webpack.util.createHash(hashFunction);\n\n  const {\n    hashSalt\n  } = options;\n\n  if (hashSalt) {\n    hash.update(hashSalt);\n  }\n\n  hash.update(options.content);\n  const localIdentHash = hash.digest(hashDigest).slice(0, hashDigestLength).replace(/[/+]/g, \"_\").replace(/^\\d/g, \"_\"); // TODO need improve on webpack side, we should allow to pass hash/contentHash without chunk property, also `data` for `getPath` should be looks good without chunk property\n\n  const ext = _path.default.extname(loaderContext.resourcePath);\n\n  const base = _path.default.basename(loaderContext.resourcePath);\n\n  const name = base.slice(0, base.length - ext.length);\n  const data = {\n    filename: _path.default.relative(options.context, loaderContext.resourcePath),\n    contentHash: localIdentHash,\n    chunk: {\n      name,\n      hash: localIdentHash,\n      contentHash: localIdentHash\n    }\n  }; // eslint-disable-next-line no-underscore-dangle\n\n  let result = loaderContext._compilation.getPath(localIdentName, data);\n\n  if (options.regExp) {\n    const match = loaderContext.resourcePath.match(options.regExp);\n\n    if (match) {\n      match.forEach((matched, i) => {\n        result = result.replace(new RegExp(`\\\\[${i}\\\\]`, \"ig\"), matched);\n      });\n    }\n  }\n\n  return result;\n}\n\n```\n\n\n### postcss-modules-scope src中的index.js\n\n- 在postcss-modules-scope中可以拿到我们写的css类的命名了，也可以看到generateScopedName函数生成作用域命名时，如果传入的options有这个函数,则调用传入的函数，在css-loader的utils.js中可以找到该函数。\n\n```js\nconst generateScopedName =\n    (options && options.generateScopedName) || plugin.generateScopedName;\n\nfunction exportScopedName(name, rawName) {\n        // console.log(name,'🌹') //这里传入了css的类名\n        const scopedName = generateScopedName(\n          rawName ? rawName : name,\n          root.source.input.from,\n          root.source.input.css\n        );\n        const exportEntry = generateExportEntry(\n          rawName ? rawName : name,\n          scopedName,\n          root.source.input.from,\n          root.source.input.css\n        );\n        const { key, value } = exportEntry;\n\n        exports[key] = exports[key] || [];\n\n        if (exports[key].indexOf(value) < 0) {\n          exports[key].push(value);\n        }\n        return scopedName;\n      }\n\n```","slug":"css-module","published":1,"date":"2021-10-12T02:47:36.260Z","updated":"2021-10-12T03:12:09.469Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup409000342u777gv7s1s","content":"<h3 id=\"css-loader-中-utils-js\"><a href=\"#css-loader-中-utils-js\" class=\"headerlink\" title=\"css-loader 中 utils.js\"></a>css-loader 中 utils.js</h3><ul>\n<li>generateScopedName函数拿到css类名，根据传入所需的hash算法生成与每个css类名对应的hash值，最后作为编译后的类名来防止类名冲突。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _postcssModulesScope = <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;postcss-modules-scope&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0</span>, _postcssModulesScope.<span class=\"property\">default</span>)(&#123; </span><br><span class=\"line\">        <span class=\"title function_\">generateScopedName</span>(<span class=\"params\">exportName</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//exportName是传入的css的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> localIdent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getLocalIdent !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">          localIdent = <span class=\"title function_\">getLocalIdent</span>(loaderContext, localIdentName, <span class=\"built_in\">unescape</span>(exportName), &#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: localIdentContext,</span><br><span class=\"line\">            <span class=\"attr\">hashSalt</span>: localIdentHashSalt,</span><br><span class=\"line\">            <span class=\"attr\">hashFunction</span>: localIdentHashFunction,</span><br><span class=\"line\">            <span class=\"attr\">hashDigest</span>: localIdentHashDigest,</span><br><span class=\"line\">            <span class=\"attr\">hashDigestLength</span>: localIdentHashDigestLength,</span><br><span class=\"line\">            <span class=\"attr\">regExp</span>: localIdentRegExp</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"comment\">// A null/undefined value signals that we should invoke the default</span></span><br><span class=\"line\">        <span class=\"comment\">// getLocalIdent method.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> localIdent === <span class=\"string\">&quot;undefined&quot;</span> || localIdent === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          localIdent = <span class=\"title function_\">defaultGetLocalIdent</span>(</span><br><span class=\"line\">            loaderContext, <span class=\"comment\">/*loader的上下文*/</span></span><br><span class=\"line\">            localIdentName, <span class=\"comment\">/*[hash:base64]*/</span></span><br><span class=\"line\">            <span class=\"built_in\">unescape</span>(exportName), <span class=\"comment\">/*去掉反斜杠*/</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: localIdentContext,</span><br><span class=\"line\">            <span class=\"attr\">hashSalt</span>: localIdentHashSalt,</span><br><span class=\"line\">            <span class=\"attr\">hashFunction</span>: localIdentHashFunction,</span><br><span class=\"line\">            <span class=\"attr\">hashDigest</span>: localIdentHashDigest,</span><br><span class=\"line\">            <span class=\"attr\">hashDigestLength</span>: localIdentHashDigestLength,</span><br><span class=\"line\">            <span class=\"attr\">regExp</span>: localIdentRegExp</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> escapeLocalIdent(localIdent).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\\\[local\\\\]/gi</span>, exportName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> escapeLocalIdent(localIdent);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defaultGetLocalIdent</span>(<span class=\"params\">loaderContext, localIdentName <span class=\"comment\">/*[hash:base64]*/</span>, localName<span class=\"comment\">/*css类名*/</span>, options</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> relativeMatchResource = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loaderContext.<span class=\"property\">_module</span> &amp;&amp; loaderContext.<span class=\"property\">_module</span>.<span class=\"property\">matchResource</span>) &#123;</span><br><span class=\"line\">    relativeMatchResource = <span class=\"string\">`<span class=\"subst\">$&#123;normalizePath( // eslint-disable-next-line no-underscore-dangle</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    _path.<span class=\"keyword\">default</span>.relative(options.context, loaderContext._module.matchResource))&#125;</span>\\x00`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> relativeResourcePath = <span class=\"title function_\">normalizePath</span>(_path.<span class=\"property\">default</span>.<span class=\"title function_\">relative</span>(options.<span class=\"property\">context</span>, loaderContext.<span class=\"property\">resourcePath</span> <span class=\"comment\">/*css文件所在的路径*/</span>)); <span class=\"comment\">// eslint-disable-next-line no-param-reassign</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//relativeResourcePath css文件的相对路径  normalizePath 转换对应系统的斜线的分割符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  options.<span class=\"property\">content</span> = <span class=\"string\">`<span class=\"subst\">$&#123;relativeMatchResource&#125;</span><span class=\"subst\">$&#123;relativeResourcePath&#125;</span>\\x00<span class=\"subst\">$&#123;localName&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    hashFunction, <span class=\"comment\">//md4</span></span><br><span class=\"line\">    hashDigest, <span class=\"comment\">// hex</span></span><br><span class=\"line\">    hashDigestLength <span class=\"comment\">//20</span></span><br><span class=\"line\">  &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//localIdentName 哪种hash算法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mathes = localIdentName.<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\[(?:([^:\\]]+):)?(?:(hash|contenthash|fullhash))(?::([a-z]+\\d*))?(?::(\\d+))?\\]/i</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mathes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hashName = mathes[<span class=\"number\">2</span>] || hashFunction;</span><br><span class=\"line\">    hashFunction = mathes[<span class=\"number\">1</span>] || hashFunction;</span><br><span class=\"line\">    hashDigest = mathes[<span class=\"number\">3</span>] || hashDigest;</span><br><span class=\"line\">    hashDigestLength = mathes[<span class=\"number\">4</span>] || hashDigestLength; <span class=\"comment\">// `hash` and `contenthash` are same in `loader-utils` context</span></span><br><span class=\"line\">    <span class=\"comment\">// let&#x27;s keep `hash` for backward compatibility</span></span><br><span class=\"line\">    <span class=\"comment\">// eslint-disable-next-line no-param-reassign</span></span><br><span class=\"line\"></span><br><span class=\"line\">    localIdentName = localIdentName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[(?:([^:\\]]+):)?(?:hash|contenthash|fullhash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi</span>, <span class=\"function\">() =&gt;</span> hashName === <span class=\"string\">&quot;fullhash&quot;</span> ? <span class=\"string\">&quot;[fullhash]&quot;</span> : <span class=\"string\">&quot;[contenthash]&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = loaderContext.<span class=\"property\">_compiler</span>.<span class=\"property\">webpack</span>.<span class=\"property\">util</span>.<span class=\"title function_\">createHash</span>(hashFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    hashSalt</span><br><span class=\"line\">  &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hashSalt) &#123;</span><br><span class=\"line\">    hash.<span class=\"title function_\">update</span>(hashSalt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.<span class=\"title function_\">update</span>(options.<span class=\"property\">content</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localIdentHash = hash.<span class=\"title function_\">digest</span>(hashDigest).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, hashDigestLength).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[/+]/g</span>, <span class=\"string\">&quot;_&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\d/g</span>, <span class=\"string\">&quot;_&quot;</span>); <span class=\"comment\">// TODO need improve on webpack side, we should allow to pass hash/contentHash without chunk property, also `data` for `getPath` should be looks good without chunk property</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ext = _path.<span class=\"property\">default</span>.<span class=\"title function_\">extname</span>(loaderContext.<span class=\"property\">resourcePath</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> base = _path.<span class=\"property\">default</span>.<span class=\"title function_\">basename</span>(loaderContext.<span class=\"property\">resourcePath</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = base.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, base.<span class=\"property\">length</span> - ext.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: _path.<span class=\"property\">default</span>.<span class=\"title function_\">relative</span>(options.<span class=\"property\">context</span>, loaderContext.<span class=\"property\">resourcePath</span>),</span><br><span class=\"line\">    <span class=\"attr\">contentHash</span>: localIdentHash,</span><br><span class=\"line\">    <span class=\"attr\">chunk</span>: &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      <span class=\"attr\">hash</span>: localIdentHash,</span><br><span class=\"line\">      <span class=\"attr\">contentHash</span>: localIdentHash</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = loaderContext.<span class=\"property\">_compilation</span>.<span class=\"title function_\">getPath</span>(localIdentName, data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">regExp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = loaderContext.<span class=\"property\">resourcePath</span>.<span class=\"title function_\">match</span>(options.<span class=\"property\">regExp</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">      match.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">matched, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result = result.<span class=\"title function_\">replace</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`\\\\[<span class=\"subst\">$&#123;i&#125;</span>\\\\]`</span>, <span class=\"string\">&quot;ig&quot;</span>), matched);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"postcss-modules-scope-src中的index-js\"><a href=\"#postcss-modules-scope-src中的index-js\" class=\"headerlink\" title=\"postcss-modules-scope src中的index.js\"></a>postcss-modules-scope src中的index.js</h3><ul>\n<li>在postcss-modules-scope中可以拿到我们写的css类的命名了，也可以看到generateScopedName函数生成作用域命名时，如果传入的options有这个函数,则调用传入的函数，在css-loader的utils.js中可以找到该函数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateScopedName =</span><br><span class=\"line\">    (options &amp;&amp; options.<span class=\"property\">generateScopedName</span>) || plugin.<span class=\"property\">generateScopedName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exportScopedName</span>(<span class=\"params\">name, rawName</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(name,&#x27;🌹&#x27;) //这里传入了css的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> scopedName = <span class=\"title function_\">generateScopedName</span>(</span><br><span class=\"line\">          rawName ? rawName : name,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">css</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">const</span> exportEntry = <span class=\"title function_\">generateExportEntry</span>(</span><br><span class=\"line\">          rawName ? rawName : name,</span><br><span class=\"line\">          scopedName,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">css</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; key, value &#125; = exportEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">exports</span>[key] = <span class=\"built_in\">exports</span>[key] || [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">exports</span>[key].<span class=\"title function_\">indexOf</span>(value) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">exports</span>[key].<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scopedName;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h3 id=\"css-loader-中-utils-js\"><a href=\"#css-loader-中-utils-js\" class=\"headerlink\" title=\"css-loader 中 utils.js\"></a>css-loader 中 utils.js</h3><ul>\n<li>generateScopedName函数拿到css类名，根据传入所需的hash算法生成与每个css类名对应的hash值，最后作为编译后的类名来防止类名冲突。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _postcssModulesScope = <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;postcss-modules-scope&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0</span>, _postcssModulesScope.<span class=\"property\">default</span>)(&#123; </span><br><span class=\"line\">        <span class=\"title function_\">generateScopedName</span>(<span class=\"params\">exportName</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//exportName是传入的css的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> localIdent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getLocalIdent !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">          localIdent = <span class=\"title function_\">getLocalIdent</span>(loaderContext, localIdentName, <span class=\"built_in\">unescape</span>(exportName), &#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: localIdentContext,</span><br><span class=\"line\">            <span class=\"attr\">hashSalt</span>: localIdentHashSalt,</span><br><span class=\"line\">            <span class=\"attr\">hashFunction</span>: localIdentHashFunction,</span><br><span class=\"line\">            <span class=\"attr\">hashDigest</span>: localIdentHashDigest,</span><br><span class=\"line\">            <span class=\"attr\">hashDigestLength</span>: localIdentHashDigestLength,</span><br><span class=\"line\">            <span class=\"attr\">regExp</span>: localIdentRegExp</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"comment\">// A null/undefined value signals that we should invoke the default</span></span><br><span class=\"line\">        <span class=\"comment\">// getLocalIdent method.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> localIdent === <span class=\"string\">&quot;undefined&quot;</span> || localIdent === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          localIdent = <span class=\"title function_\">defaultGetLocalIdent</span>(</span><br><span class=\"line\">            loaderContext, <span class=\"comment\">/*loader的上下文*/</span></span><br><span class=\"line\">            localIdentName, <span class=\"comment\">/*[hash:base64]*/</span></span><br><span class=\"line\">            <span class=\"built_in\">unescape</span>(exportName), <span class=\"comment\">/*去掉反斜杠*/</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: localIdentContext,</span><br><span class=\"line\">            <span class=\"attr\">hashSalt</span>: localIdentHashSalt,</span><br><span class=\"line\">            <span class=\"attr\">hashFunction</span>: localIdentHashFunction,</span><br><span class=\"line\">            <span class=\"attr\">hashDigest</span>: localIdentHashDigest,</span><br><span class=\"line\">            <span class=\"attr\">hashDigestLength</span>: localIdentHashDigestLength,</span><br><span class=\"line\">            <span class=\"attr\">regExp</span>: localIdentRegExp</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> escapeLocalIdent(localIdent).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\\\[local\\\\]/gi</span>, exportName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> escapeLocalIdent(localIdent);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defaultGetLocalIdent</span>(<span class=\"params\">loaderContext, localIdentName <span class=\"comment\">/*[hash:base64]*/</span>, localName<span class=\"comment\">/*css类名*/</span>, options</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> relativeMatchResource = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loaderContext.<span class=\"property\">_module</span> &amp;&amp; loaderContext.<span class=\"property\">_module</span>.<span class=\"property\">matchResource</span>) &#123;</span><br><span class=\"line\">    relativeMatchResource = <span class=\"string\">`<span class=\"subst\">$&#123;normalizePath( // eslint-disable-next-line no-underscore-dangle</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    _path.<span class=\"keyword\">default</span>.relative(options.context, loaderContext._module.matchResource))&#125;</span>\\x00`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> relativeResourcePath = <span class=\"title function_\">normalizePath</span>(_path.<span class=\"property\">default</span>.<span class=\"title function_\">relative</span>(options.<span class=\"property\">context</span>, loaderContext.<span class=\"property\">resourcePath</span> <span class=\"comment\">/*css文件所在的路径*/</span>)); <span class=\"comment\">// eslint-disable-next-line no-param-reassign</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//relativeResourcePath css文件的相对路径  normalizePath 转换对应系统的斜线的分割符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  options.<span class=\"property\">content</span> = <span class=\"string\">`<span class=\"subst\">$&#123;relativeMatchResource&#125;</span><span class=\"subst\">$&#123;relativeResourcePath&#125;</span>\\x00<span class=\"subst\">$&#123;localName&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">    hashFunction, <span class=\"comment\">//md4</span></span><br><span class=\"line\">    hashDigest, <span class=\"comment\">// hex</span></span><br><span class=\"line\">    hashDigestLength <span class=\"comment\">//20</span></span><br><span class=\"line\">  &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//localIdentName 哪种hash算法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mathes = localIdentName.<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\[(?:([^:\\]]+):)?(?:(hash|contenthash|fullhash))(?::([a-z]+\\d*))?(?::(\\d+))?\\]/i</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mathes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hashName = mathes[<span class=\"number\">2</span>] || hashFunction;</span><br><span class=\"line\">    hashFunction = mathes[<span class=\"number\">1</span>] || hashFunction;</span><br><span class=\"line\">    hashDigest = mathes[<span class=\"number\">3</span>] || hashDigest;</span><br><span class=\"line\">    hashDigestLength = mathes[<span class=\"number\">4</span>] || hashDigestLength; <span class=\"comment\">// `hash` and `contenthash` are same in `loader-utils` context</span></span><br><span class=\"line\">    <span class=\"comment\">// let&#x27;s keep `hash` for backward compatibility</span></span><br><span class=\"line\">    <span class=\"comment\">// eslint-disable-next-line no-param-reassign</span></span><br><span class=\"line\"></span><br><span class=\"line\">    localIdentName = localIdentName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[(?:([^:\\]]+):)?(?:hash|contenthash|fullhash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi</span>, <span class=\"function\">() =&gt;</span> hashName === <span class=\"string\">&quot;fullhash&quot;</span> ? <span class=\"string\">&quot;[fullhash]&quot;</span> : <span class=\"string\">&quot;[contenthash]&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = loaderContext.<span class=\"property\">_compiler</span>.<span class=\"property\">webpack</span>.<span class=\"property\">util</span>.<span class=\"title function_\">createHash</span>(hashFunction);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    hashSalt</span><br><span class=\"line\">  &#125; = options;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hashSalt) &#123;</span><br><span class=\"line\">    hash.<span class=\"title function_\">update</span>(hashSalt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.<span class=\"title function_\">update</span>(options.<span class=\"property\">content</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localIdentHash = hash.<span class=\"title function_\">digest</span>(hashDigest).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, hashDigestLength).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[/+]/g</span>, <span class=\"string\">&quot;_&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\d/g</span>, <span class=\"string\">&quot;_&quot;</span>); <span class=\"comment\">// TODO need improve on webpack side, we should allow to pass hash/contentHash without chunk property, also `data` for `getPath` should be looks good without chunk property</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ext = _path.<span class=\"property\">default</span>.<span class=\"title function_\">extname</span>(loaderContext.<span class=\"property\">resourcePath</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> base = _path.<span class=\"property\">default</span>.<span class=\"title function_\">basename</span>(loaderContext.<span class=\"property\">resourcePath</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = base.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, base.<span class=\"property\">length</span> - ext.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: _path.<span class=\"property\">default</span>.<span class=\"title function_\">relative</span>(options.<span class=\"property\">context</span>, loaderContext.<span class=\"property\">resourcePath</span>),</span><br><span class=\"line\">    <span class=\"attr\">contentHash</span>: localIdentHash,</span><br><span class=\"line\">    <span class=\"attr\">chunk</span>: &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      <span class=\"attr\">hash</span>: localIdentHash,</span><br><span class=\"line\">      <span class=\"attr\">contentHash</span>: localIdentHash</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;; <span class=\"comment\">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = loaderContext.<span class=\"property\">_compilation</span>.<span class=\"title function_\">getPath</span>(localIdentName, data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">regExp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = loaderContext.<span class=\"property\">resourcePath</span>.<span class=\"title function_\">match</span>(options.<span class=\"property\">regExp</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">      match.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">matched, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result = result.<span class=\"title function_\">replace</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`\\\\[<span class=\"subst\">$&#123;i&#125;</span>\\\\]`</span>, <span class=\"string\">&quot;ig&quot;</span>), matched);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"postcss-modules-scope-src中的index-js\"><a href=\"#postcss-modules-scope-src中的index-js\" class=\"headerlink\" title=\"postcss-modules-scope src中的index.js\"></a>postcss-modules-scope src中的index.js</h3><ul>\n<li>在postcss-modules-scope中可以拿到我们写的css类的命名了，也可以看到generateScopedName函数生成作用域命名时，如果传入的options有这个函数,则调用传入的函数，在css-loader的utils.js中可以找到该函数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateScopedName =</span><br><span class=\"line\">    (options &amp;&amp; options.<span class=\"property\">generateScopedName</span>) || plugin.<span class=\"property\">generateScopedName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exportScopedName</span>(<span class=\"params\">name, rawName</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(name,&#x27;🌹&#x27;) //这里传入了css的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> scopedName = <span class=\"title function_\">generateScopedName</span>(</span><br><span class=\"line\">          rawName ? rawName : name,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">css</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">const</span> exportEntry = <span class=\"title function_\">generateExportEntry</span>(</span><br><span class=\"line\">          rawName ? rawName : name,</span><br><span class=\"line\">          scopedName,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">from</span>,</span><br><span class=\"line\">          root.<span class=\"property\">source</span>.<span class=\"property\">input</span>.<span class=\"property\">css</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; key, value &#125; = exportEntry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">exports</span>[key] = <span class=\"built_in\">exports</span>[key] || [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">exports</span>[key].<span class=\"title function_\">indexOf</span>(value) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">exports</span>[key].<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scopedName;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"基于react实现i18n以及如何支持i18n-ally","cover":"/img/shoe.jpg","_content":"\n### 手写 i18n 代码\n\n- 根据 url 标识来判断语言环境\n- 获取对应的语言正则递归替换\n- 返回翻译之后的内容\n\n```ts\nimport { useRouter } from \"next/router\";\nimport En from \"@/locales/en\";\nimport Zh from \"@/locales/zh\";\nimport { useCallback } from \"react\";\n\ninterface typeParams {\n  [key: string]: string | number;\n}\ninterface ILanguageMap {\n  [key: string]: typeParams;\n}\n\nconst LanguageMap: ILanguageMap = {\n  en: En,\n  zh: Zh,\n};\n\nconst useTranslation: () => {\n  t: (key: string, params?: typeParams | (string | number)[]) => string;\n  isEn: boolean;\n  isZh: boolean;\n} = () => {\n  const router = useRouter();\n  const jsonFun = useCallback(\n    (key: string, params?: typeParams | (string | number)[]) => {\n      let value = \"\";\n      if (LanguageMap[`${router.locale as \"zh\" | \"en\"}`]) {\n        value = LanguageMap[`${router.locale as \"zh\" | \"en\"}`][\n          `${key}`\n        ] as string;\n      }\n\n      if (!key || !value) return key; // 没找到就直接返回key\n\n      if (typeof value !== \"string\") return value; // 如果非string，直接返回，即ReactNode\n\n      // 正则循环替换\n      if (params) {\n        Object.keys(params).forEach((item) => {\n          // 数组\n          if (Array.isArray(params)) {\n            value = String(value).replace(\n              `{${item}}`,\n              String(params[Number(item)])\n            );\n          } else {\n            value = String(value).replace(\n              // eslint-disable-next-line security/detect-non-literal-regexp\n              new RegExp(`{${item}}`, \"g\"),\n              String(params[`${item}`])\n            );\n          }\n        });\n      }\n      return value;\n    },\n    [router.locale]\n  );\n  return {\n    t: jsonFun,\n    isEn: router.locale === \"en\",\n    isZh: router.locale === \"zh\",\n  };\n};\n\nexport default useTranslation;\n```\n\n### vscode i18n-ally 插件配置\n\nhttps://github.com/lokalise/i18n-ally/wiki/Configurations\n\n#### 由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置\n\n```json\n// other formats will be disabled regardless of the framework preference.\n\"i18n-ally.enabledParsers\": [\"js\", \"ts\", \"pot\"]\n```\n\nhttps://github.com/lokalise/i18n-ally/wiki/Locale-Formats\n\n#### 最后翻译效果如图\n\n![avatar](/img/i18n-ally.png)\n","source":"_posts/i18n.md","raw":"---\ntitle: 基于react实现i18n以及如何支持i18n-ally\ncover: /img/shoe.jpg\n---\n\n### 手写 i18n 代码\n\n- 根据 url 标识来判断语言环境\n- 获取对应的语言正则递归替换\n- 返回翻译之后的内容\n\n```ts\nimport { useRouter } from \"next/router\";\nimport En from \"@/locales/en\";\nimport Zh from \"@/locales/zh\";\nimport { useCallback } from \"react\";\n\ninterface typeParams {\n  [key: string]: string | number;\n}\ninterface ILanguageMap {\n  [key: string]: typeParams;\n}\n\nconst LanguageMap: ILanguageMap = {\n  en: En,\n  zh: Zh,\n};\n\nconst useTranslation: () => {\n  t: (key: string, params?: typeParams | (string | number)[]) => string;\n  isEn: boolean;\n  isZh: boolean;\n} = () => {\n  const router = useRouter();\n  const jsonFun = useCallback(\n    (key: string, params?: typeParams | (string | number)[]) => {\n      let value = \"\";\n      if (LanguageMap[`${router.locale as \"zh\" | \"en\"}`]) {\n        value = LanguageMap[`${router.locale as \"zh\" | \"en\"}`][\n          `${key}`\n        ] as string;\n      }\n\n      if (!key || !value) return key; // 没找到就直接返回key\n\n      if (typeof value !== \"string\") return value; // 如果非string，直接返回，即ReactNode\n\n      // 正则循环替换\n      if (params) {\n        Object.keys(params).forEach((item) => {\n          // 数组\n          if (Array.isArray(params)) {\n            value = String(value).replace(\n              `{${item}}`,\n              String(params[Number(item)])\n            );\n          } else {\n            value = String(value).replace(\n              // eslint-disable-next-line security/detect-non-literal-regexp\n              new RegExp(`{${item}}`, \"g\"),\n              String(params[`${item}`])\n            );\n          }\n        });\n      }\n      return value;\n    },\n    [router.locale]\n  );\n  return {\n    t: jsonFun,\n    isEn: router.locale === \"en\",\n    isZh: router.locale === \"zh\",\n  };\n};\n\nexport default useTranslation;\n```\n\n### vscode i18n-ally 插件配置\n\nhttps://github.com/lokalise/i18n-ally/wiki/Configurations\n\n#### 由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置\n\n```json\n// other formats will be disabled regardless of the framework preference.\n\"i18n-ally.enabledParsers\": [\"js\", \"ts\", \"pot\"]\n```\n\nhttps://github.com/lokalise/i18n-ally/wiki/Locale-Formats\n\n#### 最后翻译效果如图\n\n![avatar](/img/i18n-ally.png)\n","slug":"i18n","published":1,"date":"2024-09-03T01:53:40.928Z","updated":"2024-09-03T02:26:49.851Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40a000542u7bf9705i3","content":"<h3 id=\"手写-i18n-代码\"><a href=\"#手写-i18n-代码\" class=\"headerlink\" title=\"手写 i18n 代码\"></a>手写 i18n 代码</h3><ul>\n<li>根据 url 标识来判断语言环境</li>\n<li>获取对应的语言正则递归替换</li>\n<li>返回翻译之后的内容</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;next/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">En</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/locales/en&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Zh</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/locales/zh&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> typeParams &#123;</span><br><span class=\"line\">  [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILanguageMap</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: typeParams;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LanguageMap</span>: <span class=\"title class_\">ILanguageMap</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">en</span>: <span class=\"title class_\">En</span>,</span><br><span class=\"line\">  <span class=\"attr\">zh</span>: <span class=\"title class_\">Zh</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">useTranslation</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">t</span>: <span class=\"function\">(<span class=\"params\">key: <span class=\"built_in\">string</span>, params?: typeParams | (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[]</span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">isEn</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">isZh</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jsonFun = <span class=\"title function_\">useCallback</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">key: <span class=\"built_in\">string</span>, params?: typeParams | (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">LanguageMap</span>[<span class=\"string\">`<span class=\"subst\">$&#123;router.locale <span class=\"keyword\">as</span> <span class=\"string\">&quot;zh&quot;</span> | <span class=\"string\">&quot;en&quot;</span>&#125;</span>`</span>]) &#123;</span><br><span class=\"line\">        value = <span class=\"title class_\">LanguageMap</span>[<span class=\"string\">`<span class=\"subst\">$&#123;router.locale <span class=\"keyword\">as</span> <span class=\"string\">&quot;zh&quot;</span> | <span class=\"string\">&quot;en&quot;</span>&#125;</span>`</span>][</span><br><span class=\"line\">          <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>`</span></span><br><span class=\"line\">        ] <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!key || !value) <span class=\"keyword\">return</span> key; <span class=\"comment\">// 没找到就直接返回key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">&quot;string&quot;</span>) <span class=\"keyword\">return</span> value; <span class=\"comment\">// 如果非string，直接返回，即ReactNode</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 正则循环替换</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (params) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(params).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 数组</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(params)) &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">String</span>(value).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">              <span class=\"string\">`&#123;<span class=\"subst\">$&#123;item&#125;</span>&#125;`</span>,</span><br><span class=\"line\">              <span class=\"title class_\">String</span>(params[<span class=\"title class_\">Number</span>(item)])</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">String</span>(value).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">              <span class=\"comment\">// eslint-disable-next-line security/detect-non-literal-regexp</span></span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;item&#125;</span>&#125;`</span>, <span class=\"string\">&quot;g&quot;</span>),</span><br><span class=\"line\">              <span class=\"title class_\">String</span>(params[<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>])</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [router.<span class=\"property\">locale</span>]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">t</span>: jsonFun,</span><br><span class=\"line\">    <span class=\"attr\">isEn</span>: router.<span class=\"property\">locale</span> === <span class=\"string\">&quot;en&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isZh</span>: router.<span class=\"property\">locale</span> === <span class=\"string\">&quot;zh&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useTranslation;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vscode-i18n-ally-插件配置\"><a href=\"#vscode-i18n-ally-插件配置\" class=\"headerlink\" title=\"vscode i18n-ally 插件配置\"></a>vscode i18n-ally 插件配置</h3><p><a href=\"https://github.com/lokalise/i18n-ally/wiki/Configurations\">https://github.com/lokalise/i18n-ally/wiki/Configurations</a></p>\n<h4 id=\"由于手写的-i18n-只支持-js-或者-ts-引入翻译内容所以需要配置\"><a href=\"#由于手写的-i18n-只支持-js-或者-ts-引入翻译内容所以需要配置\" class=\"headerlink\" title=\"由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置\"></a>由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// other formats will be disabled regardless of the framework preference.</span></span><br><span class=\"line\"><span class=\"attr\">&quot;i18n-ally.enabledParsers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;pot&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/lokalise/i18n-ally/wiki/Locale-Formats\">https://github.com/lokalise/i18n-ally/wiki/Locale-Formats</a></p>\n<h4 id=\"最后翻译效果如图\"><a href=\"#最后翻译效果如图\" class=\"headerlink\" title=\"最后翻译效果如图\"></a>最后翻译效果如图</h4><p><img src=\"/img/i18n-ally.png\" alt=\"avatar\"></p>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"手写-i18n-代码\"><a href=\"#手写-i18n-代码\" class=\"headerlink\" title=\"手写 i18n 代码\"></a>手写 i18n 代码</h3><ul>\n<li>根据 url 标识来判断语言环境</li>\n<li>获取对应的语言正则递归替换</li>\n<li>返回翻译之后的内容</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;next/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">En</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/locales/en&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Zh</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/locales/zh&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> typeParams &#123;</span><br><span class=\"line\">  [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILanguageMap</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: typeParams;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LanguageMap</span>: <span class=\"title class_\">ILanguageMap</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">en</span>: <span class=\"title class_\">En</span>,</span><br><span class=\"line\">  <span class=\"attr\">zh</span>: <span class=\"title class_\">Zh</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">useTranslation</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">t</span>: <span class=\"function\">(<span class=\"params\">key: <span class=\"built_in\">string</span>, params?: typeParams | (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[]</span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">isEn</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">isZh</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125; = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jsonFun = <span class=\"title function_\">useCallback</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">key: <span class=\"built_in\">string</span>, params?: typeParams | (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">LanguageMap</span>[<span class=\"string\">`<span class=\"subst\">$&#123;router.locale <span class=\"keyword\">as</span> <span class=\"string\">&quot;zh&quot;</span> | <span class=\"string\">&quot;en&quot;</span>&#125;</span>`</span>]) &#123;</span><br><span class=\"line\">        value = <span class=\"title class_\">LanguageMap</span>[<span class=\"string\">`<span class=\"subst\">$&#123;router.locale <span class=\"keyword\">as</span> <span class=\"string\">&quot;zh&quot;</span> | <span class=\"string\">&quot;en&quot;</span>&#125;</span>`</span>][</span><br><span class=\"line\">          <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>`</span></span><br><span class=\"line\">        ] <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!key || !value) <span class=\"keyword\">return</span> key; <span class=\"comment\">// 没找到就直接返回key</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">&quot;string&quot;</span>) <span class=\"keyword\">return</span> value; <span class=\"comment\">// 如果非string，直接返回，即ReactNode</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 正则循环替换</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (params) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(params).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 数组</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(params)) &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">String</span>(value).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">              <span class=\"string\">`&#123;<span class=\"subst\">$&#123;item&#125;</span>&#125;`</span>,</span><br><span class=\"line\">              <span class=\"title class_\">String</span>(params[<span class=\"title class_\">Number</span>(item)])</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">String</span>(value).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">              <span class=\"comment\">// eslint-disable-next-line security/detect-non-literal-regexp</span></span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;item&#125;</span>&#125;`</span>, <span class=\"string\">&quot;g&quot;</span>),</span><br><span class=\"line\">              <span class=\"title class_\">String</span>(params[<span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>`</span>])</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [router.<span class=\"property\">locale</span>]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">t</span>: jsonFun,</span><br><span class=\"line\">    <span class=\"attr\">isEn</span>: router.<span class=\"property\">locale</span> === <span class=\"string\">&quot;en&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isZh</span>: router.<span class=\"property\">locale</span> === <span class=\"string\">&quot;zh&quot;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useTranslation;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vscode-i18n-ally-插件配置\"><a href=\"#vscode-i18n-ally-插件配置\" class=\"headerlink\" title=\"vscode i18n-ally 插件配置\"></a>vscode i18n-ally 插件配置</h3><p><a href=\"https://github.com/lokalise/i18n-ally/wiki/Configurations\">https://github.com/lokalise/i18n-ally/wiki/Configurations</a></p>\n<h4 id=\"由于手写的-i18n-只支持-js-或者-ts-引入翻译内容所以需要配置\"><a href=\"#由于手写的-i18n-只支持-js-或者-ts-引入翻译内容所以需要配置\" class=\"headerlink\" title=\"由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置\"></a>由于手写的 i18n 只支持 js 或者 ts 引入翻译内容所以需要配置</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// other formats will be disabled regardless of the framework preference.</span></span><br><span class=\"line\"><span class=\"attr\">&quot;i18n-ally.enabledParsers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;pot&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/lokalise/i18n-ally/wiki/Locale-Formats\">https://github.com/lokalise/i18n-ally/wiki/Locale-Formats</a></p>\n<h4 id=\"最后翻译效果如图\"><a href=\"#最后翻译效果如图\" class=\"headerlink\" title=\"最后翻译效果如图\"></a>最后翻译效果如图</h4><p><img src=\"/img/i18n-ally.png\" alt=\"avatar\"></p>\n"},{"title":"react数据状态管理 和 reactSSR","cover":"/img/life-z.webp","_content":"\n### useReducer 配合 createContext\n\n```ts\n    // Provider.ts 父组件提供 state 以及改变 state的方法dispatch 给到 createContext(xxx).Provider value={xxx}  \n    import React,{ createContext , ReactNode, Dispatch ,useReducer} from \"react\";\n    const reducer = (state:typeof initialState,action:Action) => {\n        switch(action.type){\n            case 'first':\n                return {...state,first: action.payload.first};\n            case 'last':\n                return {...state,last : action.payload.last};\n            default:    \n                return state    \n        }\n    }\n    const initialState = {\n        first:'jack',\n        last:'Herrington',\n    }\n    interface InitVal {\n        first:string,\n        last:string,\n        dispatch:Dispatch<Action>\n    }\n    export const UserContext = createContext<InitVal>(initialState as InitVal);\n    export const UseContextComponent:React.FC<Props>  = ({chilren}) =>{\n        const [state,dispatch] = useReducer(reducer,initialState)\n        const initVal1 = {\n            ...state,\n            dispatch\n        }\n        return (<UserContext.Provider value={initVal1}>\n        {chilren}\n        </UserContext.Provider>)\n    }\n    // Comsuer.ts 子组件通过useContext 拿到父组件提供的方法绑定点击函数dispatch 触发数据更新 导出父组件包裹的高阶组件给外部使用 \n    import { UserContext ,  UseContextComponent } from \"./Provider\";\n    import React,{ useContext }from \"react\";\n    function ConsumerComponent(){\n    const { first,last, dispatch } = useContext(UserContext);\n        return (\n            <div>\n                First: {first}\n                Last: {last}\n                <br />\n                <button onClick={()=>{\n                    dispatch({type:'last',payload:{\n                        first:'Jane',\n                    last:'Smitch',}})\n                }}>change</button>\n            </div>\n        )\n    }\n    export const ConsumerWrap = ()=><UseContextComponent chilren={<><ConsumerComponent /></>}  ></UseContextComponent>\n```\n\n\n### redux react-redux redux-thunk的联合使用\n\n```ts\n    // store/index.ts\n    import { createStore , applyMiddleware}  from \"redux\";\n    import thunk from \"redux-thunk\"; // thunk中间件 支持actions可以写入异步的脏操作等\n    export const initVal = {\n        count:0\n    }\n    interface ActionObj {\n        type:\"ADD\" | \"REDUCE\",\n        payload:typeof initVal\n    }\n    interface ActionFunObj {\n        ADD:()=>typeof initVal,\n        REDUCE:()=>typeof initVal,\n    }\n    function reducer (state:typeof initVal = initVal,action:ActionObj) {\n        const actionFunObj:ActionFunObj = {\n            ADD:function(){\n                return { \n                    count:state.count + action.payload.count\n                }\n            },\n            REDUCE:function(){\n                return { \n                    count:state.count - action.payload.count\n                }\n            }\n        }\n        const type = action.type;\n        return actionFunObj[type] ? actionFunObj[type]() : {count:0};\n    }\n    const store = createStore(reducer,applyMiddleware(thunk));\n\n    export default store;\n\n    // store/actions/counter.ts\n    export const ADD = \"ADD\";\n    export const REDUCE = \"REDUCE\";\n    export const add = () => {return {type:ADD,payload:{count:3}}} \n    export const reduce = () => {return {type:REDUCE,payload:{count:3}}} \n\n    // store/actions/fetchData.ts\n    import { ADD } from \"./counter\";\n    import { Dispatch } from \"redux\";\n    import { initVal } from \"../index\";\n    export function fetchData (){\n        return (dispatch:Dispatch,getState:()=> typeof initVal) => {\n            fetch('https://www.fastmock.site/mock/ee2eb713c094e4a631c1eec3ee9b3386/jiong/api/ssr')\n            .then(res => res.json())\n            .then(res => dispatch({type:ADD,payload:{count:res.data.count}}))\n        }\n    }\n\n    // App.tsx\n    import React from \"react\";\n    import \"./App.css\";\n    import store from \"./store/index\";\n    import { UseStateWrap } from \"./components/useState\";\n    import { Provider } from \"react-redux\";\n\n    function App() {\n    return (\n        <Provider store={store}>\n        <div className=\"App\">\n            <header className=\"App-header\" >\n            <UseStateWrap />\n            </header>\n        </div>\n        </Provider>\n    );\n    }\n    export default App;\n\n    // useState.tsx  useSelector useDispatch 以hooks的方式显示与改变状态数据\n    import { connect, useSelector, useDispatch} from \"react-redux\"; \n    import { add,reduce , ADD ,REDUCE} from \"../store/actions/counter\";\n    import { fetchData } from \"../store/actions/fetachData\";\n    import { initVal } from \"../store\";\n    function mapStateToProps(state:{count:number}){\n        return {\n            count:state.count\n        }\n    }\n    const mapDispatchToProps = {\n        add,\n        reduce,\n        fetchData\n    }\n    function UseState(props:{\n        count:number,\n        add:typeof add,\n        reduce:typeof reduce,\n        fetchData:() => void\n    }){\n        const dispatch = useDispatch();\n        return <>\n            <h3>redux</h3>\n            count:{props.count}\n            <br />\n            useSelector:{useSelector((state)=>{\n                return (state as typeof initVal).count\n            })}\n            <br />\n            <button onClick={()=>{props.add()}}>加</button>\n            <button onClick={()=>{props.reduce()}}>减</button>\n            <button onClick={()=>{props.fetchData()}}>fetchData</button>\n            <button onClick={()=>{dispatch({type:ADD,payload:{count:1}})}}>useDispatch加</button>\n            <button onClick={()=>{dispatch({type:REDUCE,payload:{count:1}})}}>useDispatch减</button>\n        </>\n    }\n    export const  UseStateWrap = connect(mapStateToProps,mapDispatchToProps)(UseState)\n```\n\n### recoil 原子级数据状态管理库\n\n```ts\n    // recoilState.tsx  selector相当于vue的computed是对atom的default的扩展\n    import { atom,useRecoilState ,useRecoilValue ,selector} from \"recoil\";\n    const counter = atom({\n        key:'counter',\n        default:''\n    })\n    const counterLength = selector({   \n        key: 'counterLength', // unique ID (with respect to other atoms/selectors)\n        get: ({get}) => {\n        const count = get(counter);\n        return count.length;\n        },\n    });\n    export function RecoilState (){\n        const [count,setCount] = useRecoilState(counter);\n        const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n            setCount(e.target.value)\n        }\n\n        return <>\n            <input type=\"text\" value={count} onChange={onChange} />\n            <br />\n            RecoilState: {count}\n            <br />\n            useRecoilValue:{useRecoilValue(counterLength)}\n        </>\n    }\n    // App.tsx\n    import React from \"react\";\n    import \"./App.css\";\n    import { RecoilRoot } from 'recoil';\n    import { RecoilState } from \"./components/recoilState\";\n\n    function App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\" >\n            <RecoilRoot>\n                <RecoilState />\n            </RecoilRoot>\n            </header>\n        </div>\n    );\n    }\n    export default App;\n```\n\n### reactSSR\n\n#### webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\n- 注意点\n  - 1.服务配置target:node library:{type:commonjs2} 打成可供node端使用的commomjs规范的包 \n  - 2.避免状态store的状态单例子每次导出需要导出一个函数返回所需的对象。\n\n\n``` js \n    // webpack配置 \n    // webpack.base.js\n    const { resolve } = require('path');\n    const TerserPlugin = require('terser-webpack-plugin');\n    module.exports = {\n        output:{\n            path:resolve(__dirname,\"../../server/web\")\n        },\n        cache:{\n            type:'filesystem'\n        },\n        module:{\n            rules:[\n                {\n                    test:/\\.tsx?$/,\n                    exclude:/node_modules/,\n                    use:{\n                        loader:'swc-loader',\n                    }\n                },\n            ]\n        },\n        resolve:{\n            extensions:['.js','.jsx','.ts','.tsx']\n        },\n        optimization:{\n            minimize:true,\n            minimizer:[new TerserPlugin()]\n        }\n    }\n\n    // webpack.client.js\n    const { resolve,join } = require(\"path\");\n    const { merge } = require('webpack-merge');\n    const HtmlWebpackPlugin = require('html-webpack-plugin');\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n    const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n    // const { CleanWebpackPlugin } = require('clean-webpack-plugin'); 不开启我有用的文件都没了\n    // const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin; \n    const baseConfig = require('./webpack.base');\n    const clientConfig = {\n        mode:'production',\n        entry:resolve(__dirname,'../entry.client.tsx'),\n        output:{\n            filename:'js/[chunkhash].js',\n            assetModuleFilename: 'images/[hash:5][ext]'\n        },\n        devServer:{\n            contentBase:resolve(__dirname,\"../../server/web\"),\n            port:8088,\n            historyApiFallback:true,\n            quiet:true\n        },\n        module:{\n            rules:[\n                {\n                    test:/\\.css$/,\n                    use:[MiniCssExtractPlugin.loader,\"css-loader\"]\n                },\n                {\n                    test:/\\.(png|jpg|jpeg|gif|webp)$/i,\n                    type:\"asset\",\n                    // generator: {\n                    //     filename: 'img/[chunkhash][ext]'\n                    // }\n                }\n            ]\n        },\n        plugins:[\n            new HtmlWebpackPlugin({\n                template:resolve(__dirname,\"../public/template.html\"),\n                favicon:resolve(__dirname,\"../public/favicon.ico\")\n            }),\n            new MiniCssExtractPlugin({\n                filename:'css/[chunkhash].css'\n            }),\n            // new PrerenderSPAPlugin({\n            //     staticDir: join(__dirname, \"../../server/web\"),\n            //     routes: [ '/' ],\n            //     renderer: new Renderer({\n            //         headless: false,\n            //         renderAfterDocumentEvent: 'render-event',\n            //     })\n            //   }),\n            // new BundleAnalyzerPlugin(),\n        ],\n        // externals:{\n        //     'react-syntax-highlighter':'SyntaxHighlighter',\n        // },\n        optimization:{\n            minimizer:[\n                new CssMinimizerPlugin()\n            ],\n            // runtimeChunk:{\n            //     name:'runtime'\n            // },\n            splitChunks:{\n                chunks:'all',\n                maxInitialRequests:3,\n                maxAsyncRequests:5,\n                minChunks:3,\n                minSize:{\n                    javascript:30 * 1024,\n                    style:30 * 1024\n                },\n                maxSize:{\n                    javascript:110 * 1024,\n                    style:110 * 1024\n                },\n                cacheGroups:{\n                    common:{\n                        chunks:'all',\n                        name:'common',\n                        priority:-20,\n                        enforce:true,\n                        reuseExistingChunk:true\n                    }\n                }\n            }\n        }\n    }\n    module.exports = merge(baseConfig,clientConfig)\n\n    // webpack.server.js\n    const { resolve } = require(\"path\");\n    const nodeExternals = require(\"webpack-node-externals\");\n    const { merge } = require(\"webpack-merge\");\n    const baseConfig = require(\"./webpack.base\");\n    const serverConfig = {\n        mode:\"production\",\n        entry:resolve(__dirname,\"../entry.server.tsx\"),\n        output:{\n            filename:\"server.bundle.js\",\n            assetModuleFilename: 'images/[hash:5][ext]',\n            library: {\n                type: 'commonjs2',\n            },\n        },\n        module:{\n            rules:[{\n                test:/\\.css$/,\n                use:'ignore-loader'\n            },\n            {\n                test:/\\.(png|jpg|jpeg|gif|webp)$/i,\n                type:\"asset\",\n            }\n        ]\n        },\n        target:\"node\",\n        externals:nodeExternals()\n    }\n    module.exports = merge(baseConfig,serverConfig)\n```\n- 客户端和服务端打包的入口文件\n  - 可以看到服务端打包导出的是一个函数参数是koa框架提供的上下文ctx 在node端拿到真实的路由之后匹配前端的路由生成对应页面的模版替换 <div id=\"app\"></div> \n  - 拿到routes里面的每个对象，如果有loadData方法的则执行它拿到结果，再把结果挂载到ctx对象上服务端再将数据挂载到window对象上，然后在初始化store时赋值上\n  - 数据预获取是为了避免客户端拿到js再去请求服务端的数据，这样子链路过长，消耗时间。\n\n```ts\n    // entry-client.jsx\n    import React from \"react\";\n    import ReactDom from \"react-dom\";\n    import App from \"./pages/app\";\n    import { RecoilRoot } from \"recoil\";\n    ReactDom.render(\n        <RecoilRoot>\n            <App />\n        </RecoilRoot>,\n        document.getElementById(\"app\")\n    )\n\n    // entry-server.jsx 导出函数接受ctx 数据需要预先加载的函数执行\n    import React from \"react\";\n    import { Routes,routes } from \"./router/index\";\n    import { StaticRouter } from \"react-router-dom\";\n    import { RecoilRoot } from \"recoil\";\n    import { IRouterContext } from \"koa-router\"\n    export default (ctx:IRouterContext) => {\n        return new Promise((resolve) => {\n            const promises = [];\n            routes.some((route) => {\n                if(route.path === ctx.request.path && route.loadData){\n                    promises.push(route.loadData())\n                }\n            })\n            Promise.all(promises).then((res:any) => {\n                (res[0]) && ((ctx as unknown as any).window = res[0].data.data);\n                resolve(\n                    <RecoilRoot>\n                        <StaticRouter location={ctx.request.url}>{Routes()}</StaticRouter>\n                    </RecoilRoot>\n                )\n            })\n        })\n    }\n    // router/index.tsx 常规路由 如果需要预获取的数据函数可以写在这里\n    import React from \"react\";\n    import { Switch, Route } from \"react-router-dom\";\n    import Blog from \"../pages/Blog\"; \n    import Tool from \"../pages/Tool\";\n    import { getData } from \"../pages/Tool\";\n    export const routes = [\n        {\n            path:'/',\n            exact:true,\n            component:Blog\n        },\n        {\n            path:'/tool',\n            exact:true,\n            component:Tool,\n            loadData:getData\n        }\n    ]\n    export const Routes = () => (\n        <Switch>\n        {\n            routes.map((r,index) => {\n                const { path, component, exact } = r;\n                return (\n                    <Route path={path} exact={exact} component={component} key={index} />\n                )\n            })\n        }\n        </Switch>\n    )\n\n    // ssrService.ts  这里主要是做模板替换 数据注入\n    import { provide } from \"inversify-binding-decorators\";\n    import TAGS from \"../constant/tag\";\n    import fs from \"fs\";\n    import { resolve } from \"path\";\n    import { renderToString } from \"react-dom/server\";\n    import { IRouterContext } from \"koa-router\";\n    import { SSR } from \"../interface/ssr\";\n    const template = fs.readFileSync(resolve(__dirname,\"../web/index.html\"),'utf-8');\n    const handleTemplate = (template:string) => {\n        return (props:{html:string,store:string}) => (\n            template.replace('<div id=\"app\"></div>',`<div id=\"app\">${props.html}</div>${props.store}`)\n        )\n    }\n    const serverBundle = require('../web/server.bundle.js').default;\n    @provide(TAGS.SsrService)\n    export class SsrService implements SSR{\n        async handleSsr(ctx:IRouterContext){\n            const render = handleTemplate(template);\n            const jsx = await serverBundle(ctx);\n            const html = await renderToString(jsx);\n            return render({\n                html,\n                store:`<script> window.REDUX_STATE = ${JSON.stringify((ctx as unknown as any).window)}</script>`\n            })\n        }\n    }\n```\n\n\n### 开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间\n\n```ts\n    import { provideThrowable } from \"../ioc\";\n    import { controller, httpGet, interfaces, TYPE } from \"inversify-koa-utils\";\n    import { IRouterContext } from \"koa-router\";\n    import { SSR } from \"../interface/ssr\";\n    import TAGS from \"../constant/tag\";\n    import { inject } from \"inversify\";\n    import { Readable } from \"stream\";     \n    import { createGzip } from \"zlib\";\n    @provideThrowable(TYPE.Controller,\"SsrController\")\n    @controller(\"/\")\n    class SsrController implements interfaces.Controller{\n        private ssrService:SSR = null!\n        constructor(@inject(TAGS.SsrService) ssrService:SSR){\n            this.ssrService = ssrService\n        } \n        @httpGet(\"/\")\n        private async index(ctx:IRouterContext,next:()=> Promise<unknown>):Promise<void>{\n        const res =  await this.ssrService.handleSsr(ctx);\n        function createSsrStreamPromise(){\n                return new Promise((resolve,reject)=>{\n                    const htmlStream = new Readable(); // 让字符串变为stream\n                    ctx.status = 200;\n                    ctx.res.setHeader('content-encoding','gzip');\n                    const gz = createGzip();           // 开启gzip压缩 \n                    htmlStream.push(res);\n                    htmlStream.push(null);\n                    htmlStream.on('error',(err)=>{\n                        console.log(err)\n                    })\n                    .pipe(gz)\n                    .pipe(ctx.res)\n                })\n        } \n        await createSsrStreamPromise()\n        }\n    }\n    export default SsrController\n```\n","source":"_posts/react.md","raw":"---\ntitle: react数据状态管理 和 reactSSR\ncover: /img/life-z.webp\n---\n\n### useReducer 配合 createContext\n\n```ts\n    // Provider.ts 父组件提供 state 以及改变 state的方法dispatch 给到 createContext(xxx).Provider value={xxx}  \n    import React,{ createContext , ReactNode, Dispatch ,useReducer} from \"react\";\n    const reducer = (state:typeof initialState,action:Action) => {\n        switch(action.type){\n            case 'first':\n                return {...state,first: action.payload.first};\n            case 'last':\n                return {...state,last : action.payload.last};\n            default:    \n                return state    \n        }\n    }\n    const initialState = {\n        first:'jack',\n        last:'Herrington',\n    }\n    interface InitVal {\n        first:string,\n        last:string,\n        dispatch:Dispatch<Action>\n    }\n    export const UserContext = createContext<InitVal>(initialState as InitVal);\n    export const UseContextComponent:React.FC<Props>  = ({chilren}) =>{\n        const [state,dispatch] = useReducer(reducer,initialState)\n        const initVal1 = {\n            ...state,\n            dispatch\n        }\n        return (<UserContext.Provider value={initVal1}>\n        {chilren}\n        </UserContext.Provider>)\n    }\n    // Comsuer.ts 子组件通过useContext 拿到父组件提供的方法绑定点击函数dispatch 触发数据更新 导出父组件包裹的高阶组件给外部使用 \n    import { UserContext ,  UseContextComponent } from \"./Provider\";\n    import React,{ useContext }from \"react\";\n    function ConsumerComponent(){\n    const { first,last, dispatch } = useContext(UserContext);\n        return (\n            <div>\n                First: {first}\n                Last: {last}\n                <br />\n                <button onClick={()=>{\n                    dispatch({type:'last',payload:{\n                        first:'Jane',\n                    last:'Smitch',}})\n                }}>change</button>\n            </div>\n        )\n    }\n    export const ConsumerWrap = ()=><UseContextComponent chilren={<><ConsumerComponent /></>}  ></UseContextComponent>\n```\n\n\n### redux react-redux redux-thunk的联合使用\n\n```ts\n    // store/index.ts\n    import { createStore , applyMiddleware}  from \"redux\";\n    import thunk from \"redux-thunk\"; // thunk中间件 支持actions可以写入异步的脏操作等\n    export const initVal = {\n        count:0\n    }\n    interface ActionObj {\n        type:\"ADD\" | \"REDUCE\",\n        payload:typeof initVal\n    }\n    interface ActionFunObj {\n        ADD:()=>typeof initVal,\n        REDUCE:()=>typeof initVal,\n    }\n    function reducer (state:typeof initVal = initVal,action:ActionObj) {\n        const actionFunObj:ActionFunObj = {\n            ADD:function(){\n                return { \n                    count:state.count + action.payload.count\n                }\n            },\n            REDUCE:function(){\n                return { \n                    count:state.count - action.payload.count\n                }\n            }\n        }\n        const type = action.type;\n        return actionFunObj[type] ? actionFunObj[type]() : {count:0};\n    }\n    const store = createStore(reducer,applyMiddleware(thunk));\n\n    export default store;\n\n    // store/actions/counter.ts\n    export const ADD = \"ADD\";\n    export const REDUCE = \"REDUCE\";\n    export const add = () => {return {type:ADD,payload:{count:3}}} \n    export const reduce = () => {return {type:REDUCE,payload:{count:3}}} \n\n    // store/actions/fetchData.ts\n    import { ADD } from \"./counter\";\n    import { Dispatch } from \"redux\";\n    import { initVal } from \"../index\";\n    export function fetchData (){\n        return (dispatch:Dispatch,getState:()=> typeof initVal) => {\n            fetch('https://www.fastmock.site/mock/ee2eb713c094e4a631c1eec3ee9b3386/jiong/api/ssr')\n            .then(res => res.json())\n            .then(res => dispatch({type:ADD,payload:{count:res.data.count}}))\n        }\n    }\n\n    // App.tsx\n    import React from \"react\";\n    import \"./App.css\";\n    import store from \"./store/index\";\n    import { UseStateWrap } from \"./components/useState\";\n    import { Provider } from \"react-redux\";\n\n    function App() {\n    return (\n        <Provider store={store}>\n        <div className=\"App\">\n            <header className=\"App-header\" >\n            <UseStateWrap />\n            </header>\n        </div>\n        </Provider>\n    );\n    }\n    export default App;\n\n    // useState.tsx  useSelector useDispatch 以hooks的方式显示与改变状态数据\n    import { connect, useSelector, useDispatch} from \"react-redux\"; \n    import { add,reduce , ADD ,REDUCE} from \"../store/actions/counter\";\n    import { fetchData } from \"../store/actions/fetachData\";\n    import { initVal } from \"../store\";\n    function mapStateToProps(state:{count:number}){\n        return {\n            count:state.count\n        }\n    }\n    const mapDispatchToProps = {\n        add,\n        reduce,\n        fetchData\n    }\n    function UseState(props:{\n        count:number,\n        add:typeof add,\n        reduce:typeof reduce,\n        fetchData:() => void\n    }){\n        const dispatch = useDispatch();\n        return <>\n            <h3>redux</h3>\n            count:{props.count}\n            <br />\n            useSelector:{useSelector((state)=>{\n                return (state as typeof initVal).count\n            })}\n            <br />\n            <button onClick={()=>{props.add()}}>加</button>\n            <button onClick={()=>{props.reduce()}}>减</button>\n            <button onClick={()=>{props.fetchData()}}>fetchData</button>\n            <button onClick={()=>{dispatch({type:ADD,payload:{count:1}})}}>useDispatch加</button>\n            <button onClick={()=>{dispatch({type:REDUCE,payload:{count:1}})}}>useDispatch减</button>\n        </>\n    }\n    export const  UseStateWrap = connect(mapStateToProps,mapDispatchToProps)(UseState)\n```\n\n### recoil 原子级数据状态管理库\n\n```ts\n    // recoilState.tsx  selector相当于vue的computed是对atom的default的扩展\n    import { atom,useRecoilState ,useRecoilValue ,selector} from \"recoil\";\n    const counter = atom({\n        key:'counter',\n        default:''\n    })\n    const counterLength = selector({   \n        key: 'counterLength', // unique ID (with respect to other atoms/selectors)\n        get: ({get}) => {\n        const count = get(counter);\n        return count.length;\n        },\n    });\n    export function RecoilState (){\n        const [count,setCount] = useRecoilState(counter);\n        const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n            setCount(e.target.value)\n        }\n\n        return <>\n            <input type=\"text\" value={count} onChange={onChange} />\n            <br />\n            RecoilState: {count}\n            <br />\n            useRecoilValue:{useRecoilValue(counterLength)}\n        </>\n    }\n    // App.tsx\n    import React from \"react\";\n    import \"./App.css\";\n    import { RecoilRoot } from 'recoil';\n    import { RecoilState } from \"./components/recoilState\";\n\n    function App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\" >\n            <RecoilRoot>\n                <RecoilState />\n            </RecoilRoot>\n            </header>\n        </div>\n    );\n    }\n    export default App;\n```\n\n### reactSSR\n\n#### webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\n- 注意点\n  - 1.服务配置target:node library:{type:commonjs2} 打成可供node端使用的commomjs规范的包 \n  - 2.避免状态store的状态单例子每次导出需要导出一个函数返回所需的对象。\n\n\n``` js \n    // webpack配置 \n    // webpack.base.js\n    const { resolve } = require('path');\n    const TerserPlugin = require('terser-webpack-plugin');\n    module.exports = {\n        output:{\n            path:resolve(__dirname,\"../../server/web\")\n        },\n        cache:{\n            type:'filesystem'\n        },\n        module:{\n            rules:[\n                {\n                    test:/\\.tsx?$/,\n                    exclude:/node_modules/,\n                    use:{\n                        loader:'swc-loader',\n                    }\n                },\n            ]\n        },\n        resolve:{\n            extensions:['.js','.jsx','.ts','.tsx']\n        },\n        optimization:{\n            minimize:true,\n            minimizer:[new TerserPlugin()]\n        }\n    }\n\n    // webpack.client.js\n    const { resolve,join } = require(\"path\");\n    const { merge } = require('webpack-merge');\n    const HtmlWebpackPlugin = require('html-webpack-plugin');\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n    const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n    // const { CleanWebpackPlugin } = require('clean-webpack-plugin'); 不开启我有用的文件都没了\n    // const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin; \n    const baseConfig = require('./webpack.base');\n    const clientConfig = {\n        mode:'production',\n        entry:resolve(__dirname,'../entry.client.tsx'),\n        output:{\n            filename:'js/[chunkhash].js',\n            assetModuleFilename: 'images/[hash:5][ext]'\n        },\n        devServer:{\n            contentBase:resolve(__dirname,\"../../server/web\"),\n            port:8088,\n            historyApiFallback:true,\n            quiet:true\n        },\n        module:{\n            rules:[\n                {\n                    test:/\\.css$/,\n                    use:[MiniCssExtractPlugin.loader,\"css-loader\"]\n                },\n                {\n                    test:/\\.(png|jpg|jpeg|gif|webp)$/i,\n                    type:\"asset\",\n                    // generator: {\n                    //     filename: 'img/[chunkhash][ext]'\n                    // }\n                }\n            ]\n        },\n        plugins:[\n            new HtmlWebpackPlugin({\n                template:resolve(__dirname,\"../public/template.html\"),\n                favicon:resolve(__dirname,\"../public/favicon.ico\")\n            }),\n            new MiniCssExtractPlugin({\n                filename:'css/[chunkhash].css'\n            }),\n            // new PrerenderSPAPlugin({\n            //     staticDir: join(__dirname, \"../../server/web\"),\n            //     routes: [ '/' ],\n            //     renderer: new Renderer({\n            //         headless: false,\n            //         renderAfterDocumentEvent: 'render-event',\n            //     })\n            //   }),\n            // new BundleAnalyzerPlugin(),\n        ],\n        // externals:{\n        //     'react-syntax-highlighter':'SyntaxHighlighter',\n        // },\n        optimization:{\n            minimizer:[\n                new CssMinimizerPlugin()\n            ],\n            // runtimeChunk:{\n            //     name:'runtime'\n            // },\n            splitChunks:{\n                chunks:'all',\n                maxInitialRequests:3,\n                maxAsyncRequests:5,\n                minChunks:3,\n                minSize:{\n                    javascript:30 * 1024,\n                    style:30 * 1024\n                },\n                maxSize:{\n                    javascript:110 * 1024,\n                    style:110 * 1024\n                },\n                cacheGroups:{\n                    common:{\n                        chunks:'all',\n                        name:'common',\n                        priority:-20,\n                        enforce:true,\n                        reuseExistingChunk:true\n                    }\n                }\n            }\n        }\n    }\n    module.exports = merge(baseConfig,clientConfig)\n\n    // webpack.server.js\n    const { resolve } = require(\"path\");\n    const nodeExternals = require(\"webpack-node-externals\");\n    const { merge } = require(\"webpack-merge\");\n    const baseConfig = require(\"./webpack.base\");\n    const serverConfig = {\n        mode:\"production\",\n        entry:resolve(__dirname,\"../entry.server.tsx\"),\n        output:{\n            filename:\"server.bundle.js\",\n            assetModuleFilename: 'images/[hash:5][ext]',\n            library: {\n                type: 'commonjs2',\n            },\n        },\n        module:{\n            rules:[{\n                test:/\\.css$/,\n                use:'ignore-loader'\n            },\n            {\n                test:/\\.(png|jpg|jpeg|gif|webp)$/i,\n                type:\"asset\",\n            }\n        ]\n        },\n        target:\"node\",\n        externals:nodeExternals()\n    }\n    module.exports = merge(baseConfig,serverConfig)\n```\n- 客户端和服务端打包的入口文件\n  - 可以看到服务端打包导出的是一个函数参数是koa框架提供的上下文ctx 在node端拿到真实的路由之后匹配前端的路由生成对应页面的模版替换 <div id=\"app\"></div> \n  - 拿到routes里面的每个对象，如果有loadData方法的则执行它拿到结果，再把结果挂载到ctx对象上服务端再将数据挂载到window对象上，然后在初始化store时赋值上\n  - 数据预获取是为了避免客户端拿到js再去请求服务端的数据，这样子链路过长，消耗时间。\n\n```ts\n    // entry-client.jsx\n    import React from \"react\";\n    import ReactDom from \"react-dom\";\n    import App from \"./pages/app\";\n    import { RecoilRoot } from \"recoil\";\n    ReactDom.render(\n        <RecoilRoot>\n            <App />\n        </RecoilRoot>,\n        document.getElementById(\"app\")\n    )\n\n    // entry-server.jsx 导出函数接受ctx 数据需要预先加载的函数执行\n    import React from \"react\";\n    import { Routes,routes } from \"./router/index\";\n    import { StaticRouter } from \"react-router-dom\";\n    import { RecoilRoot } from \"recoil\";\n    import { IRouterContext } from \"koa-router\"\n    export default (ctx:IRouterContext) => {\n        return new Promise((resolve) => {\n            const promises = [];\n            routes.some((route) => {\n                if(route.path === ctx.request.path && route.loadData){\n                    promises.push(route.loadData())\n                }\n            })\n            Promise.all(promises).then((res:any) => {\n                (res[0]) && ((ctx as unknown as any).window = res[0].data.data);\n                resolve(\n                    <RecoilRoot>\n                        <StaticRouter location={ctx.request.url}>{Routes()}</StaticRouter>\n                    </RecoilRoot>\n                )\n            })\n        })\n    }\n    // router/index.tsx 常规路由 如果需要预获取的数据函数可以写在这里\n    import React from \"react\";\n    import { Switch, Route } from \"react-router-dom\";\n    import Blog from \"../pages/Blog\"; \n    import Tool from \"../pages/Tool\";\n    import { getData } from \"../pages/Tool\";\n    export const routes = [\n        {\n            path:'/',\n            exact:true,\n            component:Blog\n        },\n        {\n            path:'/tool',\n            exact:true,\n            component:Tool,\n            loadData:getData\n        }\n    ]\n    export const Routes = () => (\n        <Switch>\n        {\n            routes.map((r,index) => {\n                const { path, component, exact } = r;\n                return (\n                    <Route path={path} exact={exact} component={component} key={index} />\n                )\n            })\n        }\n        </Switch>\n    )\n\n    // ssrService.ts  这里主要是做模板替换 数据注入\n    import { provide } from \"inversify-binding-decorators\";\n    import TAGS from \"../constant/tag\";\n    import fs from \"fs\";\n    import { resolve } from \"path\";\n    import { renderToString } from \"react-dom/server\";\n    import { IRouterContext } from \"koa-router\";\n    import { SSR } from \"../interface/ssr\";\n    const template = fs.readFileSync(resolve(__dirname,\"../web/index.html\"),'utf-8');\n    const handleTemplate = (template:string) => {\n        return (props:{html:string,store:string}) => (\n            template.replace('<div id=\"app\"></div>',`<div id=\"app\">${props.html}</div>${props.store}`)\n        )\n    }\n    const serverBundle = require('../web/server.bundle.js').default;\n    @provide(TAGS.SsrService)\n    export class SsrService implements SSR{\n        async handleSsr(ctx:IRouterContext){\n            const render = handleTemplate(template);\n            const jsx = await serverBundle(ctx);\n            const html = await renderToString(jsx);\n            return render({\n                html,\n                store:`<script> window.REDUX_STATE = ${JSON.stringify((ctx as unknown as any).window)}</script>`\n            })\n        }\n    }\n```\n\n\n### 开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间\n\n```ts\n    import { provideThrowable } from \"../ioc\";\n    import { controller, httpGet, interfaces, TYPE } from \"inversify-koa-utils\";\n    import { IRouterContext } from \"koa-router\";\n    import { SSR } from \"../interface/ssr\";\n    import TAGS from \"../constant/tag\";\n    import { inject } from \"inversify\";\n    import { Readable } from \"stream\";     \n    import { createGzip } from \"zlib\";\n    @provideThrowable(TYPE.Controller,\"SsrController\")\n    @controller(\"/\")\n    class SsrController implements interfaces.Controller{\n        private ssrService:SSR = null!\n        constructor(@inject(TAGS.SsrService) ssrService:SSR){\n            this.ssrService = ssrService\n        } \n        @httpGet(\"/\")\n        private async index(ctx:IRouterContext,next:()=> Promise<unknown>):Promise<void>{\n        const res =  await this.ssrService.handleSsr(ctx);\n        function createSsrStreamPromise(){\n                return new Promise((resolve,reject)=>{\n                    const htmlStream = new Readable(); // 让字符串变为stream\n                    ctx.status = 200;\n                    ctx.res.setHeader('content-encoding','gzip');\n                    const gz = createGzip();           // 开启gzip压缩 \n                    htmlStream.push(res);\n                    htmlStream.push(null);\n                    htmlStream.on('error',(err)=>{\n                        console.log(err)\n                    })\n                    .pipe(gz)\n                    .pipe(ctx.res)\n                })\n        } \n        await createSsrStreamPromise()\n        }\n    }\n    export default SsrController\n```\n","slug":"react","published":1,"date":"2021-08-05T14:22:47.028Z","updated":"2021-08-22T02:45:02.695Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40b000642u731aa5xzh","content":"<h3 id=\"useReducer-配合-createContext\"><a href=\"#useReducer-配合-createContext\" class=\"headerlink\" title=\"useReducer 配合 createContext\"></a>useReducer 配合 createContext</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Provider.ts 父组件提供 state 以及改变 state的方法dispatch 给到 createContext(xxx).Provider value=&#123;xxx&#125;  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>,&#123; createContext , <span class=\"title class_\">ReactNode</span>, <span class=\"title class_\">Dispatch</span> ,useReducer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state:<span class=\"keyword\">typeof</span> initialState,action:Action</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;first&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;...state,<span class=\"attr\">first</span>: action.<span class=\"property\">payload</span>.<span class=\"property\">first</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;last&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;...state,last : action.<span class=\"property\">payload</span>.<span class=\"property\">last</span>&#125;;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> state    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">    <span class=\"attr\">first</span>:<span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>:<span class=\"string\">&#x27;Herrington&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InitVal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">first</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">dispatch</span>:<span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">Action</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = createContext&lt;<span class=\"title class_\">InitVal</span>&gt;(initialState <span class=\"keyword\">as</span> <span class=\"title class_\">InitVal</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UseContextComponent</span>:<span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">Props</span>&gt;  = <span class=\"function\">(<span class=\"params\">&#123;chilren&#125;</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state,dispatch] = <span class=\"title function_\">useReducer</span>(reducer,initialState)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initVal1 = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;initVal1&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;chilren&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Comsuer.ts 子组件通过useContext 拿到父组件提供的方法绑定点击函数dispatch 触发数据更新 导出父组件包裹的高阶组件给外部使用 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserContext</span> ,  <span class=\"title class_\">UseContextComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Provider&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>,&#123; useContext &#125;<span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ConsumerComponent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; first,last, dispatch &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            First: &#123;first&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            Last: &#123;last&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                dispatch(&#123;type:&#x27;last&#x27;,payload:&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    first:&#x27;Jane&#x27;,</span></span><br><span class=\"line\"><span class=\"language-xml\">                last:&#x27;Smitch&#x27;,&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;&#125;&gt;change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">ConsumerWrap</span> = (<span class=\"params\"></span>)=&gt;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UseContextComponent</span> <span class=\"attr\">chilren</span>=<span class=\"string\">&#123;</span>&lt;&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ConsumerComponent</span> /&gt;</span><span class=\"tag\">&lt;/&gt;</span></span>&#125;  &gt;&lt;/<span class=\"title class_\">UseContextComponent</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"redux-react-redux-redux-thunk的联合使用\"><a href=\"#redux-react-redux-redux-thunk的联合使用\" class=\"headerlink\" title=\"redux react-redux redux-thunk的联合使用\"></a>redux react-redux redux-thunk的联合使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore , applyMiddleware&#125;  <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux-thunk&quot;</span>; <span class=\"comment\">// thunk中间件 支持actions可以写入异步的脏操作等</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> initVal = &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ActionObj</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&quot;ADD&quot;</span> | <span class=\"string\">&quot;REDUCE&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>:<span class=\"keyword\">typeof</span> initVal</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ActionFunObj</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">ADD</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">typeof</span> initVal,</span><br><span class=\"line\">    <span class=\"attr\">REDUCE</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">typeof</span> initVal,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span> (<span class=\"attr\">state</span>:<span class=\"keyword\">typeof</span> initVal = initVal,<span class=\"attr\">action</span>:<span class=\"title class_\">ActionObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">actionFunObj</span>:<span class=\"title class_\">ActionFunObj</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">ADD</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> + action.<span class=\"property\">payload</span>.<span class=\"property\">count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">REDUCE</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> - action.<span class=\"property\">payload</span>.<span class=\"property\">count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = action.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actionFunObj[<span class=\"keyword\">type</span>] ? actionFunObj[<span class=\"keyword\">type</span>]() : &#123;<span class=\"attr\">count</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,<span class=\"title function_\">applyMiddleware</span>(thunk));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store/actions/counter.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&quot;ADD&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDUCE</span> = <span class=\"string\">&quot;REDUCE&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\"></span>) =&gt; &#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">ADD</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:<span class=\"number\">3</span>&#125;&#125;&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">reduce</span> = (<span class=\"params\"></span>) =&gt; &#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">REDUCE</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:<span class=\"number\">3</span>&#125;&#125;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store/actions/fetchData.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">ADD</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./counter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Dispatch</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initVal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch:Dispatch,getState:()=&gt; <span class=\"keyword\">typeof</span> initVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.fastmock.site/mock/ee2eb713c094e4a631c1eec3ee9b3386/jiong/api/ssr&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">ADD</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:res.<span class=\"property\">data</span>.<span class=\"property\">count</span>&#125;&#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// App.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UseStateWrap</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/useState&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UseStateWrap</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// useState.tsx  useSelector useDispatch 以hooks的方式显示与改变状态数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect, useSelector, useDispatch&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add,reduce , <span class=\"variable constant_\">ADD</span> ,<span class=\"variable constant_\">REDUCE</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store/actions/counter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store/actions/fetachData&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initVal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state:&#123;count:<span class=\"built_in\">number</span>&#125;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>:state.<span class=\"property\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = &#123;</span><br><span class=\"line\">    add,</span><br><span class=\"line\">    reduce,</span><br><span class=\"line\">    fetchData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UseState</span>(<span class=\"params\">props:&#123;</span></span><br><span class=\"line\"><span class=\"params\">    count:<span class=\"built_in\">number</span>,</span></span><br><span class=\"line\"><span class=\"params\">    add:<span class=\"keyword\">typeof</span> add,</span></span><br><span class=\"line\"><span class=\"params\">    reduce:<span class=\"keyword\">typeof</span> reduce,</span></span><br><span class=\"line\"><span class=\"params\">    fetchData:() =&gt; <span class=\"built_in\">void</span></span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>redux<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        count:&#123;props.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        useSelector:&#123;useSelector((state)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (state as typeof initVal).count</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.add()&#125;&#125;&gt;加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.reduce()&#125;&#125;&gt;减<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.fetchData()&#125;&#125;&gt;fetchData<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:ADD,payload:&#123;count:1&#125;&#125;)&#125;&#125;&gt;useDispatch加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:REDUCE,payload:&#123;count:1&#125;&#125;)&#125;&#125;&gt;useDispatch减<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span>  <span class=\"title class_\">UseStateWrap</span> = <span class=\"title function_\">connect</span>(mapStateToProps,mapDispatchToProps)(<span class=\"title class_\">UseState</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"recoil-原子级数据状态管理库\"><a href=\"#recoil-原子级数据状态管理库\" class=\"headerlink\" title=\"recoil 原子级数据状态管理库\"></a>recoil 原子级数据状态管理库</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recoilState.tsx  selector相当于vue的computed是对atom的default的扩展</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; atom,useRecoilState ,useRecoilValue ,selector&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">atom</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>:<span class=\"string\">&#x27;counter&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">default</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> counterLength = <span class=\"title function_\">selector</span>(&#123;   </span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"string\">&#x27;counterLength&#x27;</span>, <span class=\"comment\">// unique ID (with respect to other atoms/selectors)</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">get</span>(counter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">RecoilState</span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count,setCount] = <span class=\"title function_\">useRecoilState</span>(counter);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onChange</span> = (<span class=\"params\">e:React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCount</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;onChange&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        RecoilState: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        useRecoilValue:&#123;useRecoilValue(counterLength)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilState</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/recoilState&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">RecoilState</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactSSR\"><a href=\"#reactSSR\" class=\"headerlink\" title=\"reactSSR\"></a>reactSSR</h3><h4 id=\"webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\"><a href=\"#webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\" class=\"headerlink\" title=\"webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\"></a>webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码</h4><ul>\n<li>注意点<ul>\n<li>1.服务配置target:node library:{type:commonjs2} 打成可供node端使用的commomjs规范的包 </li>\n<li>2.避免状态store的状态单例子每次导出需要导出一个函数返回所需的对象。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack配置 </span></span><br><span class=\"line\"><span class=\"comment\">// webpack.base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../../server/web&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">cache</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;filesystem&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>:<span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;swc-loader&#x27;</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>:[<span class=\"string\">&#x27;.js&#x27;</span>,<span class=\"string\">&#x27;.jsx&#x27;</span>,<span class=\"string\">&#x27;.ts&#x27;</span>,<span class=\"string\">&#x27;.tsx&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimize</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>:[<span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.client.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve,join &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;); 不开启我有用的文件都没了</span></span><br><span class=\"line\"><span class=\"comment\">// const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin; </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.base&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clientConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../entry.client.tsx&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;js/[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;images/[hash:5][ext]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../../server/web&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8088</span>,</span><br><span class=\"line\">        <span class=\"attr\">historyApiFallback</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">quiet</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,<span class=\"string\">&quot;css-loader&quot;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|jpeg|gif|webp)$/i</span>,</span><br><span class=\"line\">                <span class=\"attr\">type</span>:<span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">                <span class=\"comment\">// generator: &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     filename: &#x27;img/[chunkhash][ext]&#x27;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">            <span class=\"attr\">favicon</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../public/favicon.ico&quot;</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;css/[chunkhash].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// new PrerenderSPAPlugin(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     staticDir: join(__dirname, &quot;../../server/web&quot;),</span></span><br><span class=\"line\">        <span class=\"comment\">//     routes: [ &#x27;/&#x27; ],</span></span><br><span class=\"line\">        <span class=\"comment\">//     renderer: new Renderer(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         headless: false,</span></span><br><span class=\"line\">        <span class=\"comment\">//         renderAfterDocumentEvent: &#x27;render-event&#x27;,</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;),</span></span><br><span class=\"line\">        <span class=\"comment\">// new BundleAnalyzerPlugin(),</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// externals:&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#x27;react-syntax-highlighter&#x27;:&#x27;SyntaxHighlighter&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"attr\">optimization</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>:[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>()</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">// runtimeChunk:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     name:&#x27;runtime&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">        <span class=\"attr\">splitChunks</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">maxInitialRequests</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">maxAsyncRequests</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">minChunks</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">minSize</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">javascript</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">                <span class=\"attr\">style</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">javascript</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">                <span class=\"attr\">style</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">cacheGroups</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">common</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">priority</span>:-<span class=\"number\">20</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enforce</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">reuseExistingChunk</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(baseConfig,clientConfig)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeExternals = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-node-externals&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.base&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> serverConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../entry.server.tsx&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&quot;server.bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;images/[hash:5][ext]&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">library</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;commonjs2&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[&#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>:<span class=\"string\">&#x27;ignore-loader&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|jpeg|gif|webp)$/i</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>:<span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">target</span>:<span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">externals</span>:<span class=\"title function_\">nodeExternals</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(baseConfig,serverConfig)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>客户端和服务端打包的入口文件<ul>\n<li>可以看到服务端打包导出的是一个函数参数是koa框架提供的上下文ctx 在node端拿到真实的路由之后匹配前端的路由生成对应页面的模版替换 <div id=\"app\"></div> </li>\n<li>拿到routes里面的每个对象，如果有loadData方法的则执行它拿到结果，再把结果挂载到ctx对象上服务端再将数据挂载到window对象上，然后在初始化store时赋值上</li>\n<li>数据预获取是为了避免客户端拿到js再去请求服务端的数据，这样子链路过长，消耗时间。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry-client.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./pages/app&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry-server.jsx 导出函数接受ctx 数据需要预先加载的函数执行</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>,routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StaticRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (<span class=\"attr\">ctx</span>:<span class=\"title class_\">IRouterContext</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> promises = [];</span><br><span class=\"line\">        routes.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">route</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.<span class=\"property\">path</span> === ctx.<span class=\"property\">request</span>.<span class=\"property\">path</span> &amp;&amp; route.<span class=\"property\">loadData</span>)&#123;</span><br><span class=\"line\">                promises.<span class=\"title function_\">push</span>(route.<span class=\"title function_\">loadData</span>())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res:<span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            (res[<span class=\"number\">0</span>]) &amp;&amp; ((ctx <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">window</span> = res[<span class=\"number\">0</span>].<span class=\"property\">data</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">StaticRouter</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;ctx.request.url&#125;</span>&gt;</span>&#123;Routes()&#125;<span class=\"tag\">&lt;/<span class=\"name\">StaticRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// router/index.tsx 常规路由 如果需要预获取的数据函数可以写在这里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Switch</span>, <span class=\"title class_\">Route</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Blog</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Blog&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Tool</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Tool&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Tool&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exact</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Blog</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/tool&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exact</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Tool</span>,</span><br><span class=\"line\">        <span class=\"attr\">loadData</span>:getData</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Routes</span> = (<span class=\"params\"></span>) =&gt; (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        routes.map((r,index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            const &#123; path, component, exact &#125; = r;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#123;path&#125;</span> <span class=\"attr\">exact</span>=<span class=\"string\">&#123;exact&#125;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;component&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            )</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ssrService.ts  这里主要是做模板替换 数据注入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; provide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify-binding-decorators&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">TAGS</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constant/tag&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">SSR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../interface/ssr&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../web/index.html&quot;</span>),<span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleTemplate</span> = (<span class=\"params\">template:<span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">props:&#123;html:<span class=\"built_in\">string</span>,store:<span class=\"built_in\">string</span>&#125;</span>) =&gt;</span> (</span><br><span class=\"line\">        template.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#x27;</span>,<span class=\"string\">`&lt;div id=&quot;app&quot;&gt;<span class=\"subst\">$&#123;props.html&#125;</span>&lt;/div&gt;<span class=\"subst\">$&#123;props.store&#125;</span>`</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> serverBundle = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../web/server.bundle.js&#x27;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"meta\">@provide</span>(<span class=\"variable constant_\">TAGS</span>.<span class=\"property\">SsrService</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SsrService</span> <span class=\"keyword\">implements</span> <span class=\"variable constant_\">SSR</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">handleSsr</span>(<span class=\"params\">ctx:IRouterContext</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> render = <span class=\"title function_\">handleTemplate</span>(template);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> jsx = <span class=\"keyword\">await</span> <span class=\"title function_\">serverBundle</span>(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> <span class=\"title function_\">renderToString</span>(jsx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">render</span>(&#123;</span><br><span class=\"line\">            html,</span><br><span class=\"line\">            <span class=\"attr\">store</span>:<span class=\"string\">`&lt;script&gt; window.REDUX_STATE = <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify((ctx <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"variable language_\">window</span>)&#125;</span>&lt;/script&gt;`</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"开启bigpipe-让模板以流的形式输出以及开启gzip压缩减少白屏时间\"><a href=\"#开启bigpipe-让模板以流的形式输出以及开启gzip压缩减少白屏时间\" class=\"headerlink\" title=\"开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间\"></a>开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; provideThrowable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../ioc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; controller, httpGet, interfaces, <span class=\"variable constant_\">TYPE</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify-koa-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">SSR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../interface/ssr&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">TAGS</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constant/tag&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Readable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;stream&quot;</span>;     </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createGzip &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;zlib&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@provideThrowable</span>(<span class=\"variable constant_\">TYPE</span>.<span class=\"property\">Controller</span>,<span class=\"string\">&quot;SsrController&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">@controller</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SsrController</span> <span class=\"keyword\">implements</span> interfaces.<span class=\"property\">Controller</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">ssrService</span>:<span class=\"variable constant_\">SSR</span> = <span class=\"literal\">null</span>!</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@inject</span>(TAGS.SsrService) ssrService:SSR</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ssrService</span> = ssrService</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"meta\">@httpGet</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"title function_\">index</span>(<span class=\"attr\">ctx</span>:<span class=\"title class_\">IRouterContext</span>,<span class=\"attr\">next</span>:<span class=\"function\">()=&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">unknown</span>&gt;):<span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res =  <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ssrService</span>.<span class=\"title function_\">handleSsr</span>(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">createSsrStreamPromise</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> htmlStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Readable</span>(); <span class=\"comment\">// 让字符串变为stream</span></span><br><span class=\"line\">                ctx.<span class=\"property\">status</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">                ctx.<span class=\"property\">res</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;content-encoding&#x27;</span>,<span class=\"string\">&#x27;gzip&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> gz = <span class=\"title function_\">createGzip</span>();           <span class=\"comment\">// 开启gzip压缩 </span></span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">push</span>(res);</span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">push</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .<span class=\"title function_\">pipe</span>(gz)</span><br><span class=\"line\">                .<span class=\"title function_\">pipe</span>(ctx.<span class=\"property\">res</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">createSsrStreamPromise</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SsrController</span></span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"useReducer-配合-createContext\"><a href=\"#useReducer-配合-createContext\" class=\"headerlink\" title=\"useReducer 配合 createContext\"></a>useReducer 配合 createContext</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Provider.ts 父组件提供 state 以及改变 state的方法dispatch 给到 createContext(xxx).Provider value=&#123;xxx&#125;  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>,&#123; createContext , <span class=\"title class_\">ReactNode</span>, <span class=\"title class_\">Dispatch</span> ,useReducer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state:<span class=\"keyword\">typeof</span> initialState,action:Action</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;first&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;...state,<span class=\"attr\">first</span>: action.<span class=\"property\">payload</span>.<span class=\"property\">first</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;last&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;...state,last : action.<span class=\"property\">payload</span>.<span class=\"property\">last</span>&#125;;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> state    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">    <span class=\"attr\">first</span>:<span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>:<span class=\"string\">&#x27;Herrington&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InitVal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">first</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">last</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">dispatch</span>:<span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">Action</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = createContext&lt;<span class=\"title class_\">InitVal</span>&gt;(initialState <span class=\"keyword\">as</span> <span class=\"title class_\">InitVal</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UseContextComponent</span>:<span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">Props</span>&gt;  = <span class=\"function\">(<span class=\"params\">&#123;chilren&#125;</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [state,dispatch] = <span class=\"title function_\">useReducer</span>(reducer,initialState)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initVal1 = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;initVal1&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;chilren&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Comsuer.ts 子组件通过useContext 拿到父组件提供的方法绑定点击函数dispatch 触发数据更新 导出父组件包裹的高阶组件给外部使用 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserContext</span> ,  <span class=\"title class_\">UseContextComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Provider&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>,&#123; useContext &#125;<span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ConsumerComponent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; first,last, dispatch &#125; = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            First: &#123;first&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            Last: &#123;last&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                dispatch(&#123;type:&#x27;last&#x27;,payload:&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    first:&#x27;Jane&#x27;,</span></span><br><span class=\"line\"><span class=\"language-xml\">                last:&#x27;Smitch&#x27;,&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;&#125;&gt;change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">ConsumerWrap</span> = (<span class=\"params\"></span>)=&gt;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UseContextComponent</span> <span class=\"attr\">chilren</span>=<span class=\"string\">&#123;</span>&lt;&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ConsumerComponent</span> /&gt;</span><span class=\"tag\">&lt;/&gt;</span></span>&#125;  &gt;&lt;/<span class=\"title class_\">UseContextComponent</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"redux-react-redux-redux-thunk的联合使用\"><a href=\"#redux-react-redux-redux-thunk的联合使用\" class=\"headerlink\" title=\"redux react-redux redux-thunk的联合使用\"></a>redux react-redux redux-thunk的联合使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore , applyMiddleware&#125;  <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> thunk <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux-thunk&quot;</span>; <span class=\"comment\">// thunk中间件 支持actions可以写入异步的脏操作等</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> initVal = &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ActionObj</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&quot;ADD&quot;</span> | <span class=\"string\">&quot;REDUCE&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>:<span class=\"keyword\">typeof</span> initVal</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ActionFunObj</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">ADD</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">typeof</span> initVal,</span><br><span class=\"line\">    <span class=\"attr\">REDUCE</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">typeof</span> initVal,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span> (<span class=\"attr\">state</span>:<span class=\"keyword\">typeof</span> initVal = initVal,<span class=\"attr\">action</span>:<span class=\"title class_\">ActionObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">actionFunObj</span>:<span class=\"title class_\">ActionFunObj</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">ADD</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> + action.<span class=\"property\">payload</span>.<span class=\"property\">count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">REDUCE</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> - action.<span class=\"property\">payload</span>.<span class=\"property\">count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = action.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actionFunObj[<span class=\"keyword\">type</span>] ? actionFunObj[<span class=\"keyword\">type</span>]() : &#123;<span class=\"attr\">count</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,<span class=\"title function_\">applyMiddleware</span>(thunk));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store/actions/counter.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADD</span> = <span class=\"string\">&quot;ADD&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDUCE</span> = <span class=\"string\">&quot;REDUCE&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\"></span>) =&gt; &#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">ADD</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:<span class=\"number\">3</span>&#125;&#125;&#125; </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">reduce</span> = (<span class=\"params\"></span>) =&gt; &#123;<span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">REDUCE</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:<span class=\"number\">3</span>&#125;&#125;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store/actions/fetchData.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">ADD</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./counter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Dispatch</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initVal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch:Dispatch,getState:()=&gt; <span class=\"keyword\">typeof</span> initVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.fastmock.site/mock/ee2eb713c094e4a631c1eec3ee9b3386/jiong/api/ssr&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"variable constant_\">ADD</span>,<span class=\"attr\">payload</span>:&#123;<span class=\"attr\">count</span>:res.<span class=\"property\">data</span>.<span class=\"property\">count</span>&#125;&#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// App.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UseStateWrap</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/useState&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">UseStateWrap</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// useState.tsx  useSelector useDispatch 以hooks的方式显示与改变状态数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect, useSelector, useDispatch&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add,reduce , <span class=\"variable constant_\">ADD</span> ,<span class=\"variable constant_\">REDUCE</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store/actions/counter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store/actions/fetachData&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initVal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mapStateToProps</span>(<span class=\"params\">state:&#123;count:<span class=\"built_in\">number</span>&#125;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>:state.<span class=\"property\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = &#123;</span><br><span class=\"line\">    add,</span><br><span class=\"line\">    reduce,</span><br><span class=\"line\">    fetchData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UseState</span>(<span class=\"params\">props:&#123;</span></span><br><span class=\"line\"><span class=\"params\">    count:<span class=\"built_in\">number</span>,</span></span><br><span class=\"line\"><span class=\"params\">    add:<span class=\"keyword\">typeof</span> add,</span></span><br><span class=\"line\"><span class=\"params\">    reduce:<span class=\"keyword\">typeof</span> reduce,</span></span><br><span class=\"line\"><span class=\"params\">    fetchData:() =&gt; <span class=\"built_in\">void</span></span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">useDispatch</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>redux<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        count:&#123;props.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        useSelector:&#123;useSelector((state)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (state as typeof initVal).count</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.add()&#125;&#125;&gt;加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.reduce()&#125;&#125;&gt;减<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;props.fetchData()&#125;&#125;&gt;fetchData<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:ADD,payload:&#123;count:1&#125;&#125;)&#125;&#125;&gt;useDispatch加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:REDUCE,payload:&#123;count:1&#125;&#125;)&#125;&#125;&gt;useDispatch减<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span>  <span class=\"title class_\">UseStateWrap</span> = <span class=\"title function_\">connect</span>(mapStateToProps,mapDispatchToProps)(<span class=\"title class_\">UseState</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"recoil-原子级数据状态管理库\"><a href=\"#recoil-原子级数据状态管理库\" class=\"headerlink\" title=\"recoil 原子级数据状态管理库\"></a>recoil 原子级数据状态管理库</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recoilState.tsx  selector相当于vue的computed是对atom的default的扩展</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; atom,useRecoilState ,useRecoilValue ,selector&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"title function_\">atom</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>:<span class=\"string\">&#x27;counter&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">default</span>:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> counterLength = <span class=\"title function_\">selector</span>(&#123;   </span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"string\">&#x27;counterLength&#x27;</span>, <span class=\"comment\">// unique ID (with respect to other atoms/selectors)</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">&#123;get&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">get</span>(counter);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">RecoilState</span> ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count,setCount] = <span class=\"title function_\">useRecoilState</span>(counter);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onChange</span> = (<span class=\"params\">e:React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCount</span>(e.<span class=\"property\">target</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;count&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;onChange&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        RecoilState: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        useRecoilValue:&#123;useRecoilValue(counterLength)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;recoil&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilState</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/recoilState&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">RecoilState</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactSSR\"><a href=\"#reactSSR\" class=\"headerlink\" title=\"reactSSR\"></a>reactSSR</h3><h4 id=\"webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\"><a href=\"#webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\" class=\"headerlink\" title=\"webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码\"></a>webpack打包两份不同代码一份我们平常开发客户端代码一份不用处理css的供服务端执行的代码</h4><ul>\n<li>注意点<ul>\n<li>1.服务配置target:node library:{type:commonjs2} 打成可供node端使用的commomjs规范的包 </li>\n<li>2.避免状态store的状态单例子每次导出需要导出一个函数返回所需的对象。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack配置 </span></span><br><span class=\"line\"><span class=\"comment\">// webpack.base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../../server/web&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">cache</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;filesystem&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>:<span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;swc-loader&#x27;</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>:[<span class=\"string\">&#x27;.js&#x27;</span>,<span class=\"string\">&#x27;.jsx&#x27;</span>,<span class=\"string\">&#x27;.ts&#x27;</span>,<span class=\"string\">&#x27;.tsx&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimize</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>:[<span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.client.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve,join &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-merge&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;css-minimizer-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;); 不开启我有用的文件都没了</span></span><br><span class=\"line\"><span class=\"comment\">// const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin; </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./webpack.base&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> clientConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;../entry.client.tsx&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;js/[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;images/[hash:5][ext]&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">contentBase</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../../server/web&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">port</span>:<span class=\"number\">8088</span>,</span><br><span class=\"line\">        <span class=\"attr\">historyApiFallback</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">quiet</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[<span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,<span class=\"string\">&quot;css-loader&quot;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|jpeg|gif|webp)$/i</span>,</span><br><span class=\"line\">                <span class=\"attr\">type</span>:<span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">                <span class=\"comment\">// generator: &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     filename: &#x27;img/[chunkhash][ext]&#x27;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../public/template.html&quot;</span>),</span><br><span class=\"line\">            <span class=\"attr\">favicon</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../public/favicon.ico&quot;</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;css/[chunkhash].css&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"comment\">// new PrerenderSPAPlugin(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     staticDir: join(__dirname, &quot;../../server/web&quot;),</span></span><br><span class=\"line\">        <span class=\"comment\">//     routes: [ &#x27;/&#x27; ],</span></span><br><span class=\"line\">        <span class=\"comment\">//     renderer: new Renderer(&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         headless: false,</span></span><br><span class=\"line\">        <span class=\"comment\">//         renderAfterDocumentEvent: &#x27;render-event&#x27;,</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">//   &#125;),</span></span><br><span class=\"line\">        <span class=\"comment\">// new BundleAnalyzerPlugin(),</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// externals:&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#x27;react-syntax-highlighter&#x27;:&#x27;SyntaxHighlighter&#x27;,</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"attr\">optimization</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>:[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>()</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">// runtimeChunk:&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     name:&#x27;runtime&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">        <span class=\"attr\">splitChunks</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">maxInitialRequests</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">maxAsyncRequests</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">minChunks</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">minSize</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">javascript</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">                <span class=\"attr\">style</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">javascript</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">                <span class=\"attr\">style</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">cacheGroups</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">common</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">priority</span>:-<span class=\"number\">20</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enforce</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">reuseExistingChunk</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(baseConfig,clientConfig)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodeExternals = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-node-externals&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.base&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> serverConfig = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../entry.server.tsx&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&quot;server.bundle.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&#x27;images/[hash:5][ext]&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">library</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;commonjs2&#x27;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[&#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>:<span class=\"string\">&#x27;ignore-loader&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|jpeg|gif|webp)$/i</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>:<span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">target</span>:<span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">externals</span>:<span class=\"title function_\">nodeExternals</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(baseConfig,serverConfig)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>客户端和服务端打包的入口文件<ul>\n<li>可以看到服务端打包导出的是一个函数参数是koa框架提供的上下文ctx 在node端拿到真实的路由之后匹配前端的路由生成对应页面的模版替换 <div id=\"app\"></div> </li>\n<li>拿到routes里面的每个对象，如果有loadData方法的则执行它拿到结果，再把结果挂载到ctx对象上服务端再将数据挂载到window对象上，然后在初始化store时赋值上</li>\n<li>数据预获取是为了避免客户端拿到js再去请求服务端的数据，这样子链路过长，消耗时间。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entry-client.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDom</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./pages/app&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span>,</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry-server.jsx 导出函数接受ctx 数据需要预先加载的函数执行</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>,routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">StaticRouter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RecoilRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;recoil&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (<span class=\"attr\">ctx</span>:<span class=\"title class_\">IRouterContext</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> promises = [];</span><br><span class=\"line\">        routes.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">route</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(route.<span class=\"property\">path</span> === ctx.<span class=\"property\">request</span>.<span class=\"property\">path</span> &amp;&amp; route.<span class=\"property\">loadData</span>)&#123;</span><br><span class=\"line\">                promises.<span class=\"title function_\">push</span>(route.<span class=\"title function_\">loadData</span>())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res:<span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            (res[<span class=\"number\">0</span>]) &amp;&amp; ((ctx <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">window</span> = res[<span class=\"number\">0</span>].<span class=\"property\">data</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">StaticRouter</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;ctx.request.url&#125;</span>&gt;</span>&#123;Routes()&#125;<span class=\"tag\">&lt;/<span class=\"name\">StaticRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">RecoilRoot</span>&gt;</span></span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// router/index.tsx 常规路由 如果需要预获取的数据函数可以写在这里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Switch</span>, <span class=\"title class_\">Route</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Blog</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Blog&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Tool</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Tool&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../pages/Tool&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exact</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Blog</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/tool&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exact</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Tool</span>,</span><br><span class=\"line\">        <span class=\"attr\">loadData</span>:getData</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Routes</span> = (<span class=\"params\"></span>) =&gt; (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        routes.map((r,index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            const &#123; path, component, exact &#125; = r;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return (</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#123;path&#125;</span> <span class=\"attr\">exact</span>=<span class=\"string\">&#123;exact&#125;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;component&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            )</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Switch</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ssrService.ts  这里主要是做模板替换 数据注入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; provide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify-binding-decorators&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">TAGS</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constant/tag&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">SSR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../interface/ssr&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;../web/index.html&quot;</span>),<span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleTemplate</span> = (<span class=\"params\">template:<span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">props:&#123;html:<span class=\"built_in\">string</span>,store:<span class=\"built_in\">string</span>&#125;</span>) =&gt;</span> (</span><br><span class=\"line\">        template.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#x27;</span>,<span class=\"string\">`&lt;div id=&quot;app&quot;&gt;<span class=\"subst\">$&#123;props.html&#125;</span>&lt;/div&gt;<span class=\"subst\">$&#123;props.store&#125;</span>`</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> serverBundle = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../web/server.bundle.js&#x27;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"meta\">@provide</span>(<span class=\"variable constant_\">TAGS</span>.<span class=\"property\">SsrService</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SsrService</span> <span class=\"keyword\">implements</span> <span class=\"variable constant_\">SSR</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">handleSsr</span>(<span class=\"params\">ctx:IRouterContext</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> render = <span class=\"title function_\">handleTemplate</span>(template);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> jsx = <span class=\"keyword\">await</span> <span class=\"title function_\">serverBundle</span>(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> <span class=\"title function_\">renderToString</span>(jsx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">render</span>(&#123;</span><br><span class=\"line\">            html,</span><br><span class=\"line\">            <span class=\"attr\">store</span>:<span class=\"string\">`&lt;script&gt; window.REDUX_STATE = <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify((ctx <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"variable language_\">window</span>)&#125;</span>&lt;/script&gt;`</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"开启bigpipe-让模板以流的形式输出以及开启gzip压缩减少白屏时间\"><a href=\"#开启bigpipe-让模板以流的形式输出以及开启gzip压缩减少白屏时间\" class=\"headerlink\" title=\"开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间\"></a>开启bigpipe 让模板以流的形式输出以及开启gzip压缩减少白屏时间</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; provideThrowable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../ioc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; controller, httpGet, interfaces, <span class=\"variable constant_\">TYPE</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify-koa-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IRouterContext</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;koa-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">SSR</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../interface/ssr&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">TAGS</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constant/tag&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;inversify&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Readable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;stream&quot;</span>;     </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createGzip &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;zlib&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@provideThrowable</span>(<span class=\"variable constant_\">TYPE</span>.<span class=\"property\">Controller</span>,<span class=\"string\">&quot;SsrController&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">@controller</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SsrController</span> <span class=\"keyword\">implements</span> interfaces.<span class=\"property\">Controller</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">ssrService</span>:<span class=\"variable constant_\">SSR</span> = <span class=\"literal\">null</span>!</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@inject</span>(TAGS.SsrService) ssrService:SSR</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ssrService</span> = ssrService</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"meta\">@httpGet</span>(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"title function_\">index</span>(<span class=\"attr\">ctx</span>:<span class=\"title class_\">IRouterContext</span>,<span class=\"attr\">next</span>:<span class=\"function\">()=&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">unknown</span>&gt;):<span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res =  <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ssrService</span>.<span class=\"title function_\">handleSsr</span>(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">createSsrStreamPromise</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> htmlStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Readable</span>(); <span class=\"comment\">// 让字符串变为stream</span></span><br><span class=\"line\">                ctx.<span class=\"property\">status</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">                ctx.<span class=\"property\">res</span>.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;content-encoding&#x27;</span>,<span class=\"string\">&#x27;gzip&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> gz = <span class=\"title function_\">createGzip</span>();           <span class=\"comment\">// 开启gzip压缩 </span></span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">push</span>(res);</span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">push</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">                htmlStream.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .<span class=\"title function_\">pipe</span>(gz)</span><br><span class=\"line\">                .<span class=\"title function_\">pipe</span>(ctx.<span class=\"property\">res</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">createSsrStreamPromise</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SsrController</span></span><br></pre></td></tr></table></figure>\n"},{"title":"react17源码之useState","cover":"/img/react-s.webp","_content":"\n### react/ReactHook.js useState函数\n\n- useState调用resolveDispatcher函数 dispatcher = ReactCurrentDispatcher.current。\n\n```js\nexport function useState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\n\nfunction resolveDispatcher() {\n  const dispatcher = ReactCurrentDispatcher.current;\n  if (__DEV__) {\n    if (dispatcher === null) {\n      console.error(\n        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n          ' one of the following reasons:\\n' +\n          '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n          '2. You might be breaking the Rules of Hooks\\n' +\n          '3. You might have more than one copy of React in the same app\\n' +\n          'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n      );\n    }\n  }\n  // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n  return ((dispatcher: any): Dispatcher);\n}\n```\n### ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样\n\n- react在不同的阶段对应的ReactCurrentDispatcher.current值不一样，主要为mount阶段为 InvalidNestedHooksDispatcherOnMountInDEV，\n更新阶段为 HooksDispatcherOnUpdateInDEV，渲染阶段 HooksDispatcherOnRerenderInDEV。这三个对象里面含有react的hooks的所有方法。\n\n\n```js dispatcher\nInvalidNestedHooksDispatcherOnMountInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    ...\n}\n\nHooksDispatcherOnUpdateInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n  ...\n}\n\nHooksDispatcherOnRerenderInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n  ...\n}\n\n```\n\n### mountState函数\n\n- mount情况下，mountState函数会调用mountWorkInProgressHook函数对WorkInProgressHook进行赋值，调用dispatchAction函数返回一个dispatch函数暴露给用户修改state值。\n\n```js mountState\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<BasicStateAction<S>,> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n```\n\n### mountWorkInProgressHook函数\n\n- mountWorkInProgressHook函数会判断workInProgressHook是否等于null,不是的话说明是新的hook,会将当前hook加到之前workInProgressHook.next上并重写当前workInProgressHook并返回。\n\n```js mountWorkInProgressHook\n    function mountWorkInProgressHook(): Hook {\n      const hook: Hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null,\n      };\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n      return workInProgressHook;\n    }\n```\n### dispatchAction函数\n\n- dispatchAction方法会调用requestEventTime获取事件的时间,requestUpdateLane方法获取当前的fiber的lane，最后走到调度任务函数scheduleUpdateOnFiber进入调度阶段之后再到Reconcile阶段最后到commit阶段再更新视图。\n\n```js dispatchAction\nfunction dispatchAction<S, A>(fiber: Fiber,queue: UpdateQueue<S, A>,action: A,) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n    const pending = queue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    queue.pending = update;\n  } else {\n    if (isInterleavedUpdate(fiber, lane)) {\n      const interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n        // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n        pushInterleavedQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    } else {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (isTransitionLane(lane) && root !== null) {\n      let queueLanes = queue.lanes;\n      // If any entangled lanes are no longer pending on the root, then they\n      // must have finished. We can remove them from the shared queue, which\n      // represents a superset of the actually pending lanes. In some cases we\n      // may entangle more than we need to, but that's OK. In fact it's worse if\n      // we *don't* entangle when we should.\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n      // Entangle the new transition lane with the other transition lanes.\n      const newQueueLanes = mergeLanes(queueLanes, lane);\n      queue.lanes = newQueueLanes;\n      // Even if queue.lanes already include lane, we don't know for certain if\n      // the lane finished since the last time we entangled it. So we need to\n      // entangle it again, just to be sure.\n      markRootEntangled(root, newQueueLanes);\n    }\n  }\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n```\n### requestEventTime函数\n\n- ReactFiberWorkLoop.old.js 中导出requestEventTime函数在里面会调用now函数。当前执行的上下文既不在render阶段也不在commit阶段返回当前当前时间戳，不然返回之前任务的时间戳。\n\n```js requestEventTime\n  export function requestEventTime() {\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n      // We're inside React, so it's fine to read the actual time.\n      return now();\n    }\n    // We're not inside React, so we may be in the middle of a browser event.\n    if (currentEventTime !== NoTimestamp) {\n      // Use the same start time for all updates until we enter React again.\n      return currentEventTime;\n    }\n    // This is the first update since React yielded. Compute a new start time.\n    currentEventTime = now();\n    return currentEventTime;\n  }\n```\n### now函数\n\n- Scheduler模块中的Scheduler.js中导出now函数,会首先判断performance.now浏览器是否兼容不然就调用localDate.now。performance.now是从页面navigationstart开始算精度为毫秒级一个时间差值。而localDate.now是返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。\n\n```js \n  const hasPerformanceNow =\n    typeof performance === 'object' && typeof performance.now === 'function';\n\n  if (hasPerformanceNow) {\n    const localPerformance = performance;\n    getCurrentTime = () => localPerformance.now();\n  } else {\n    const localDate = Date;\n    const initialTime = localDate.now();\n    getCurrentTime = () => localDate.now() - initialTime;\n  }\n```\n\n### requestUpdateLane函数\n\n- requestUpdateLane获取当前fiber的lane\n\n```js ReactFiberWorkLoop.old.js\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (\n      __DEV__ &&\n      warnOnSubscriptionInsideStartTransition &&\n      ReactCurrentBatchConfig._updatedFibers\n    ) {\n      ReactCurrentBatchConfig._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\n``` \n\n### updateState函数\n\n- updateState函数调用updateReducer函数。\n\n```js updateState\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n```\n### updateReducer函数\n\n- updateReducer函数则首先会调用updateWorkInProgressHook函数。之后判断经过updateWorkInProgressHook更新后的queue是否有任务，有的话将更新后的hook.queue加到当前的currentHook.baseQueue上。isSubsetOfLanes函数判断render的lane是否包含upadte的lane，如果包含则把updateLane加到正在渲染的currentlyRenderingFiber的lane上，markSkippedUpdateLanes函数则会再把updateLane加到workInProgressRootSkippedLanes上，再就判断reduer获取newState，并挂载到upadte的action上。并且是在do while循环中把upate的队列所有的fiber任务都处理完。判断newState和hook.memoizedState是否不等，不等的话调用markWorkInProgressReceivedUpdate函数更改变量didReceiveUpdate=true表示已经更新，执行完循环给hook.memoizedState赋值newState。由于在mountReduce阶段queue.dispatch挂载dispatch方法，所有upadteReducer阶段就直接拿到hook.memoizedState和dispatch，并返回。\n\n```js updateReducer\nfunction updateReducer<S, I, A>(reducer: (S, A) => S,initialArg: I,init?: I => S,): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n  queue.lastRenderedReducer = reducer;\n  const current: Hook = (currentHook: any);\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  }\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n```\n\n### updateWorkInProgressHook函数\n\n- updateWorkInProgressHook函数主要判断当前currentHook或workInProgressHook有没有值有的话就取当前的hook的next赋值给workInProgressHook,没有的话就取当前rendering阶段的fiber取缓存的memoizedState,在mountWorkInProgressHook阶段可以看到memoizedState存的就是hook,所以updateWorkInProgressHook函数主要就是取下一个hook。\n\n```js updateWorkInProgressHook\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null,\n    };\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n```\n\n### isSubsetOfLanes函数\n\n- isSubsetOfLanes函数判断set的lane是否包含subset的lane。\n\n```js isSubsetOfLanes\nfunction isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n```\n### mergeLanes函数\n\n- mergeLanes把b加到a的lane上。\n\n```js \nfunction mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n```\n\n### markSkippedUpdateLanes函数\n\n- markSkippedUpdateLanes把传入的lane加到workInProgressRootSkippedLanes上。\n\n```js markSkippedUpdateLanes\nfunction markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n```\n\n### basicStateReducer函数\n\n- basicStateReducer函数\n\n```js basicStateReducer\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n```\n\n### is函数\n\n- is函数判断两个值是否相等 shared/objectIs.js\n\n```js objectIs.js\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n```\n\n\n\n### markWorkInProgressReceivedUpdate函数\n\n```js markWorkInProgressReceivedUpdate\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n```\n\n\n\n### rerenderState函数调用rerenderReducer函数。\n\n```js\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n```\n\n### rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\n\n```js rerenderReducer\nfunction rerenderReducer<S, I, A>(reducer: (S, A) => S,initialArg: I,init?: I => S,): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n  queue.lastRenderedReducer = reducer;\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n```\n\n### Hook,Update,UpdateQueue的数据结构。\n\n```js\ntype Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|}; \n\n```\n- useState过程中的Hook,Update,UpdateQueue的数据结构\n![avatar](/img/hook.webp)","source":"_posts/reactSource.md","raw":"---\ntitle: react17源码之useState\ncover: /img/react-s.webp\n---\n\n### react/ReactHook.js useState函数\n\n- useState调用resolveDispatcher函数 dispatcher = ReactCurrentDispatcher.current。\n\n```js\nexport function useState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\n\nfunction resolveDispatcher() {\n  const dispatcher = ReactCurrentDispatcher.current;\n  if (__DEV__) {\n    if (dispatcher === null) {\n      console.error(\n        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n          ' one of the following reasons:\\n' +\n          '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n          '2. You might be breaking the Rules of Hooks\\n' +\n          '3. You might have more than one copy of React in the same app\\n' +\n          'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n      );\n    }\n  }\n  // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n  return ((dispatcher: any): Dispatcher);\n}\n```\n### ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样\n\n- react在不同的阶段对应的ReactCurrentDispatcher.current值不一样，主要为mount阶段为 InvalidNestedHooksDispatcherOnMountInDEV，\n更新阶段为 HooksDispatcherOnUpdateInDEV，渲染阶段 HooksDispatcherOnRerenderInDEV。这三个对象里面含有react的hooks的所有方法。\n\n\n```js dispatcher\nInvalidNestedHooksDispatcherOnMountInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    ...\n}\n\nHooksDispatcherOnUpdateInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n  ...\n}\n\nHooksDispatcherOnRerenderInDEV：{\n  ...\n  useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n  ...\n}\n\n```\n\n### mountState函数\n\n- mount情况下，mountState函数会调用mountWorkInProgressHook函数对WorkInProgressHook进行赋值，调用dispatchAction函数返回一个dispatch函数暴露给用户修改state值。\n\n```js mountState\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<BasicStateAction<S>,> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n```\n\n### mountWorkInProgressHook函数\n\n- mountWorkInProgressHook函数会判断workInProgressHook是否等于null,不是的话说明是新的hook,会将当前hook加到之前workInProgressHook.next上并重写当前workInProgressHook并返回。\n\n```js mountWorkInProgressHook\n    function mountWorkInProgressHook(): Hook {\n      const hook: Hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null,\n      };\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n      return workInProgressHook;\n    }\n```\n### dispatchAction函数\n\n- dispatchAction方法会调用requestEventTime获取事件的时间,requestUpdateLane方法获取当前的fiber的lane，最后走到调度任务函数scheduleUpdateOnFiber进入调度阶段之后再到Reconcile阶段最后到commit阶段再更新视图。\n\n```js dispatchAction\nfunction dispatchAction<S, A>(fiber: Fiber,queue: UpdateQueue<S, A>,action: A,) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n    const pending = queue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    queue.pending = update;\n  } else {\n    if (isInterleavedUpdate(fiber, lane)) {\n      const interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n        // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n        pushInterleavedQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    } else {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    const root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n    if (isTransitionLane(lane) && root !== null) {\n      let queueLanes = queue.lanes;\n      // If any entangled lanes are no longer pending on the root, then they\n      // must have finished. We can remove them from the shared queue, which\n      // represents a superset of the actually pending lanes. In some cases we\n      // may entangle more than we need to, but that's OK. In fact it's worse if\n      // we *don't* entangle when we should.\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n      // Entangle the new transition lane with the other transition lanes.\n      const newQueueLanes = mergeLanes(queueLanes, lane);\n      queue.lanes = newQueueLanes;\n      // Even if queue.lanes already include lane, we don't know for certain if\n      // the lane finished since the last time we entangled it. So we need to\n      // entangle it again, just to be sure.\n      markRootEntangled(root, newQueueLanes);\n    }\n  }\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n```\n### requestEventTime函数\n\n- ReactFiberWorkLoop.old.js 中导出requestEventTime函数在里面会调用now函数。当前执行的上下文既不在render阶段也不在commit阶段返回当前当前时间戳，不然返回之前任务的时间戳。\n\n```js requestEventTime\n  export function requestEventTime() {\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n      // We're inside React, so it's fine to read the actual time.\n      return now();\n    }\n    // We're not inside React, so we may be in the middle of a browser event.\n    if (currentEventTime !== NoTimestamp) {\n      // Use the same start time for all updates until we enter React again.\n      return currentEventTime;\n    }\n    // This is the first update since React yielded. Compute a new start time.\n    currentEventTime = now();\n    return currentEventTime;\n  }\n```\n### now函数\n\n- Scheduler模块中的Scheduler.js中导出now函数,会首先判断performance.now浏览器是否兼容不然就调用localDate.now。performance.now是从页面navigationstart开始算精度为毫秒级一个时间差值。而localDate.now是返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。\n\n```js \n  const hasPerformanceNow =\n    typeof performance === 'object' && typeof performance.now === 'function';\n\n  if (hasPerformanceNow) {\n    const localPerformance = performance;\n    getCurrentTime = () => localPerformance.now();\n  } else {\n    const localDate = Date;\n    const initialTime = localDate.now();\n    getCurrentTime = () => localDate.now() - initialTime;\n  }\n```\n\n### requestUpdateLane函数\n\n- requestUpdateLane获取当前fiber的lane\n\n```js ReactFiberWorkLoop.old.js\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (\n      __DEV__ &&\n      warnOnSubscriptionInsideStartTransition &&\n      ReactCurrentBatchConfig._updatedFibers\n    ) {\n      ReactCurrentBatchConfig._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\n``` \n\n### updateState函数\n\n- updateState函数调用updateReducer函数。\n\n```js updateState\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n```\n### updateReducer函数\n\n- updateReducer函数则首先会调用updateWorkInProgressHook函数。之后判断经过updateWorkInProgressHook更新后的queue是否有任务，有的话将更新后的hook.queue加到当前的currentHook.baseQueue上。isSubsetOfLanes函数判断render的lane是否包含upadte的lane，如果包含则把updateLane加到正在渲染的currentlyRenderingFiber的lane上，markSkippedUpdateLanes函数则会再把updateLane加到workInProgressRootSkippedLanes上，再就判断reduer获取newState，并挂载到upadte的action上。并且是在do while循环中把upate的队列所有的fiber任务都处理完。判断newState和hook.memoizedState是否不等，不等的话调用markWorkInProgressReceivedUpdate函数更改变量didReceiveUpdate=true表示已经更新，执行完循环给hook.memoizedState赋值newState。由于在mountReduce阶段queue.dispatch挂载dispatch方法，所有upadteReducer阶段就直接拿到hook.memoizedState和dispatch，并返回。\n\n```js updateReducer\nfunction updateReducer<S, I, A>(reducer: (S, A) => S,initialArg: I,init?: I => S,): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n  queue.lastRenderedReducer = reducer;\n  const current: Hook = (currentHook: any);\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  }\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n```\n\n### updateWorkInProgressHook函数\n\n- updateWorkInProgressHook函数主要判断当前currentHook或workInProgressHook有没有值有的话就取当前的hook的next赋值给workInProgressHook,没有的话就取当前rendering阶段的fiber取缓存的memoizedState,在mountWorkInProgressHook阶段可以看到memoizedState存的就是hook,所以updateWorkInProgressHook函数主要就是取下一个hook。\n\n```js updateWorkInProgressHook\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null,\n    };\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n```\n\n### isSubsetOfLanes函数\n\n- isSubsetOfLanes函数判断set的lane是否包含subset的lane。\n\n```js isSubsetOfLanes\nfunction isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n```\n### mergeLanes函数\n\n- mergeLanes把b加到a的lane上。\n\n```js \nfunction mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n```\n\n### markSkippedUpdateLanes函数\n\n- markSkippedUpdateLanes把传入的lane加到workInProgressRootSkippedLanes上。\n\n```js markSkippedUpdateLanes\nfunction markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n```\n\n### basicStateReducer函数\n\n- basicStateReducer函数\n\n```js basicStateReducer\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n```\n\n### is函数\n\n- is函数判断两个值是否相等 shared/objectIs.js\n\n```js objectIs.js\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n```\n\n\n\n### markWorkInProgressReceivedUpdate函数\n\n```js markWorkInProgressReceivedUpdate\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n```\n\n\n\n### rerenderState函数调用rerenderReducer函数。\n\n```js\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n```\n\n### rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\n\n```js rerenderReducer\nfunction rerenderReducer<S, I, A>(reducer: (S, A) => S,initialArg: I,init?: I => S,): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n  queue.lastRenderedReducer = reducer;\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n```\n\n### Hook,Update,UpdateQueue的数据结构。\n\n```js\ntype Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|}; \n\n```\n- useState过程中的Hook,Update,UpdateQueue的数据结构\n![avatar](/img/hook.webp)","slug":"reactSource","published":1,"date":"2021-09-22T14:02:54.298Z","updated":"2021-11-03T08:15:30.740Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40b000742u7c5f4eaw3","content":"<h3 id=\"react-ReactHook-js-useState函数\"><a href=\"#react-ReactHook-js-useState函数\" class=\"headerlink\" title=\"react&#x2F;ReactHook.js useState函数\"></a>react&#x2F;ReactHook.js useState函数</h3><ul>\n<li>useState调用resolveDispatcher函数 dispatcher &#x3D; ReactCurrentDispatcher.current。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatcher = <span class=\"title function_\">resolveDispatcher</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dispatcher.<span class=\"title function_\">useState</span>(initialState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveDispatcher</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dispatcher === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27; one of the following reasons:\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;1. You might have mismatching versions of React and the renderer (such as React DOM)\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;2. You might be breaking the Rules of Hooks\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;3. You might have more than one copy of React in the same app\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.&#x27;</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Will result in a null access error if accessed outside render phase. We</span></span><br><span class=\"line\">  <span class=\"comment\">// intentionally don&#x27;t throw our own error because this is in a hot path.</span></span><br><span class=\"line\">  <span class=\"comment\">// Also helps ensure this is inlined.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((<span class=\"attr\">dispatcher</span>: any): <span class=\"title class_\">Dispatcher</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReactFiberHooks-old-js-在不同的阶段对应的ReactCurrentDispatcher-current值不一样\"><a href=\"#ReactFiberHooks-old-js-在不同的阶段对应的ReactCurrentDispatcher-current值不一样\" class=\"headerlink\" title=\"ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样\"></a>ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样</h3><ul>\n<li>react在不同的阶段对应的ReactCurrentDispatcher.current值不一样，主要为mount阶段为 InvalidNestedHooksDispatcherOnMountInDEV，<br>更新阶段为 HooksDispatcherOnUpdateInDEV，渲染阶段 HooksDispatcherOnRerenderInDEV。这三个对象里面含有react的hooks的所有方法。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>dispatcher</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">warnInvalidHookAccess</span>();</span><br><span class=\"line\">      <span class=\"title function_\">mountHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">HooksDispatcherOnUpdateInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">updateHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnUpdateInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">updateState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">HooksDispatcherOnRerenderInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">updateHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnRerenderInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">rerenderState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mountState函数\"><a href=\"#mountState函数\" class=\"headerlink\" title=\"mountState函数\"></a>mountState函数</h3><ul>\n<li>mount情况下，mountState函数会调用mountWorkInProgressHook函数对WorkInProgressHook进行赋值，调用dispatchAction函数返回一个dispatch函数暴露给用户修改state值。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>mountState</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mountState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">    initialState = <span class=\"title function_\">initialState</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hook.<span class=\"property\">memoizedState</span> = hook.<span class=\"property\">baseState</span> = initialState;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;S, <span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">interleaved</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lanes</span>: <span class=\"title class_\">NoLanes</span>,</span><br><span class=\"line\">    <span class=\"attr\">dispatch</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastRenderedReducer</span>: basicStateReducer,</span><br><span class=\"line\">    <span class=\"attr\">lastRenderedState</span>: (<span class=\"attr\">initialState</span>: any),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  hook.<span class=\"property\">queue</span> = queue;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;,&gt; = (queue.<span class=\"property\">dispatch</span> = (dispatchAction.<span class=\"title function_\">bind</span>(</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    currentlyRenderingFiber,</span><br><span class=\"line\">    queue,</span><br><span class=\"line\">  ): any));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mountWorkInProgressHook函数\"><a href=\"#mountWorkInProgressHook函数\" class=\"headerlink\" title=\"mountWorkInProgressHook函数\"></a>mountWorkInProgressHook函数</h3><ul>\n<li>mountWorkInProgressHook函数会判断workInProgressHook是否等于null,不是的话说明是新的hook,会将当前hook加到之前workInProgressHook.next上并重写当前workInProgressHook并返回。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>mountWorkInProgressHook</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">hook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseQueue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">queue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is the first hook in the list</span></span><br><span class=\"line\">    currentlyRenderingFiber.<span class=\"property\">memoizedState</span> = workInProgressHook = hook;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Append to the end of the list</span></span><br><span class=\"line\">    workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = hook;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatchAction函数\"><a href=\"#dispatchAction函数\" class=\"headerlink\" title=\"dispatchAction函数\"></a>dispatchAction函数</h3><ul>\n<li>dispatchAction方法会调用requestEventTime获取事件的时间,requestUpdateLane方法获取当前的fiber的lane，最后走到调度任务函数scheduleUpdateOnFiber进入调度阶段之后再到Reconcile阶段最后到commit阶段再更新视图。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>dispatchAction</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> dispatchAction&lt;S, A&gt;(<span class=\"attr\">fiber</span>: <span class=\"title class_\">Fiber</span>,<span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;S, A&gt;,<span class=\"attr\">action</span>: A,) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;State updates from the useState() and useReducer() Hooks don&#x27;t support the &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;second callback argument. To execute a side effect after &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;rendering, declare it in the component body with useEffect().&#x27;</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> eventTime = <span class=\"title function_\">requestEventTime</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lane = <span class=\"title function_\">requestUpdateLane</span>(fiber);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">update</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">    lane,</span><br><span class=\"line\">    action,</span><br><span class=\"line\">    <span class=\"attr\">eagerReducer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">eagerState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    fiber === currentlyRenderingFiber ||</span><br><span class=\"line\">    (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a render phase update. Stash it in a lazily-created map of</span></span><br><span class=\"line\">    <span class=\"comment\">// queue -&gt; linked list of updates. After this render pass, we&#x27;ll restart</span></span><br><span class=\"line\">    <span class=\"comment\">// and apply the stashed updates on top of the work-in-progress hook.</span></span><br><span class=\"line\">    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">      update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">      pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isInterleavedUpdate</span>(fiber, lane)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interleaved = queue.<span class=\"property\">interleaved</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (interleaved === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">        <span class=\"comment\">// At the end of the current render, this queue&#x27;s interleaved updates will</span></span><br><span class=\"line\">        <span class=\"comment\">// be transferred to the pending queue.</span></span><br><span class=\"line\">        <span class=\"title function_\">pushInterleavedQueue</span>(queue);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = interleaved.<span class=\"property\">next</span>;</span><br><span class=\"line\">        interleaved.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"property\">interleaved</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pending = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      fiber.<span class=\"property\">lanes</span> === <span class=\"title class_\">NoLanes</span> &amp;&amp;</span><br><span class=\"line\">      (alternate === <span class=\"literal\">null</span> || alternate.<span class=\"property\">lanes</span> === <span class=\"title class_\">NoLanes</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// The queue is currently empty, which means we can eagerly compute the</span></span><br><span class=\"line\">      <span class=\"comment\">// next state before entering the render phase. If the new state is the</span></span><br><span class=\"line\">      <span class=\"comment\">// same as the current state, we may be able to bail out entirely.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastRenderedReducer = queue.<span class=\"property\">lastRenderedReducer</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lastRenderedReducer !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prevDispatcher;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">          prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">          <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnUpdateInDEV</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"attr\">currentState</span>: S = (queue.<span class=\"property\">lastRenderedState</span>: any);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> eagerState = <span class=\"title function_\">lastRenderedReducer</span>(currentState, action);</span><br><span class=\"line\">          <span class=\"comment\">// Stash the eagerly computed state, and the reducer used to compute</span></span><br><span class=\"line\">          <span class=\"comment\">// it, on the update object. If the reducer hasn&#x27;t changed by the</span></span><br><span class=\"line\">          <span class=\"comment\">// time we enter the render phase, then the eager state can be used</span></span><br><span class=\"line\">          <span class=\"comment\">// without calling the reducer again.</span></span><br><span class=\"line\">          update.<span class=\"property\">eagerReducer</span> = lastRenderedReducer;</span><br><span class=\"line\">          update.<span class=\"property\">eagerState</span> = eagerState;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title function_\">is</span>(eagerState, currentState)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fast path. We can bail out without scheduling React to re-render.</span></span><br><span class=\"line\">            <span class=\"comment\">// It&#x27;s still possible that we&#x27;ll need to rebase this update later,</span></span><br><span class=\"line\">            <span class=\"comment\">// if the component re-renders for a different reason and by that</span></span><br><span class=\"line\">            <span class=\"comment\">// time the reducer has changed.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Suppress the error. It will throw again in the render phase.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// $FlowExpectedError - jest isn&#x27;t a global, and isn&#x27;t recognized outside of tests</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;undefined&#x27;</span> !== <span class=\"keyword\">typeof</span> jest) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warnIfNotCurrentlyActingUpdatesInDev</span>(fiber);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"title function_\">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isTransitionLane</span>(lane) &amp;&amp; root !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> queueLanes = queue.<span class=\"property\">lanes</span>;</span><br><span class=\"line\">      <span class=\"comment\">// If any entangled lanes are no longer pending on the root, then they</span></span><br><span class=\"line\">      <span class=\"comment\">// must have finished. We can remove them from the shared queue, which</span></span><br><span class=\"line\">      <span class=\"comment\">// represents a superset of the actually pending lanes. In some cases we</span></span><br><span class=\"line\">      <span class=\"comment\">// may entangle more than we need to, but that&#x27;s OK. In fact it&#x27;s worse if</span></span><br><span class=\"line\">      <span class=\"comment\">// we *don&#x27;t* entangle when we should.</span></span><br><span class=\"line\">      queueLanes = <span class=\"title function_\">intersectLanes</span>(queueLanes, root.<span class=\"property\">pendingLanes</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Entangle the new transition lane with the other transition lanes.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newQueueLanes = <span class=\"title function_\">mergeLanes</span>(queueLanes, lane);</span><br><span class=\"line\">      queue.<span class=\"property\">lanes</span> = newQueueLanes;</span><br><span class=\"line\">      <span class=\"comment\">// Even if queue.lanes already include lane, we don&#x27;t know for certain if</span></span><br><span class=\"line\">      <span class=\"comment\">// the lane finished since the last time we entangled it. So we need to</span></span><br><span class=\"line\">      <span class=\"comment\">// entangle it again, just to be sure.</span></span><br><span class=\"line\">      <span class=\"title function_\">markRootEntangled</span>(root, newQueueLanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableDebugTracing) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fiber.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">DebugTracingMode</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = <span class=\"title function_\">getComponentNameFromFiber</span>(fiber) || <span class=\"string\">&#x27;Unknown&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">logStateUpdateScheduled</span>(name, lane, action);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enableSchedulingProfiler) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">markStateUpdateScheduled</span>(fiber, lane);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"requestEventTime函数\"><a href=\"#requestEventTime函数\" class=\"headerlink\" title=\"requestEventTime函数\"></a>requestEventTime函数</h3><ul>\n<li>ReactFiberWorkLoop.old.js 中导出requestEventTime函数在里面会调用now函数。当前执行的上下文既不在render阶段也不在commit阶段返回当前当前时间戳，不然返回之前任务的时间戳。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>requestEventTime</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">requestEventTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) !== <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;re inside React, so it&#x27;s fine to read the actual time.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">now</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We&#x27;re not inside React, so we may be in the middle of a browser event.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentEventTime !== <span class=\"title class_\">NoTimestamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use the same start time for all updates until we enter React again.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This is the first update since React yielded. Compute a new start time.</span></span><br><span class=\"line\">  currentEventTime = <span class=\"title function_\">now</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"now函数\"><a href=\"#now函数\" class=\"headerlink\" title=\"now函数\"></a>now函数</h3><ul>\n<li>Scheduler模块中的Scheduler.js中导出now函数,会首先判断performance.now浏览器是否兼容不然就调用localDate.now。performance.now是从页面navigationstart开始算精度为毫秒级一个时间差值。而localDate.now是返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasPerformanceNow =</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> performance === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> performance.<span class=\"property\">now</span> === <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasPerformanceNow) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localPerformance = performance;</span><br><span class=\"line\">  getCurrentTime = <span class=\"function\">() =&gt;</span> localPerformance.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localDate = <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initialTime = localDate.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">  getCurrentTime = <span class=\"function\">() =&gt;</span> localDate.<span class=\"title function_\">now</span>() - initialTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"requestUpdateLane函数\"><a href=\"#requestUpdateLane函数\" class=\"headerlink\" title=\"requestUpdateLane函数\"></a>requestUpdateLane函数</h3><ul>\n<li>requestUpdateLane获取当前fiber的lane</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>ReactFiberWorkLoop.old.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">requestUpdateLane</span>(<span class=\"params\">fiber: Fiber</span>): <span class=\"title class_\">Lane</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Special cases</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mode = fiber.<span class=\"property\">mode</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((mode &amp; <span class=\"title class_\">ConcurrentMode</span>) === <span class=\"title class_\">NoMode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title class_\">SyncLane</span>: <span class=\"title class_\">Lane</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    !deferRenderPhaseUpdateToNextBatch &amp;&amp;</span><br><span class=\"line\">    (executionContext &amp; <span class=\"title class_\">RenderContext</span>) !== <span class=\"title class_\">NoContext</span> &amp;&amp;</span><br><span class=\"line\">    workInProgressRootRenderLanes !== <span class=\"title class_\">NoLanes</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a render phase update. These are not officially supported. The</span></span><br><span class=\"line\">    <span class=\"comment\">// old behavior is to give this the same &quot;thread&quot; (lanes) as</span></span><br><span class=\"line\">    <span class=\"comment\">// whatever is currently rendering. So if you call `setState` on a component</span></span><br><span class=\"line\">    <span class=\"comment\">// that happens later in the same render, it will flush. Ideally, we want to</span></span><br><span class=\"line\">    <span class=\"comment\">// remove the special case and treat them as if they came from an</span></span><br><span class=\"line\">    <span class=\"comment\">// interleaved event. Regardless, this pattern is not officially supported.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior is only a fallback. The flag only exists until we can roll</span></span><br><span class=\"line\">    <span class=\"comment\">// out the setState warning, since existing code might accidentally rely on</span></span><br><span class=\"line\">    <span class=\"comment\">// the current behavior.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">pickArbitraryLane</span>(workInProgressRootRenderLanes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isTransition = <span class=\"title function_\">requestCurrentTransition</span>() !== <span class=\"title class_\">NoTransition</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isTransition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      __DEV__ &amp;&amp;</span><br><span class=\"line\">      warnOnSubscriptionInsideStartTransition &amp;&amp;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentBatchConfig</span>.<span class=\"property\">_updatedFibers</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentBatchConfig</span>.<span class=\"property\">_updatedFibers</span>.<span class=\"title function_\">add</span>(fiber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// The algorithm for assigning an update to a lane should be stable for all</span></span><br><span class=\"line\">    <span class=\"comment\">// updates at the same priority within the same event. To do this, the</span></span><br><span class=\"line\">    <span class=\"comment\">// inputs to the algorithm must be the same.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// The trick we use is to cache the first of each of these inputs within an</span></span><br><span class=\"line\">    <span class=\"comment\">// event. Then reset the cached values once we can be sure the event is</span></span><br><span class=\"line\">    <span class=\"comment\">// over. Our heuristic for that is whenever we enter a concurrent work loop.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentEventTransitionLane === <span class=\"title class_\">NoLane</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// All transitions within the same event are assigned the same lane.</span></span><br><span class=\"line\">      currentEventTransitionLane = <span class=\"title function_\">claimNextTransitionLane</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentEventTransitionLane;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Updates originating inside certain React methods, like flushSync, have</span></span><br><span class=\"line\">  <span class=\"comment\">// their priority set by tracking it with a context variable.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// The opaque type returned by the host config is internally a lane, so we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use that directly.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this type conversion to the event priority module.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">updateLane</span>: <span class=\"title class_\">Lane</span> = (<span class=\"title function_\">getCurrentUpdatePriority</span>(): any);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (updateLane !== <span class=\"title class_\">NoLane</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> updateLane;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This update originated outside React. Ask the host environment for an</span></span><br><span class=\"line\">  <span class=\"comment\">// appropriate priority, based on the type of event.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// The opaque type returned by the host config is internally a lane, so we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use that directly.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this type conversion to the event priority module.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">eventLane</span>: <span class=\"title class_\">Lane</span> = (<span class=\"title function_\">getCurrentEventPriority</span>(): any);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eventLane;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"updateState函数\"><a href=\"#updateState函数\" class=\"headerlink\" title=\"updateState函数\"></a>updateState函数</h3><ul>\n<li>updateState函数调用updateReducer函数。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateState</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">updateReducer</span>(basicStateReducer, (<span class=\"attr\">initialState</span>: any));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateReducer函数\"><a href=\"#updateReducer函数\" class=\"headerlink\" title=\"updateReducer函数\"></a>updateReducer函数</h3><ul>\n<li>updateReducer函数则首先会调用updateWorkInProgressHook函数。之后判断经过updateWorkInProgressHook更新后的queue是否有任务，有的话将更新后的hook.queue加到当前的currentHook.baseQueue上。isSubsetOfLanes函数判断render的lane是否包含upadte的lane，如果包含则把updateLane加到正在渲染的currentlyRenderingFiber的lane上，markSkippedUpdateLanes函数则会再把updateLane加到workInProgressRootSkippedLanes上，再就判断reduer获取newState，并挂载到upadte的action上。并且是在do while循环中把upate的队列所有的fiber任务都处理完。判断newState和hook.memoizedState是否不等，不等的话调用markWorkInProgressReceivedUpdate函数更改变量didReceiveUpdate&#x3D;true表示已经更新，执行完循环给hook.memoizedState赋值newState。由于在mountReduce阶段queue.dispatch挂载dispatch方法，所有upadteReducer阶段就直接拿到hook.memoizedState和dispatch，并返回。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateReducer&lt;S, I, A&gt;(<span class=\"attr\">reducer</span>: <span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S,<span class=\"attr\">initialArg</span>: I,init?: <span class=\"function\"><span class=\"params\">I</span> =&gt;</span> S,): [S, <span class=\"title class_\">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = hook.<span class=\"property\">queue</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    queue !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Should have a queue. This is likely a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  queue.<span class=\"property\">lastRenderedReducer</span> = reducer;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">current</span>: <span class=\"title class_\">Hook</span> = (<span class=\"attr\">currentHook</span>: any);</span><br><span class=\"line\">  <span class=\"comment\">// The last rebase update that is NOT part of the base state.</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> baseQueue = current.<span class=\"property\">baseQueue</span>;</span><br><span class=\"line\">  <span class=\"comment\">// The last pending update that hasn&#x27;t been processed yet.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pendingQueue = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pendingQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have new updates that haven&#x27;t been processed yet.</span></span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;ll add them to the base queue.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (baseQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Merge the pending queue and the base queue.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> baseFirst = baseQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pendingFirst = pendingQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">      baseQueue.<span class=\"property\">next</span> = pendingFirst;</span><br><span class=\"line\">      pendingQueue.<span class=\"property\">next</span> = baseFirst;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (current.<span class=\"property\">baseQueue</span> !== baseQueue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Internal invariant that should never happen, but feasibly could in</span></span><br><span class=\"line\">        <span class=\"comment\">// the future if we implement resuming, or some form of that.</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;Internal error: Expected work-in-progress queue to be a clone. &#x27;</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;This is a bug in React.&#x27;</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    current.<span class=\"property\">baseQueue</span> = baseQueue = pendingQueue;</span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (baseQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have a queue to process.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> first = baseQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newState = current.<span class=\"property\">baseState</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseState = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseQueueFirst = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseQueueLast = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> update = first;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> updateLane = update.<span class=\"property\">lane</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"title function_\">isSubsetOfLanes</span>(renderLanes, updateLane)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Priority is insufficient. Skip this update. If this is the first</span></span><br><span class=\"line\">        <span class=\"comment\">// skipped update, the previous update/state is the new base</span></span><br><span class=\"line\">        <span class=\"comment\">// update/state.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">clone</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">          <span class=\"attr\">lane</span>: updateLane,</span><br><span class=\"line\">          <span class=\"attr\">action</span>: update.<span class=\"property\">action</span>,</span><br><span class=\"line\">          <span class=\"attr\">eagerReducer</span>: update.<span class=\"property\">eagerReducer</span>,</span><br><span class=\"line\">          <span class=\"attr\">eagerState</span>: update.<span class=\"property\">eagerState</span>,</span><br><span class=\"line\">          <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newBaseQueueLast === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          newBaseQueueFirst = newBaseQueueLast = clone;</span><br><span class=\"line\">          newBaseState = newState;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          newBaseQueueLast = newBaseQueueLast.<span class=\"property\">next</span> = clone;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Update the remaining priority in the queue.</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Don&#x27;t need to accumulate this. Instead, we can remove</span></span><br><span class=\"line\">        <span class=\"comment\">// renderLanes from the original lanes.</span></span><br><span class=\"line\">        currentlyRenderingFiber.<span class=\"property\">lanes</span> = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">          currentlyRenderingFiber.<span class=\"property\">lanes</span>,</span><br><span class=\"line\">          updateLane,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">markSkippedUpdateLanes</span>(updateLane);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This update does have sufficient priority.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newBaseQueueLast !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"attr\">clone</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This update is going to be committed so we never want uncommit</span></span><br><span class=\"line\">            <span class=\"comment\">// it. Using NoLane works because 0 is a subset of all bitmasks, so</span></span><br><span class=\"line\">            <span class=\"comment\">// this will never be skipped by the check above.</span></span><br><span class=\"line\">            <span class=\"attr\">lane</span>: <span class=\"title class_\">NoLane</span>,</span><br><span class=\"line\">            <span class=\"attr\">action</span>: update.<span class=\"property\">action</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerReducer</span>: update.<span class=\"property\">eagerReducer</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerState</span>: update.<span class=\"property\">eagerState</span>,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">          newBaseQueueLast = newBaseQueueLast.<span class=\"property\">next</span> = clone;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Process this update.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update.<span class=\"property\">eagerReducer</span> === reducer) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If this update was processed eagerly, and its reducer matches the</span></span><br><span class=\"line\">          <span class=\"comment\">// current reducer, we can use the eagerly computed state.</span></span><br><span class=\"line\">          newState = ((update.<span class=\"property\">eagerState</span>: any): S);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">          newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (update !== <span class=\"literal\">null</span> &amp;&amp; update !== first);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBaseQueueLast === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      newBaseState = newState;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newBaseQueueLast.<span class=\"property\">next</span> = (<span class=\"attr\">newBaseQueueFirst</span>: any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">    <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    hook.<span class=\"property\">baseState</span> = newBaseState;</span><br><span class=\"line\">    hook.<span class=\"property\">baseQueue</span> = newBaseQueueLast;</span><br><span class=\"line\">    queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Interleaved updates are stored on a separate queue. We aren&#x27;t going to</span></span><br><span class=\"line\">  <span class=\"comment\">// process them during this render, but we do need to track which lanes</span></span><br><span class=\"line\">  <span class=\"comment\">// are remaining.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastInterleaved = queue.<span class=\"property\">interleaved</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lastInterleaved !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interleaved = lastInterleaved;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interleavedLane = interleaved.<span class=\"property\">lane</span>;</span><br><span class=\"line\">      currentlyRenderingFiber.<span class=\"property\">lanes</span> = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">        currentlyRenderingFiber.<span class=\"property\">lanes</span>,</span><br><span class=\"line\">        interleavedLane,</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"title function_\">markSkippedUpdateLanes</span>(interleavedLane);</span><br><span class=\"line\">      interleaved = ((<span class=\"attr\">interleaved</span>: any).<span class=\"property\">next</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (interleaved !== lastInterleaved);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (baseQueue === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `queue.lanes` is used for entangling transitions. We can set it back to</span></span><br><span class=\"line\">    <span class=\"comment\">// zero once the queue is empty.</span></span><br><span class=\"line\">    queue.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"updateWorkInProgressHook函数\"><a href=\"#updateWorkInProgressHook函数\" class=\"headerlink\" title=\"updateWorkInProgressHook函数\"></a>updateWorkInProgressHook函数</h3><ul>\n<li>updateWorkInProgressHook函数主要判断当前currentHook或workInProgressHook有没有值有的话就取当前的hook的next赋值给workInProgressHook,没有的话就取当前rendering阶段的fiber取缓存的memoizedState,在mountWorkInProgressHook阶段可以看到memoizedState存的就是hook,所以updateWorkInProgressHook函数主要就是取下一个hook。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateWorkInProgressHook</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This function is used both for updates and for re-renders triggered by a</span></span><br><span class=\"line\">  <span class=\"comment\">// render phase update. It assumes there is either a current hook we can</span></span><br><span class=\"line\">  <span class=\"comment\">// clone, or a work-in-progress hook from a previous render pass that we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use as a base. When we reach the end of the base list, we must switch to</span></span><br><span class=\"line\">  <span class=\"comment\">// the dispatcher used for mounts.</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">nextCurrentHook</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">Hook</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = currentlyRenderingFiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      nextCurrentHook = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextCurrentHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    nextCurrentHook = currentHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">nextWorkInProgressHook</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">Hook</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    nextWorkInProgressHook = currentlyRenderingFiber.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextWorkInProgressHook !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// There&#x27;s already a work-in-progress. Reuse it.</span></span><br><span class=\"line\">    workInProgressHook = nextWorkInProgressHook;</span><br><span class=\"line\">    nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">    currentHook = nextCurrentHook;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Clone from the current hook.</span></span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">      nextCurrentHook !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Rendered more hooks than during the previous render.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    currentHook = nextCurrentHook;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">newHook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">memoizedState</span>: currentHook.<span class=\"property\">memoizedState</span>,</span><br><span class=\"line\">      <span class=\"attr\">baseState</span>: currentHook.<span class=\"property\">baseState</span>,</span><br><span class=\"line\">      <span class=\"attr\">baseQueue</span>: currentHook.<span class=\"property\">baseQueue</span>,</span><br><span class=\"line\">      <span class=\"attr\">queue</span>: currentHook.<span class=\"property\">queue</span>,</span><br><span class=\"line\">      <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is the first hook in the list.</span></span><br><span class=\"line\">      currentlyRenderingFiber.<span class=\"property\">memoizedState</span> = workInProgressHook = newHook;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Append to the end of the list.</span></span><br><span class=\"line\">      workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = newHook;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isSubsetOfLanes函数\"><a href=\"#isSubsetOfLanes函数\" class=\"headerlink\" title=\"isSubsetOfLanes函数\"></a>isSubsetOfLanes函数</h3><ul>\n<li>isSubsetOfLanes函数判断set的lane是否包含subset的lane。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>isSubsetOfLanes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSubsetOfLanes</span>(<span class=\"params\">set: Lanes, subset: Lanes | Lane</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (set &amp; subset) === subset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mergeLanes函数\"><a href=\"#mergeLanes函数\" class=\"headerlink\" title=\"mergeLanes函数\"></a>mergeLanes函数</h3><ul>\n<li>mergeLanes把b加到a的lane上。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeLanes</span>(<span class=\"params\">a: Lanes | Lane, b: Lanes | Lane</span>): <span class=\"title class_\">Lanes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a | b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"markSkippedUpdateLanes函数\"><a href=\"#markSkippedUpdateLanes函数\" class=\"headerlink\" title=\"markSkippedUpdateLanes函数\"></a>markSkippedUpdateLanes函数</h3><ul>\n<li>markSkippedUpdateLanes把传入的lane加到workInProgressRootSkippedLanes上。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>markSkippedUpdateLanes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">markSkippedUpdateLanes</span>(<span class=\"params\">lane: Lane | Lanes</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  workInProgressRootSkippedLanes = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">    lane,</span><br><span class=\"line\">    workInProgressRootSkippedLanes,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basicStateReducer函数\"><a href=\"#basicStateReducer函数\" class=\"headerlink\" title=\"basicStateReducer函数\"></a>basicStateReducer函数</h3><ul>\n<li>basicStateReducer函数</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>basicStateReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> basicStateReducer&lt;S&gt;(<span class=\"attr\">state</span>: S, <span class=\"attr\">action</span>: <span class=\"title class_\">BasicStateAction</span>&lt;S&gt;): S &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">action</span>(state) : action;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"is函数\"><a href=\"#is函数\" class=\"headerlink\" title=\"is函数\"></a>is函数</h3><ul>\n<li>is函数判断两个值是否相等 shared&#x2F;objectIs.js</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>objectIs.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">is</span>(<span class=\"params\">x: any, y: any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    (x === y &amp;&amp; (x !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / x === <span class=\"number\">1</span> / y)) || (x !== x &amp;&amp; y !== y) <span class=\"comment\">// eslint-disable-line no-self-compare</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">objectIs</span>: <span class=\"function\">(<span class=\"params\">x: any, y: any</span>) =&gt;</span> boolean =</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">is</span> === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title class_\">Object</span>.<span class=\"property\">is</span> : is;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"markWorkInProgressReceivedUpdate函数\"><a href=\"#markWorkInProgressReceivedUpdate函数\" class=\"headerlink\" title=\"markWorkInProgressReceivedUpdate函数\"></a>markWorkInProgressReceivedUpdate函数</h3><figure class=\"highlight js\"><figcaption><span>markWorkInProgressReceivedUpdate</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  didReceiveUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"rerenderState函数调用rerenderReducer函数。\"><a href=\"#rerenderState函数调用rerenderReducer函数。\" class=\"headerlink\" title=\"rerenderState函数调用rerenderReducer函数。\"></a>rerenderState函数调用rerenderReducer函数。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> rerenderState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">rerenderReducer</span>(basicStateReducer, (<span class=\"attr\">initialState</span>: any));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\"><a href=\"#rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\" class=\"headerlink\" title=\"rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\"></a>rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。</h3><figure class=\"highlight js\"><figcaption><span>rerenderReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> rerenderReducer&lt;S, I, A&gt;(<span class=\"attr\">reducer</span>: <span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S,<span class=\"attr\">initialArg</span>: I,init?: <span class=\"function\"><span class=\"params\">I</span> =&gt;</span> S,): [S, <span class=\"title class_\">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = hook.<span class=\"property\">queue</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    queue !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Should have a queue. This is likely a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  queue.<span class=\"property\">lastRenderedReducer</span> = reducer;</span><br><span class=\"line\">  <span class=\"comment\">// This is a re-render. Apply the new render phase updates to the previous</span></span><br><span class=\"line\">  <span class=\"comment\">// work-in-progress hook.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastRenderPhaseUpdate = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newState = hook.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lastRenderPhaseUpdate !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// The queue doesn&#x27;t persist past this render pass.</span></span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstRenderPhaseUpdate = lastRenderPhaseUpdate.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> update = firstRenderPhaseUpdate;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Process this render phase update. We don&#x27;t have to check the</span></span><br><span class=\"line\">      <span class=\"comment\">// priority because it will always be the same as the current</span></span><br><span class=\"line\">      <span class=\"comment\">// render&#x27;s.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">      newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">      update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (update !== firstRenderPhaseUpdate);</span><br><span class=\"line\">    <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">    <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    <span class=\"comment\">// Don&#x27;t persist the state accumulated from the render phase updates to</span></span><br><span class=\"line\">    <span class=\"comment\">// the base state unless the queue is empty.</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Not sure if this is the desired semantics, but it&#x27;s what we</span></span><br><span class=\"line\">    <span class=\"comment\">// do for gDSFP. I can&#x27;t remember why.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hook.<span class=\"property\">baseQueue</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      hook.<span class=\"property\">baseState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [newState, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hook-Update-UpdateQueue的数据结构。\"><a href=\"#Hook-Update-UpdateQueue的数据结构。\" class=\"headerlink\" title=\"Hook,Update,UpdateQueue的数据结构。\"></a>Hook,Update,UpdateQueue的数据结构。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Hook</span> = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">baseState</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">baseQueue</span>: <span class=\"title class_\">Update</span>&lt;any, any&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">queue</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"title class_\">Hook</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">lane</span>: <span class=\"title class_\">Lane</span>,</span><br><span class=\"line\">  <span class=\"attr\">action</span>: A,</span><br><span class=\"line\">  <span class=\"attr\">eagerReducer</span>: (<span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">eagerState</span>: S | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt;,</span><br><span class=\"line\">|&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">UpdateQueue</span>&lt;S, A&gt; = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">pending</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">interleaved</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lanes</span>: <span class=\"title class_\">Lanes</span>,</span><br><span class=\"line\">  <span class=\"attr\">dispatch</span>: (<span class=\"function\"><span class=\"params\">A</span> =&gt;</span> mixed) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastRenderedReducer</span>: (<span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastRenderedState</span>: S | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>useState过程中的Hook,Update,UpdateQueue的数据结构<br><img src=\"/img/hook.webp\" alt=\"avatar\"></li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"react-ReactHook-js-useState函数\"><a href=\"#react-ReactHook-js-useState函数\" class=\"headerlink\" title=\"react&#x2F;ReactHook.js useState函数\"></a>react&#x2F;ReactHook.js useState函数</h3><ul>\n<li>useState调用resolveDispatcher函数 dispatcher &#x3D; ReactCurrentDispatcher.current。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatcher = <span class=\"title function_\">resolveDispatcher</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dispatcher.<span class=\"title function_\">useState</span>(initialState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveDispatcher</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dispatcher === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27; one of the following reasons:\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;1. You might have mismatching versions of React and the renderer (such as React DOM)\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;2. You might be breaking the Rules of Hooks\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;3. You might have more than one copy of React in the same app\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.&#x27;</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Will result in a null access error if accessed outside render phase. We</span></span><br><span class=\"line\">  <span class=\"comment\">// intentionally don&#x27;t throw our own error because this is in a hot path.</span></span><br><span class=\"line\">  <span class=\"comment\">// Also helps ensure this is inlined.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((<span class=\"attr\">dispatcher</span>: any): <span class=\"title class_\">Dispatcher</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReactFiberHooks-old-js-在不同的阶段对应的ReactCurrentDispatcher-current值不一样\"><a href=\"#ReactFiberHooks-old-js-在不同的阶段对应的ReactCurrentDispatcher-current值不一样\" class=\"headerlink\" title=\"ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样\"></a>ReactFiberHooks.old.js 在不同的阶段对应的ReactCurrentDispatcher.current值不一样</h3><ul>\n<li>react在不同的阶段对应的ReactCurrentDispatcher.current值不一样，主要为mount阶段为 InvalidNestedHooksDispatcherOnMountInDEV，<br>更新阶段为 HooksDispatcherOnUpdateInDEV，渲染阶段 HooksDispatcherOnRerenderInDEV。这三个对象里面含有react的hooks的所有方法。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>dispatcher</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">warnInvalidHookAccess</span>();</span><br><span class=\"line\">      <span class=\"title function_\">mountHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">HooksDispatcherOnUpdateInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">updateHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnUpdateInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">updateState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">HooksDispatcherOnRerenderInDEV</span>：&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  useState&lt;S&gt;(</span><br><span class=\"line\">      <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">    ): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">      currentHookNameInDev = <span class=\"string\">&#x27;useState&#x27;</span>;</span><br><span class=\"line\">      <span class=\"title function_\">updateHookTypesDev</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnRerenderInDEV</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">rerenderState</span>(initialState);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mountState函数\"><a href=\"#mountState函数\" class=\"headerlink\" title=\"mountState函数\"></a>mountState函数</h3><ul>\n<li>mount情况下，mountState函数会调用mountWorkInProgressHook函数对WorkInProgressHook进行赋值，调用dispatchAction函数返回一个dispatch函数暴露给用户修改state值。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>mountState</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mountState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">    initialState = <span class=\"title function_\">initialState</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hook.<span class=\"property\">memoizedState</span> = hook.<span class=\"property\">baseState</span> = initialState;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;S, <span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">interleaved</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lanes</span>: <span class=\"title class_\">NoLanes</span>,</span><br><span class=\"line\">    <span class=\"attr\">dispatch</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastRenderedReducer</span>: basicStateReducer,</span><br><span class=\"line\">    <span class=\"attr\">lastRenderedState</span>: (<span class=\"attr\">initialState</span>: any),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  hook.<span class=\"property\">queue</span> = queue;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;,&gt; = (queue.<span class=\"property\">dispatch</span> = (dispatchAction.<span class=\"title function_\">bind</span>(</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    currentlyRenderingFiber,</span><br><span class=\"line\">    queue,</span><br><span class=\"line\">  ): any));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mountWorkInProgressHook函数\"><a href=\"#mountWorkInProgressHook函数\" class=\"headerlink\" title=\"mountWorkInProgressHook函数\"></a>mountWorkInProgressHook函数</h3><ul>\n<li>mountWorkInProgressHook函数会判断workInProgressHook是否等于null,不是的话说明是新的hook,会将当前hook加到之前workInProgressHook.next上并重写当前workInProgressHook并返回。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>mountWorkInProgressHook</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">hook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">baseQueue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">queue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is the first hook in the list</span></span><br><span class=\"line\">    currentlyRenderingFiber.<span class=\"property\">memoizedState</span> = workInProgressHook = hook;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Append to the end of the list</span></span><br><span class=\"line\">    workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = hook;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatchAction函数\"><a href=\"#dispatchAction函数\" class=\"headerlink\" title=\"dispatchAction函数\"></a>dispatchAction函数</h3><ul>\n<li>dispatchAction方法会调用requestEventTime获取事件的时间,requestUpdateLane方法获取当前的fiber的lane，最后走到调度任务函数scheduleUpdateOnFiber进入调度阶段之后再到Reconcile阶段最后到commit阶段再更新视图。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>dispatchAction</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> dispatchAction&lt;S, A&gt;(<span class=\"attr\">fiber</span>: <span class=\"title class_\">Fiber</span>,<span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;S, A&gt;,<span class=\"attr\">action</span>: A,) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;State updates from the useState() and useReducer() Hooks don&#x27;t support the &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;second callback argument. To execute a side effect after &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;rendering, declare it in the component body with useEffect().&#x27;</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> eventTime = <span class=\"title function_\">requestEventTime</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lane = <span class=\"title function_\">requestUpdateLane</span>(fiber);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">update</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">    lane,</span><br><span class=\"line\">    action,</span><br><span class=\"line\">    <span class=\"attr\">eagerReducer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">eagerState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    fiber === currentlyRenderingFiber ||</span><br><span class=\"line\">    (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a render phase update. Stash it in a lazily-created map of</span></span><br><span class=\"line\">    <span class=\"comment\">// queue -&gt; linked list of updates. After this render pass, we&#x27;ll restart</span></span><br><span class=\"line\">    <span class=\"comment\">// and apply the stashed updates on top of the work-in-progress hook.</span></span><br><span class=\"line\">    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">      update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">      pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isInterleavedUpdate</span>(fiber, lane)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interleaved = queue.<span class=\"property\">interleaved</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (interleaved === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">        <span class=\"comment\">// At the end of the current render, this queue&#x27;s interleaved updates will</span></span><br><span class=\"line\">        <span class=\"comment\">// be transferred to the pending queue.</span></span><br><span class=\"line\">        <span class=\"title function_\">pushInterleavedQueue</span>(queue);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = interleaved.<span class=\"property\">next</span>;</span><br><span class=\"line\">        interleaved.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"property\">interleaved</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pending = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      fiber.<span class=\"property\">lanes</span> === <span class=\"title class_\">NoLanes</span> &amp;&amp;</span><br><span class=\"line\">      (alternate === <span class=\"literal\">null</span> || alternate.<span class=\"property\">lanes</span> === <span class=\"title class_\">NoLanes</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// The queue is currently empty, which means we can eagerly compute the</span></span><br><span class=\"line\">      <span class=\"comment\">// next state before entering the render phase. If the new state is the</span></span><br><span class=\"line\">      <span class=\"comment\">// same as the current state, we may be able to bail out entirely.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastRenderedReducer = queue.<span class=\"property\">lastRenderedReducer</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lastRenderedReducer !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prevDispatcher;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">          prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">          <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">InvalidNestedHooksDispatcherOnUpdateInDEV</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"attr\">currentState</span>: S = (queue.<span class=\"property\">lastRenderedState</span>: any);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> eagerState = <span class=\"title function_\">lastRenderedReducer</span>(currentState, action);</span><br><span class=\"line\">          <span class=\"comment\">// Stash the eagerly computed state, and the reducer used to compute</span></span><br><span class=\"line\">          <span class=\"comment\">// it, on the update object. If the reducer hasn&#x27;t changed by the</span></span><br><span class=\"line\">          <span class=\"comment\">// time we enter the render phase, then the eager state can be used</span></span><br><span class=\"line\">          <span class=\"comment\">// without calling the reducer again.</span></span><br><span class=\"line\">          update.<span class=\"property\">eagerReducer</span> = lastRenderedReducer;</span><br><span class=\"line\">          update.<span class=\"property\">eagerState</span> = eagerState;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title function_\">is</span>(eagerState, currentState)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fast path. We can bail out without scheduling React to re-render.</span></span><br><span class=\"line\">            <span class=\"comment\">// It&#x27;s still possible that we&#x27;ll need to rebase this update later,</span></span><br><span class=\"line\">            <span class=\"comment\">// if the component re-renders for a different reason and by that</span></span><br><span class=\"line\">            <span class=\"comment\">// time the reducer has changed.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Suppress the error. It will throw again in the render phase.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// $FlowExpectedError - jest isn&#x27;t a global, and isn&#x27;t recognized outside of tests</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;undefined&#x27;</span> !== <span class=\"keyword\">typeof</span> jest) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warnIfNotCurrentlyActingUpdatesInDev</span>(fiber);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"title function_\">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isTransitionLane</span>(lane) &amp;&amp; root !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> queueLanes = queue.<span class=\"property\">lanes</span>;</span><br><span class=\"line\">      <span class=\"comment\">// If any entangled lanes are no longer pending on the root, then they</span></span><br><span class=\"line\">      <span class=\"comment\">// must have finished. We can remove them from the shared queue, which</span></span><br><span class=\"line\">      <span class=\"comment\">// represents a superset of the actually pending lanes. In some cases we</span></span><br><span class=\"line\">      <span class=\"comment\">// may entangle more than we need to, but that&#x27;s OK. In fact it&#x27;s worse if</span></span><br><span class=\"line\">      <span class=\"comment\">// we *don&#x27;t* entangle when we should.</span></span><br><span class=\"line\">      queueLanes = <span class=\"title function_\">intersectLanes</span>(queueLanes, root.<span class=\"property\">pendingLanes</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Entangle the new transition lane with the other transition lanes.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> newQueueLanes = <span class=\"title function_\">mergeLanes</span>(queueLanes, lane);</span><br><span class=\"line\">      queue.<span class=\"property\">lanes</span> = newQueueLanes;</span><br><span class=\"line\">      <span class=\"comment\">// Even if queue.lanes already include lane, we don&#x27;t know for certain if</span></span><br><span class=\"line\">      <span class=\"comment\">// the lane finished since the last time we entangled it. So we need to</span></span><br><span class=\"line\">      <span class=\"comment\">// entangle it again, just to be sure.</span></span><br><span class=\"line\">      <span class=\"title function_\">markRootEntangled</span>(root, newQueueLanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableDebugTracing) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fiber.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">DebugTracingMode</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = <span class=\"title function_\">getComponentNameFromFiber</span>(fiber) || <span class=\"string\">&#x27;Unknown&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">logStateUpdateScheduled</span>(name, lane, action);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (enableSchedulingProfiler) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">markStateUpdateScheduled</span>(fiber, lane);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"requestEventTime函数\"><a href=\"#requestEventTime函数\" class=\"headerlink\" title=\"requestEventTime函数\"></a>requestEventTime函数</h3><ul>\n<li>ReactFiberWorkLoop.old.js 中导出requestEventTime函数在里面会调用now函数。当前执行的上下文既不在render阶段也不在commit阶段返回当前当前时间戳，不然返回之前任务的时间戳。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>requestEventTime</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">requestEventTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) !== <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;re inside React, so it&#x27;s fine to read the actual time.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">now</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We&#x27;re not inside React, so we may be in the middle of a browser event.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentEventTime !== <span class=\"title class_\">NoTimestamp</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use the same start time for all updates until we enter React again.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This is the first update since React yielded. Compute a new start time.</span></span><br><span class=\"line\">  currentEventTime = <span class=\"title function_\">now</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"now函数\"><a href=\"#now函数\" class=\"headerlink\" title=\"now函数\"></a>now函数</h3><ul>\n<li>Scheduler模块中的Scheduler.js中导出now函数,会首先判断performance.now浏览器是否兼容不然就调用localDate.now。performance.now是从页面navigationstart开始算精度为毫秒级一个时间差值。而localDate.now是返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasPerformanceNow =</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> performance === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> performance.<span class=\"property\">now</span> === <span class=\"string\">&#x27;function&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasPerformanceNow) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localPerformance = performance;</span><br><span class=\"line\">  getCurrentTime = <span class=\"function\">() =&gt;</span> localPerformance.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> localDate = <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initialTime = localDate.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">  getCurrentTime = <span class=\"function\">() =&gt;</span> localDate.<span class=\"title function_\">now</span>() - initialTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"requestUpdateLane函数\"><a href=\"#requestUpdateLane函数\" class=\"headerlink\" title=\"requestUpdateLane函数\"></a>requestUpdateLane函数</h3><ul>\n<li>requestUpdateLane获取当前fiber的lane</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>ReactFiberWorkLoop.old.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">requestUpdateLane</span>(<span class=\"params\">fiber: Fiber</span>): <span class=\"title class_\">Lane</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Special cases</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mode = fiber.<span class=\"property\">mode</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((mode &amp; <span class=\"title class_\">ConcurrentMode</span>) === <span class=\"title class_\">NoMode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title class_\">SyncLane</span>: <span class=\"title class_\">Lane</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    !deferRenderPhaseUpdateToNextBatch &amp;&amp;</span><br><span class=\"line\">    (executionContext &amp; <span class=\"title class_\">RenderContext</span>) !== <span class=\"title class_\">NoContext</span> &amp;&amp;</span><br><span class=\"line\">    workInProgressRootRenderLanes !== <span class=\"title class_\">NoLanes</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a render phase update. These are not officially supported. The</span></span><br><span class=\"line\">    <span class=\"comment\">// old behavior is to give this the same &quot;thread&quot; (lanes) as</span></span><br><span class=\"line\">    <span class=\"comment\">// whatever is currently rendering. So if you call `setState` on a component</span></span><br><span class=\"line\">    <span class=\"comment\">// that happens later in the same render, it will flush. Ideally, we want to</span></span><br><span class=\"line\">    <span class=\"comment\">// remove the special case and treat them as if they came from an</span></span><br><span class=\"line\">    <span class=\"comment\">// interleaved event. Regardless, this pattern is not officially supported.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior is only a fallback. The flag only exists until we can roll</span></span><br><span class=\"line\">    <span class=\"comment\">// out the setState warning, since existing code might accidentally rely on</span></span><br><span class=\"line\">    <span class=\"comment\">// the current behavior.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">pickArbitraryLane</span>(workInProgressRootRenderLanes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isTransition = <span class=\"title function_\">requestCurrentTransition</span>() !== <span class=\"title class_\">NoTransition</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isTransition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      __DEV__ &amp;&amp;</span><br><span class=\"line\">      warnOnSubscriptionInsideStartTransition &amp;&amp;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentBatchConfig</span>.<span class=\"property\">_updatedFibers</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">ReactCurrentBatchConfig</span>.<span class=\"property\">_updatedFibers</span>.<span class=\"title function_\">add</span>(fiber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// The algorithm for assigning an update to a lane should be stable for all</span></span><br><span class=\"line\">    <span class=\"comment\">// updates at the same priority within the same event. To do this, the</span></span><br><span class=\"line\">    <span class=\"comment\">// inputs to the algorithm must be the same.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// The trick we use is to cache the first of each of these inputs within an</span></span><br><span class=\"line\">    <span class=\"comment\">// event. Then reset the cached values once we can be sure the event is</span></span><br><span class=\"line\">    <span class=\"comment\">// over. Our heuristic for that is whenever we enter a concurrent work loop.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentEventTransitionLane === <span class=\"title class_\">NoLane</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// All transitions within the same event are assigned the same lane.</span></span><br><span class=\"line\">      currentEventTransitionLane = <span class=\"title function_\">claimNextTransitionLane</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentEventTransitionLane;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Updates originating inside certain React methods, like flushSync, have</span></span><br><span class=\"line\">  <span class=\"comment\">// their priority set by tracking it with a context variable.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// The opaque type returned by the host config is internally a lane, so we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use that directly.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this type conversion to the event priority module.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">updateLane</span>: <span class=\"title class_\">Lane</span> = (<span class=\"title function_\">getCurrentUpdatePriority</span>(): any);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (updateLane !== <span class=\"title class_\">NoLane</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> updateLane;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// This update originated outside React. Ask the host environment for an</span></span><br><span class=\"line\">  <span class=\"comment\">// appropriate priority, based on the type of event.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// The opaque type returned by the host config is internally a lane, so we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use that directly.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this type conversion to the event priority module.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">eventLane</span>: <span class=\"title class_\">Lane</span> = (<span class=\"title function_\">getCurrentEventPriority</span>(): any);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eventLane;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"updateState函数\"><a href=\"#updateState函数\" class=\"headerlink\" title=\"updateState函数\"></a>updateState函数</h3><ul>\n<li>updateState函数调用updateReducer函数。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateState</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">updateReducer</span>(basicStateReducer, (<span class=\"attr\">initialState</span>: any));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateReducer函数\"><a href=\"#updateReducer函数\" class=\"headerlink\" title=\"updateReducer函数\"></a>updateReducer函数</h3><ul>\n<li>updateReducer函数则首先会调用updateWorkInProgressHook函数。之后判断经过updateWorkInProgressHook更新后的queue是否有任务，有的话将更新后的hook.queue加到当前的currentHook.baseQueue上。isSubsetOfLanes函数判断render的lane是否包含upadte的lane，如果包含则把updateLane加到正在渲染的currentlyRenderingFiber的lane上，markSkippedUpdateLanes函数则会再把updateLane加到workInProgressRootSkippedLanes上，再就判断reduer获取newState，并挂载到upadte的action上。并且是在do while循环中把upate的队列所有的fiber任务都处理完。判断newState和hook.memoizedState是否不等，不等的话调用markWorkInProgressReceivedUpdate函数更改变量didReceiveUpdate&#x3D;true表示已经更新，执行完循环给hook.memoizedState赋值newState。由于在mountReduce阶段queue.dispatch挂载dispatch方法，所有upadteReducer阶段就直接拿到hook.memoizedState和dispatch，并返回。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateReducer&lt;S, I, A&gt;(<span class=\"attr\">reducer</span>: <span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S,<span class=\"attr\">initialArg</span>: I,init?: <span class=\"function\"><span class=\"params\">I</span> =&gt;</span> S,): [S, <span class=\"title class_\">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = hook.<span class=\"property\">queue</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    queue !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Should have a queue. This is likely a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  queue.<span class=\"property\">lastRenderedReducer</span> = reducer;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">current</span>: <span class=\"title class_\">Hook</span> = (<span class=\"attr\">currentHook</span>: any);</span><br><span class=\"line\">  <span class=\"comment\">// The last rebase update that is NOT part of the base state.</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> baseQueue = current.<span class=\"property\">baseQueue</span>;</span><br><span class=\"line\">  <span class=\"comment\">// The last pending update that hasn&#x27;t been processed yet.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pendingQueue = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pendingQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have new updates that haven&#x27;t been processed yet.</span></span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;ll add them to the base queue.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (baseQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Merge the pending queue and the base queue.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> baseFirst = baseQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pendingFirst = pendingQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">      baseQueue.<span class=\"property\">next</span> = pendingFirst;</span><br><span class=\"line\">      pendingQueue.<span class=\"property\">next</span> = baseFirst;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (current.<span class=\"property\">baseQueue</span> !== baseQueue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Internal invariant that should never happen, but feasibly could in</span></span><br><span class=\"line\">        <span class=\"comment\">// the future if we implement resuming, or some form of that.</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;Internal error: Expected work-in-progress queue to be a clone. &#x27;</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;This is a bug in React.&#x27;</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    current.<span class=\"property\">baseQueue</span> = baseQueue = pendingQueue;</span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (baseQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We have a queue to process.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> first = baseQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newState = current.<span class=\"property\">baseState</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseState = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseQueueFirst = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseQueueLast = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> update = first;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> updateLane = update.<span class=\"property\">lane</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"title function_\">isSubsetOfLanes</span>(renderLanes, updateLane)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Priority is insufficient. Skip this update. If this is the first</span></span><br><span class=\"line\">        <span class=\"comment\">// skipped update, the previous update/state is the new base</span></span><br><span class=\"line\">        <span class=\"comment\">// update/state.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">clone</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">          <span class=\"attr\">lane</span>: updateLane,</span><br><span class=\"line\">          <span class=\"attr\">action</span>: update.<span class=\"property\">action</span>,</span><br><span class=\"line\">          <span class=\"attr\">eagerReducer</span>: update.<span class=\"property\">eagerReducer</span>,</span><br><span class=\"line\">          <span class=\"attr\">eagerState</span>: update.<span class=\"property\">eagerState</span>,</span><br><span class=\"line\">          <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newBaseQueueLast === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          newBaseQueueFirst = newBaseQueueLast = clone;</span><br><span class=\"line\">          newBaseState = newState;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          newBaseQueueLast = newBaseQueueLast.<span class=\"property\">next</span> = clone;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Update the remaining priority in the queue.</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Don&#x27;t need to accumulate this. Instead, we can remove</span></span><br><span class=\"line\">        <span class=\"comment\">// renderLanes from the original lanes.</span></span><br><span class=\"line\">        currentlyRenderingFiber.<span class=\"property\">lanes</span> = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">          currentlyRenderingFiber.<span class=\"property\">lanes</span>,</span><br><span class=\"line\">          updateLane,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">markSkippedUpdateLanes</span>(updateLane);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This update does have sufficient priority.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newBaseQueueLast !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"attr\">clone</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This update is going to be committed so we never want uncommit</span></span><br><span class=\"line\">            <span class=\"comment\">// it. Using NoLane works because 0 is a subset of all bitmasks, so</span></span><br><span class=\"line\">            <span class=\"comment\">// this will never be skipped by the check above.</span></span><br><span class=\"line\">            <span class=\"attr\">lane</span>: <span class=\"title class_\">NoLane</span>,</span><br><span class=\"line\">            <span class=\"attr\">action</span>: update.<span class=\"property\">action</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerReducer</span>: update.<span class=\"property\">eagerReducer</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerState</span>: update.<span class=\"property\">eagerState</span>,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">          newBaseQueueLast = newBaseQueueLast.<span class=\"property\">next</span> = clone;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Process this update.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update.<span class=\"property\">eagerReducer</span> === reducer) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If this update was processed eagerly, and its reducer matches the</span></span><br><span class=\"line\">          <span class=\"comment\">// current reducer, we can use the eagerly computed state.</span></span><br><span class=\"line\">          newState = ((update.<span class=\"property\">eagerState</span>: any): S);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">          newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (update !== <span class=\"literal\">null</span> &amp;&amp; update !== first);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBaseQueueLast === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      newBaseState = newState;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newBaseQueueLast.<span class=\"property\">next</span> = (<span class=\"attr\">newBaseQueueFirst</span>: any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">    <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    hook.<span class=\"property\">baseState</span> = newBaseState;</span><br><span class=\"line\">    hook.<span class=\"property\">baseQueue</span> = newBaseQueueLast;</span><br><span class=\"line\">    queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Interleaved updates are stored on a separate queue. We aren&#x27;t going to</span></span><br><span class=\"line\">  <span class=\"comment\">// process them during this render, but we do need to track which lanes</span></span><br><span class=\"line\">  <span class=\"comment\">// are remaining.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastInterleaved = queue.<span class=\"property\">interleaved</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lastInterleaved !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interleaved = lastInterleaved;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interleavedLane = interleaved.<span class=\"property\">lane</span>;</span><br><span class=\"line\">      currentlyRenderingFiber.<span class=\"property\">lanes</span> = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">        currentlyRenderingFiber.<span class=\"property\">lanes</span>,</span><br><span class=\"line\">        interleavedLane,</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"title function_\">markSkippedUpdateLanes</span>(interleavedLane);</span><br><span class=\"line\">      interleaved = ((<span class=\"attr\">interleaved</span>: any).<span class=\"property\">next</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (interleaved !== lastInterleaved);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (baseQueue === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `queue.lanes` is used for entangling transitions. We can set it back to</span></span><br><span class=\"line\">    <span class=\"comment\">// zero once the queue is empty.</span></span><br><span class=\"line\">    queue.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"updateWorkInProgressHook函数\"><a href=\"#updateWorkInProgressHook函数\" class=\"headerlink\" title=\"updateWorkInProgressHook函数\"></a>updateWorkInProgressHook函数</h3><ul>\n<li>updateWorkInProgressHook函数主要判断当前currentHook或workInProgressHook有没有值有的话就取当前的hook的next赋值给workInProgressHook,没有的话就取当前rendering阶段的fiber取缓存的memoizedState,在mountWorkInProgressHook阶段可以看到memoizedState存的就是hook,所以updateWorkInProgressHook函数主要就是取下一个hook。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>updateWorkInProgressHook</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This function is used both for updates and for re-renders triggered by a</span></span><br><span class=\"line\">  <span class=\"comment\">// render phase update. It assumes there is either a current hook we can</span></span><br><span class=\"line\">  <span class=\"comment\">// clone, or a work-in-progress hook from a previous render pass that we can</span></span><br><span class=\"line\">  <span class=\"comment\">// use as a base. When we reach the end of the base list, we must switch to</span></span><br><span class=\"line\">  <span class=\"comment\">// the dispatcher used for mounts.</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">nextCurrentHook</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">Hook</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = currentlyRenderingFiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      nextCurrentHook = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      nextCurrentHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    nextCurrentHook = currentHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">nextWorkInProgressHook</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">Hook</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    nextWorkInProgressHook = currentlyRenderingFiber.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextWorkInProgressHook !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// There&#x27;s already a work-in-progress. Reuse it.</span></span><br><span class=\"line\">    workInProgressHook = nextWorkInProgressHook;</span><br><span class=\"line\">    nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">    currentHook = nextCurrentHook;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Clone from the current hook.</span></span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">      nextCurrentHook !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Rendered more hooks than during the previous render.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    currentHook = nextCurrentHook;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">newHook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">memoizedState</span>: currentHook.<span class=\"property\">memoizedState</span>,</span><br><span class=\"line\">      <span class=\"attr\">baseState</span>: currentHook.<span class=\"property\">baseState</span>,</span><br><span class=\"line\">      <span class=\"attr\">baseQueue</span>: currentHook.<span class=\"property\">baseQueue</span>,</span><br><span class=\"line\">      <span class=\"attr\">queue</span>: currentHook.<span class=\"property\">queue</span>,</span><br><span class=\"line\">      <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is the first hook in the list.</span></span><br><span class=\"line\">      currentlyRenderingFiber.<span class=\"property\">memoizedState</span> = workInProgressHook = newHook;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Append to the end of the list.</span></span><br><span class=\"line\">      workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = newHook;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"isSubsetOfLanes函数\"><a href=\"#isSubsetOfLanes函数\" class=\"headerlink\" title=\"isSubsetOfLanes函数\"></a>isSubsetOfLanes函数</h3><ul>\n<li>isSubsetOfLanes函数判断set的lane是否包含subset的lane。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>isSubsetOfLanes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSubsetOfLanes</span>(<span class=\"params\">set: Lanes, subset: Lanes | Lane</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (set &amp; subset) === subset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mergeLanes函数\"><a href=\"#mergeLanes函数\" class=\"headerlink\" title=\"mergeLanes函数\"></a>mergeLanes函数</h3><ul>\n<li>mergeLanes把b加到a的lane上。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeLanes</span>(<span class=\"params\">a: Lanes | Lane, b: Lanes | Lane</span>): <span class=\"title class_\">Lanes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a | b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"markSkippedUpdateLanes函数\"><a href=\"#markSkippedUpdateLanes函数\" class=\"headerlink\" title=\"markSkippedUpdateLanes函数\"></a>markSkippedUpdateLanes函数</h3><ul>\n<li>markSkippedUpdateLanes把传入的lane加到workInProgressRootSkippedLanes上。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>markSkippedUpdateLanes</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">markSkippedUpdateLanes</span>(<span class=\"params\">lane: Lane | Lanes</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  workInProgressRootSkippedLanes = <span class=\"title function_\">mergeLanes</span>(</span><br><span class=\"line\">    lane,</span><br><span class=\"line\">    workInProgressRootSkippedLanes,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"basicStateReducer函数\"><a href=\"#basicStateReducer函数\" class=\"headerlink\" title=\"basicStateReducer函数\"></a>basicStateReducer函数</h3><ul>\n<li>basicStateReducer函数</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>basicStateReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> basicStateReducer&lt;S&gt;(<span class=\"attr\">state</span>: S, <span class=\"attr\">action</span>: <span class=\"title class_\">BasicStateAction</span>&lt;S&gt;): S &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">action</span>(state) : action;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"is函数\"><a href=\"#is函数\" class=\"headerlink\" title=\"is函数\"></a>is函数</h3><ul>\n<li>is函数判断两个值是否相等 shared&#x2F;objectIs.js</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>objectIs.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">is</span>(<span class=\"params\">x: any, y: any</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    (x === y &amp;&amp; (x !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / x === <span class=\"number\">1</span> / y)) || (x !== x &amp;&amp; y !== y) <span class=\"comment\">// eslint-disable-line no-self-compare</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">objectIs</span>: <span class=\"function\">(<span class=\"params\">x: any, y: any</span>) =&gt;</span> boolean =</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">is</span> === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title class_\">Object</span>.<span class=\"property\">is</span> : is;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"markWorkInProgressReceivedUpdate函数\"><a href=\"#markWorkInProgressReceivedUpdate函数\" class=\"headerlink\" title=\"markWorkInProgressReceivedUpdate函数\"></a>markWorkInProgressReceivedUpdate函数</h3><figure class=\"highlight js\"><figcaption><span>markWorkInProgressReceivedUpdate</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  didReceiveUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"rerenderState函数调用rerenderReducer函数。\"><a href=\"#rerenderState函数调用rerenderReducer函数。\" class=\"headerlink\" title=\"rerenderState函数调用rerenderReducer函数。\"></a>rerenderState函数调用rerenderReducer函数。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> rerenderState&lt;S&gt;(</span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">rerenderReducer</span>(basicStateReducer, (<span class=\"attr\">initialState</span>: any));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\"><a href=\"#rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\" class=\"headerlink\" title=\"rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。\"></a>rerenderReducer函数，也会调用updateWorkInProgressHook函数获取最新的hook，然后while循环获取最新的newState。</h3><figure class=\"highlight js\"><figcaption><span>rerenderReducer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> rerenderReducer&lt;S, I, A&gt;(<span class=\"attr\">reducer</span>: <span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S,<span class=\"attr\">initialArg</span>: I,init?: <span class=\"function\"><span class=\"params\">I</span> =&gt;</span> S,): [S, <span class=\"title class_\">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = hook.<span class=\"property\">queue</span>;</span><br><span class=\"line\">  <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">    queue !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Should have a queue. This is likely a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  queue.<span class=\"property\">lastRenderedReducer</span> = reducer;</span><br><span class=\"line\">  <span class=\"comment\">// This is a re-render. Apply the new render phase updates to the previous</span></span><br><span class=\"line\">  <span class=\"comment\">// work-in-progress hook.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lastRenderPhaseUpdate = queue.<span class=\"property\">pending</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newState = hook.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lastRenderPhaseUpdate !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// The queue doesn&#x27;t persist past this render pass.</span></span><br><span class=\"line\">    queue.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstRenderPhaseUpdate = lastRenderPhaseUpdate.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> update = firstRenderPhaseUpdate;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Process this render phase update. We don&#x27;t have to check the</span></span><br><span class=\"line\">      <span class=\"comment\">// priority because it will always be the same as the current</span></span><br><span class=\"line\">      <span class=\"comment\">// render&#x27;s.</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">      newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">      update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (update !== firstRenderPhaseUpdate);</span><br><span class=\"line\">    <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">    <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    <span class=\"comment\">// Don&#x27;t persist the state accumulated from the render phase updates to</span></span><br><span class=\"line\">    <span class=\"comment\">// the base state unless the queue is empty.</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Not sure if this is the desired semantics, but it&#x27;s what we</span></span><br><span class=\"line\">    <span class=\"comment\">// do for gDSFP. I can&#x27;t remember why.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hook.<span class=\"property\">baseQueue</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      hook.<span class=\"property\">baseState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [newState, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hook-Update-UpdateQueue的数据结构。\"><a href=\"#Hook-Update-UpdateQueue的数据结构。\" class=\"headerlink\" title=\"Hook,Update,UpdateQueue的数据结构。\"></a>Hook,Update,UpdateQueue的数据结构。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Hook</span> = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">baseState</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">baseQueue</span>: <span class=\"title class_\">Update</span>&lt;any, any&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">queue</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"title class_\">Hook</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">lane</span>: <span class=\"title class_\">Lane</span>,</span><br><span class=\"line\">  <span class=\"attr\">action</span>: A,</span><br><span class=\"line\">  <span class=\"attr\">eagerReducer</span>: (<span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">eagerState</span>: S | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt;,</span><br><span class=\"line\">|&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">UpdateQueue</span>&lt;S, A&gt; = &#123;|</span><br><span class=\"line\">  <span class=\"attr\">pending</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">interleaved</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lanes</span>: <span class=\"title class_\">Lanes</span>,</span><br><span class=\"line\">  <span class=\"attr\">dispatch</span>: (<span class=\"function\"><span class=\"params\">A</span> =&gt;</span> mixed) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastRenderedReducer</span>: (<span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S) | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastRenderedState</span>: S | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>useState过程中的Hook,Update,UpdateQueue的数据结构<br><img src=\"/img/hook.webp\" alt=\"avatar\"></li>\n</ul>\n"},{"title":"rush+pnpm","cover":"/img/rush.webp","_content":"\n### rush简介\n\n- Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo. If you're looking to break up your giant application into smaller pieces, and you already realized why it doesn't work to put each package in a separate repo... then Rush is for you!\n\n### rush特点\n\n- 1.Ready for large repos\n- 2.Designed for large teams\n- 3.No phantom dependencies!\n- 4.No NPM doppelgangers!\n- 5.Easy to administer\n- 6.Turnkey solution\n- 7.Open model\n\n### rush使用\n\n- 1.在终端使用npm安装rush和pnpm\n```shell\n    npm i -g @microsoft/rush\n    npm i -g pnpm\n```\n\n- 2.rush init创建项目\n   - 此时会生成一个rush.json文件，在vscode打开可能会爆红，如果爆红需要点击右下脚的JSON把文件类型设置为JSON with Comments\n\n![avatar](/img/rush1.webp)\n![avatar](/img/rush2.webp)\n![avatar](/img/rush3.webp)\n\n- 3.在rush项目根目录创建apps文件夹,并使用create-react-app创建react项目,并在rush.json的projects中进行配置,配置完成后运行rush update下载更新依赖\n\n```shell\nnpx create-react-app manage-package  --template  typescript \n```\n```json\n    {\n      \"packageName\": \"manage-package\",\n      \"projectFolder\": \"apps/manage-package\"\n    },\n```\n\n- 4.cd 进入apps/manage-package rushx start运行react项目\n\n- 5.cd .. 回到根目录新建libs文件夹,cd进入libs文件夹,使用tsdx创建单独的react组件项目,并且配置rush.json的projects,packageName要和package.json中的name要相同将组件的package.json的name也改为@shared/onecomponent,并修改下onecomponent/src/index.t组件代码,此时div里的内容为onecomponent\n\n\n```ts\n    import * as React from 'react';\n    // Delete me\n    export const Thing = () => {\n    return <div>onecomponent</div>;\n    };\n``` \n\n```shell\n    npx tsdx create onecomponent\n```\n\n```json\n    {\n      \"packageName\": \"@shared/onecomponent\",\n      \"projectFolder\": \"libs/onecomponent\"\n    }\n```\n\n  \n\n\n- 6.创建完单个组件后cd 回到根目录执行 rush update --purge\n\n- 7.再次进入之前的react项目在项目文件夹执行rush add,在rush add之后rush build 或者 rush rebuild。\n\n```shell\n    rush add --package @shared/onecomponent\n```\n\n- 8.最后在manage-package项目中的App.ts引入和使用@shared/onecomponent\n\n```ts\n    import React from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    import { Thing } from '@shared/onecomponent';\n    function App() {\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n            </p>\n            <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >\n            Learn React\n            </a>\n            <Thing />\n        </header>\n        </div>\n    );\n    }\n```\n![avatar](/img/rush5.webp)\n- 9.可以看到组件在前端项目中已经可以正常使用\n","source":"_posts/rush-pnpm.md","raw":"---\ntitle: rush+pnpm\ncover: /img/rush.webp\n---\n\n### rush简介\n\n- Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo. If you're looking to break up your giant application into smaller pieces, and you already realized why it doesn't work to put each package in a separate repo... then Rush is for you!\n\n### rush特点\n\n- 1.Ready for large repos\n- 2.Designed for large teams\n- 3.No phantom dependencies!\n- 4.No NPM doppelgangers!\n- 5.Easy to administer\n- 6.Turnkey solution\n- 7.Open model\n\n### rush使用\n\n- 1.在终端使用npm安装rush和pnpm\n```shell\n    npm i -g @microsoft/rush\n    npm i -g pnpm\n```\n\n- 2.rush init创建项目\n   - 此时会生成一个rush.json文件，在vscode打开可能会爆红，如果爆红需要点击右下脚的JSON把文件类型设置为JSON with Comments\n\n![avatar](/img/rush1.webp)\n![avatar](/img/rush2.webp)\n![avatar](/img/rush3.webp)\n\n- 3.在rush项目根目录创建apps文件夹,并使用create-react-app创建react项目,并在rush.json的projects中进行配置,配置完成后运行rush update下载更新依赖\n\n```shell\nnpx create-react-app manage-package  --template  typescript \n```\n```json\n    {\n      \"packageName\": \"manage-package\",\n      \"projectFolder\": \"apps/manage-package\"\n    },\n```\n\n- 4.cd 进入apps/manage-package rushx start运行react项目\n\n- 5.cd .. 回到根目录新建libs文件夹,cd进入libs文件夹,使用tsdx创建单独的react组件项目,并且配置rush.json的projects,packageName要和package.json中的name要相同将组件的package.json的name也改为@shared/onecomponent,并修改下onecomponent/src/index.t组件代码,此时div里的内容为onecomponent\n\n\n```ts\n    import * as React from 'react';\n    // Delete me\n    export const Thing = () => {\n    return <div>onecomponent</div>;\n    };\n``` \n\n```shell\n    npx tsdx create onecomponent\n```\n\n```json\n    {\n      \"packageName\": \"@shared/onecomponent\",\n      \"projectFolder\": \"libs/onecomponent\"\n    }\n```\n\n  \n\n\n- 6.创建完单个组件后cd 回到根目录执行 rush update --purge\n\n- 7.再次进入之前的react项目在项目文件夹执行rush add,在rush add之后rush build 或者 rush rebuild。\n\n```shell\n    rush add --package @shared/onecomponent\n```\n\n- 8.最后在manage-package项目中的App.ts引入和使用@shared/onecomponent\n\n```ts\n    import React from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    import { Thing } from '@shared/onecomponent';\n    function App() {\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n            </p>\n            <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >\n            Learn React\n            </a>\n            <Thing />\n        </header>\n        </div>\n    );\n    }\n```\n![avatar](/img/rush5.webp)\n- 9.可以看到组件在前端项目中已经可以正常使用\n","slug":"rush-pnpm","published":1,"date":"2021-09-08T01:18:57.234Z","updated":"2021-09-08T02:56:44.791Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40b000842u75bwd2c88","content":"<h3 id=\"rush简介\"><a href=\"#rush简介\" class=\"headerlink\" title=\"rush简介\"></a>rush简介</h3><ul>\n<li>Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo. If you’re looking to break up your giant application into smaller pieces, and you already realized why it doesn’t work to put each package in a separate repo… then Rush is for you!</li>\n</ul>\n<h3 id=\"rush特点\"><a href=\"#rush特点\" class=\"headerlink\" title=\"rush特点\"></a>rush特点</h3><ul>\n<li>1.Ready for large repos</li>\n<li>2.Designed for large teams</li>\n<li>3.No phantom dependencies!</li>\n<li>4.No NPM doppelgangers!</li>\n<li>5.Easy to administer</li>\n<li>6.Turnkey solution</li>\n<li>7.Open model</li>\n</ul>\n<h3 id=\"rush使用\"><a href=\"#rush使用\" class=\"headerlink\" title=\"rush使用\"></a>rush使用</h3><ul>\n<li><p>1.在终端使用npm安装rush和pnpm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @microsoft/rush</span><br><span class=\"line\">npm i -g pnpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.rush init创建项目</p>\n<ul>\n<li>此时会生成一个rush.json文件，在vscode打开可能会爆红，如果爆红需要点击右下脚的JSON把文件类型设置为JSON with Comments</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/rush1.webp\" alt=\"avatar\"><br><img src=\"/img/rush2.webp\" alt=\"avatar\"><br><img src=\"/img/rush3.webp\" alt=\"avatar\"></p>\n<ul>\n<li>3.在rush项目根目录创建apps文件夹,并使用create-react-app创建react项目,并在rush.json的projects中进行配置,配置完成后运行rush update下载更新依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app manage-package  --template  typescript </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;packageName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;manage-package&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;projectFolder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/manage-package&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>4.cd 进入apps&#x2F;manage-package rushx start运行react项目</p>\n</li>\n<li><p>5.cd .. 回到根目录新建libs文件夹,cd进入libs文件夹,使用tsdx创建单独的react组件项目,并且配置rush.json的projects,packageName要和package.json中的name要相同将组件的package.json的name也改为@shared&#x2F;onecomponent,并修改下onecomponent&#x2F;src&#x2F;index.t组件代码,此时div里的内容为onecomponent</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Delete me</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Thing</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>onecomponent<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tsdx create onecomponent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;packageName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@shared/onecomponent&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;projectFolder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;libs/onecomponent&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>6.创建完单个组件后cd 回到根目录执行 rush update –purge</p>\n</li>\n<li><p>7.再次进入之前的react项目在项目文件夹执行rush add,在rush add之后rush build 或者 rush rebuild。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rush add --package @shared/onecomponent</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.最后在manage-package项目中的App.ts引入和使用@shared&#x2F;onecomponent</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./logo.svg&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Thing</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@shared/onecomponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;logo&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-logo&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Edit <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>src/App.tsx<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span> and save to reload.</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">a</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-link&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Learn React</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Thing</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/rush5.webp\" alt=\"avatar\"></p>\n<ul>\n<li>9.可以看到组件在前端项目中已经可以正常使用</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"rush简介\"><a href=\"#rush简介\" class=\"headerlink\" title=\"rush简介\"></a>rush简介</h3><ul>\n<li>Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo. If you’re looking to break up your giant application into smaller pieces, and you already realized why it doesn’t work to put each package in a separate repo… then Rush is for you!</li>\n</ul>\n<h3 id=\"rush特点\"><a href=\"#rush特点\" class=\"headerlink\" title=\"rush特点\"></a>rush特点</h3><ul>\n<li>1.Ready for large repos</li>\n<li>2.Designed for large teams</li>\n<li>3.No phantom dependencies!</li>\n<li>4.No NPM doppelgangers!</li>\n<li>5.Easy to administer</li>\n<li>6.Turnkey solution</li>\n<li>7.Open model</li>\n</ul>\n<h3 id=\"rush使用\"><a href=\"#rush使用\" class=\"headerlink\" title=\"rush使用\"></a>rush使用</h3><ul>\n<li><p>1.在终端使用npm安装rush和pnpm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @microsoft/rush</span><br><span class=\"line\">npm i -g pnpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.rush init创建项目</p>\n<ul>\n<li>此时会生成一个rush.json文件，在vscode打开可能会爆红，如果爆红需要点击右下脚的JSON把文件类型设置为JSON with Comments</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/rush1.webp\" alt=\"avatar\"><br><img src=\"/img/rush2.webp\" alt=\"avatar\"><br><img src=\"/img/rush3.webp\" alt=\"avatar\"></p>\n<ul>\n<li>3.在rush项目根目录创建apps文件夹,并使用create-react-app创建react项目,并在rush.json的projects中进行配置,配置完成后运行rush update下载更新依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app manage-package  --template  typescript </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;packageName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;manage-package&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;projectFolder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/manage-package&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>4.cd 进入apps&#x2F;manage-package rushx start运行react项目</p>\n</li>\n<li><p>5.cd .. 回到根目录新建libs文件夹,cd进入libs文件夹,使用tsdx创建单独的react组件项目,并且配置rush.json的projects,packageName要和package.json中的name要相同将组件的package.json的name也改为@shared&#x2F;onecomponent,并修改下onecomponent&#x2F;src&#x2F;index.t组件代码,此时div里的内容为onecomponent</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Delete me</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Thing</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>onecomponent<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tsdx create onecomponent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;packageName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@shared/onecomponent&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;projectFolder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;libs/onecomponent&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>6.创建完单个组件后cd 回到根目录执行 rush update –purge</p>\n</li>\n<li><p>7.再次进入之前的react项目在项目文件夹执行rush add,在rush add之后rush build 或者 rush rebuild。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rush add --package @shared/onecomponent</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.最后在manage-package项目中的App.ts引入和使用@shared&#x2F;onecomponent</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./logo.svg&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Thing</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@shared/onecomponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;logo&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-logo&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Edit <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>src/App.tsx<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span> and save to reload.</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">a</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-link&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Learn React</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Thing</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/rush5.webp\" alt=\"avatar\"></p>\n<ul>\n<li>9.可以看到组件在前端项目中已经可以正常使用</li>\n</ul>\n"},{"title":"如何在gatsby项目中本地运行时不请求strapi来提示项目启动速度","cover":"/img/strapi.png","_content":"\n- gatsby-config-ts 配置文件中注释 gatsby-source-strapi 插件配置\n\n```ts\n// {\n//   resolve: `gatsby-source-strapi`,\n//   options: strapiConfig,\n// },\n```\n\n- 在使用 strapi 的文件中注释对应从 strapi 服务获取数据的代码\n\n```ts\n// const result = useStaticQuery<{\n//   allStrapiAvicaBlogArt: AvicaBlogArt\n// }>(graphql`\n//   {\n//     allStrapiAvicaBlogArt(\n//       filter: { recommend: { eq: true } }\n//       sort: { fields: publish_time, order: DESC }\n//       limit: 9\n//     ) {\n//       nodes {\n//         slug\n//         title\n//         recommend\n//         categories {\n//           seo {\n//             title\n//             description\n//           }\n//           arts {\n//             brief\n//             slug\n//             title\n//             reading_time\n//           }\n//           slug\n//           name\n//         }\n//         cover {\n//           ext\n//           url\n//           width\n//           height\n//         }\n//         publish_time\n//       }\n//     }\n//   }\n// `)\n// const blogs: Blog[] = result?.allStrapiAvicaBlogArt?.nodes || []\n```\n\n- m1 mac 请求 strapi 服务情况下项目启动时间大致在 4 分钟多\n\n![avatar](/img/before.png)\n\n- m1 mac 不请求 strapi 服务情况下项目启动时间大致在 20s 左右\n\n![avatar](/img/after.png)\n","source":"_posts/strapi.md","raw":"---\ntitle: 如何在gatsby项目中本地运行时不请求strapi来提示项目启动速度\ncover: /img/strapi.png\n---\n\n- gatsby-config-ts 配置文件中注释 gatsby-source-strapi 插件配置\n\n```ts\n// {\n//   resolve: `gatsby-source-strapi`,\n//   options: strapiConfig,\n// },\n```\n\n- 在使用 strapi 的文件中注释对应从 strapi 服务获取数据的代码\n\n```ts\n// const result = useStaticQuery<{\n//   allStrapiAvicaBlogArt: AvicaBlogArt\n// }>(graphql`\n//   {\n//     allStrapiAvicaBlogArt(\n//       filter: { recommend: { eq: true } }\n//       sort: { fields: publish_time, order: DESC }\n//       limit: 9\n//     ) {\n//       nodes {\n//         slug\n//         title\n//         recommend\n//         categories {\n//           seo {\n//             title\n//             description\n//           }\n//           arts {\n//             brief\n//             slug\n//             title\n//             reading_time\n//           }\n//           slug\n//           name\n//         }\n//         cover {\n//           ext\n//           url\n//           width\n//           height\n//         }\n//         publish_time\n//       }\n//     }\n//   }\n// `)\n// const blogs: Blog[] = result?.allStrapiAvicaBlogArt?.nodes || []\n```\n\n- m1 mac 请求 strapi 服务情况下项目启动时间大致在 4 分钟多\n\n![avatar](/img/before.png)\n\n- m1 mac 不请求 strapi 服务情况下项目启动时间大致在 20s 左右\n\n![avatar](/img/after.png)\n","slug":"strapi","published":1,"date":"2024-09-03T02:33:51.496Z","updated":"2024-09-03T02:45:56.666Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40b000942u7fzp48ltj","content":"<ul>\n<li>gatsby-config-ts 配置文件中注释 gatsby-source-strapi 插件配置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve: `gatsby-source-strapi`,</span></span><br><span class=\"line\"><span class=\"comment\">//   options: strapiConfig,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 strapi 的文件中注释对应从 strapi 服务获取数据的代码</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const result = useStaticQuery&lt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   allStrapiAvicaBlogArt: AvicaBlogArt</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;&gt;(graphql`</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     allStrapiAvicaBlogArt(</span></span><br><span class=\"line\"><span class=\"comment\">//       filter: &#123; recommend: &#123; eq: true &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       sort: &#123; fields: publish_time, order: DESC &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       limit: 9</span></span><br><span class=\"line\"><span class=\"comment\">//     ) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       nodes &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         slug</span></span><br><span class=\"line\"><span class=\"comment\">//         title</span></span><br><span class=\"line\"><span class=\"comment\">//         recommend</span></span><br><span class=\"line\"><span class=\"comment\">//         categories &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           seo &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             title</span></span><br><span class=\"line\"><span class=\"comment\">//             description</span></span><br><span class=\"line\"><span class=\"comment\">//           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//           arts &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             brief</span></span><br><span class=\"line\"><span class=\"comment\">//             slug</span></span><br><span class=\"line\"><span class=\"comment\">//             title</span></span><br><span class=\"line\"><span class=\"comment\">//             reading_time</span></span><br><span class=\"line\"><span class=\"comment\">//           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//           slug</span></span><br><span class=\"line\"><span class=\"comment\">//           name</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         cover &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           ext</span></span><br><span class=\"line\"><span class=\"comment\">//           url</span></span><br><span class=\"line\"><span class=\"comment\">//           width</span></span><br><span class=\"line\"><span class=\"comment\">//           height</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         publish_time</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// `)</span></span><br><span class=\"line\"><span class=\"comment\">// const blogs: Blog[] = result?.allStrapiAvicaBlogArt?.nodes || []</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>m1 mac 请求 strapi 服务情况下项目启动时间大致在 4 分钟多</li>\n</ul>\n<p><img src=\"/img/before.png\" alt=\"avatar\"></p>\n<ul>\n<li>m1 mac 不请求 strapi 服务情况下项目启动时间大致在 20s 左右</li>\n</ul>\n<p><img src=\"/img/after.png\" alt=\"avatar\"></p>\n","cover_type":"img","excerpt":"","more":"<ul>\n<li>gatsby-config-ts 配置文件中注释 gatsby-source-strapi 插件配置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve: `gatsby-source-strapi`,</span></span><br><span class=\"line\"><span class=\"comment\">//   options: strapiConfig,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 strapi 的文件中注释对应从 strapi 服务获取数据的代码</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const result = useStaticQuery&lt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   allStrapiAvicaBlogArt: AvicaBlogArt</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;&gt;(graphql`</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     allStrapiAvicaBlogArt(</span></span><br><span class=\"line\"><span class=\"comment\">//       filter: &#123; recommend: &#123; eq: true &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       sort: &#123; fields: publish_time, order: DESC &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//       limit: 9</span></span><br><span class=\"line\"><span class=\"comment\">//     ) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       nodes &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         slug</span></span><br><span class=\"line\"><span class=\"comment\">//         title</span></span><br><span class=\"line\"><span class=\"comment\">//         recommend</span></span><br><span class=\"line\"><span class=\"comment\">//         categories &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           seo &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             title</span></span><br><span class=\"line\"><span class=\"comment\">//             description</span></span><br><span class=\"line\"><span class=\"comment\">//           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//           arts &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             brief</span></span><br><span class=\"line\"><span class=\"comment\">//             slug</span></span><br><span class=\"line\"><span class=\"comment\">//             title</span></span><br><span class=\"line\"><span class=\"comment\">//             reading_time</span></span><br><span class=\"line\"><span class=\"comment\">//           &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//           slug</span></span><br><span class=\"line\"><span class=\"comment\">//           name</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         cover &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//           ext</span></span><br><span class=\"line\"><span class=\"comment\">//           url</span></span><br><span class=\"line\"><span class=\"comment\">//           width</span></span><br><span class=\"line\"><span class=\"comment\">//           height</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         publish_time</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// `)</span></span><br><span class=\"line\"><span class=\"comment\">// const blogs: Blog[] = result?.allStrapiAvicaBlogArt?.nodes || []</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>m1 mac 请求 strapi 服务情况下项目启动时间大致在 4 分钟多</li>\n</ul>\n<p><img src=\"/img/before.png\" alt=\"avatar\"></p>\n<ul>\n<li>m1 mac 不请求 strapi 服务情况下项目启动时间大致在 20s 左右</li>\n</ul>\n<p><img src=\"/img/after.png\" alt=\"avatar\"></p>\n"},{"title":"手写redux","cover":"/img/redux.webp","_content":"\n### redux简介 一个可以用于多端的状态管理框架\n\n- Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native).\n\n\n### redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters\n\n\n- createStore函数可接收2个参数reducer,enhancer配置对象.由于此文章实现redux主要功能，也为了方便理解，所有对applyMiddleware函数的执行结果作为第三个参数传入。\n\n- combindreducers执行传入reduers一个reducer的对象，返回一个总的reducer函数，在总的reducer函数返回新的state。\n\n- applyMiddleware的原理主要是重写store.dispatch函数，用洋葱模式的形式将每个中间件作为next参数传入一层一层的包裹执行。\n\n- bindActionCreaters对dispacth做一层封装，可以执行异步操作等，拿到数据后出发dispatch改变数据。\n\n\n### 手写代码\n\n```js\nfunction createStore(reducer,state = {},rewriteCreateStore){\n    if(rewriteCreateStore){\n        createStore = rewriteCreateStore(createStore);\n        return createStore(reducer,state)\n    }\n    state = state;\n    listeners = [];    // 用于存放订阅的函数\n    function subscribe(listener){\n        if(typeof listener === 'function'){\n            listeners.push(listener)\n        }else{\n            throw new Error (`${listener} is not function`)\n        }\n        return function(listener){      // 返回函数用于取消订阅的事件   \n            const index = listeners.indexOf(listener);\n            if(index > -1){\n                listeners.splice(index,1)\n            }\n        }\n    }\n    function getState(){\n        return state\n    }\n    function dispatch(action){\n        state = reducer(state,action);\n        listeners.forEach((listener) => {\n            listener()\n        })\n    }\n    dispatch({type:Symbol()})   //用于初始化state 防止直接getState时 没有值\n    return {\n        getState,\n        subscribe,\n        dispatch\n    }\n}\n\nfunction combindReducers(reducers){\n    const newState = {};\n    return function(state,action){\n        Object.keys(reducers).forEach(key => {\n            const reducer = reducers[key];\n            const prevState = state[key];\n            const nextState = reducer(prevState,action)\n            newState[key] = nextState\n        })\n        return newState\n    }\n}\n\nfunction counterReducer (state = { count:0 },action){\n    switch(action.type){\n        case 'INCREMENT':\n            return{\n                ...state,\n                count:state.count + 1,\n            }\n        case 'DECREMENT':\n            return{\n                ...state,\n                count:state.count - 1,\n            }\n        default:\n            return state        \n    }\n}\n\nfunction infoReducer (state = {name:'有个名字',description:'一个称谓'},action){\n    switch(action.type){\n        case 'SET_NAME':\n            return {\n                ...state,\n                name:action.payload.name\n            }\n        case 'SET_DESCRIPTION':\n            return {\n                ...state,\n                description:action.payload.description\n            }  \n        default:\n            return state      \n    }\n}\n\nconst reducer = combindReducers({\n    counter:counterReducer,\n    info:infoReducer\n})\n\nfunction compose(funcs){\n    if(funcs.length === 0)return  (...arg) => arg;\n    if(funcs.length === 1)return funcs[0];\n    return funcs.reduce((acc,cur) => (...arg) => acc(cur(...arg)))\n}\n\nfunction applyMiddleware(...middlewares){\n    return function(createStore){\n        return function(reducer,state){\n            const store = createStore(reducer,state);\n            const chain = middlewares.map(middleware => middleware(store));\n            const dispatch = compose(chain)(store.dispatch)\n            return {\n                ...store,\n                dispatch\n            }\n        }\n    }\n}\n\nfunction expectionMiddleware(store){\n    return function (next){\n        return function(action){\n            try {\n                console.log('caghterror')\n                next(action)\n            }catch(e){\n                console.log(e)\n            }   \n        }\n    }\n}\n\nfunction loggerMiddleware(store){\n    return function(next){\n        return function (action){\n            console.log('logger')\n            next(action)\n        }\n    }\n}\n\n\nfunction timeMiddleware(store){\n    return function(next){\n        return function (action){\n            console.log(new Date().getTime(),'🀄️')\n            next(action)\n        }\n    }\n}\n\nconst rewriteCreateStore = applyMiddleware(expectionMiddleware,timeMiddleware,loggerMiddleware)\n\nconst store = createStore(reducer,{},rewriteCreateStore)\n\nstore.subscribe(()=>{\n    console.log(store.getState(),'🌈')\n})\n\nfunction increment (payload){\n    return {\n        type:'INCREMENT'\n    }\n}\n\nfunction setName (payload){\n    return {\n        type:'SET_NAME',\n        payload\n    }\n}\n\n\nfunction bindActionCreators(actions,dispatch){\n    const newActions = {}\n    Object.keys(actions).forEach(key => {\n        newActions[key] = (...arg) => {\n            dispatch(actions[key].apply(this,...arg))\n        }\n    })\n    return newActions\n}\n\nconst actions = bindActionCreators({\n    increment,setName\n},store.dispatch)\n\nstore.dispatch({type:'INCREMENT'})\nactions.setName({name:'故事的小黄花'})\n\n```\n\n![avatar](/img/redux-res.webp)\n\n- 可以看到执行结果中加入的监听错误和时间以及日志的中间件的执行，以及store直接dispatch和通过actions函数执行都改变了state","source":"_posts/redux.md","raw":"---\ntitle: 手写redux\ncover: /img/redux.webp\n---\n\n### redux简介 一个可以用于多端的状态管理框架\n\n- Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native).\n\n\n### redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters\n\n\n- createStore函数可接收2个参数reducer,enhancer配置对象.由于此文章实现redux主要功能，也为了方便理解，所有对applyMiddleware函数的执行结果作为第三个参数传入。\n\n- combindreducers执行传入reduers一个reducer的对象，返回一个总的reducer函数，在总的reducer函数返回新的state。\n\n- applyMiddleware的原理主要是重写store.dispatch函数，用洋葱模式的形式将每个中间件作为next参数传入一层一层的包裹执行。\n\n- bindActionCreaters对dispacth做一层封装，可以执行异步操作等，拿到数据后出发dispatch改变数据。\n\n\n### 手写代码\n\n```js\nfunction createStore(reducer,state = {},rewriteCreateStore){\n    if(rewriteCreateStore){\n        createStore = rewriteCreateStore(createStore);\n        return createStore(reducer,state)\n    }\n    state = state;\n    listeners = [];    // 用于存放订阅的函数\n    function subscribe(listener){\n        if(typeof listener === 'function'){\n            listeners.push(listener)\n        }else{\n            throw new Error (`${listener} is not function`)\n        }\n        return function(listener){      // 返回函数用于取消订阅的事件   \n            const index = listeners.indexOf(listener);\n            if(index > -1){\n                listeners.splice(index,1)\n            }\n        }\n    }\n    function getState(){\n        return state\n    }\n    function dispatch(action){\n        state = reducer(state,action);\n        listeners.forEach((listener) => {\n            listener()\n        })\n    }\n    dispatch({type:Symbol()})   //用于初始化state 防止直接getState时 没有值\n    return {\n        getState,\n        subscribe,\n        dispatch\n    }\n}\n\nfunction combindReducers(reducers){\n    const newState = {};\n    return function(state,action){\n        Object.keys(reducers).forEach(key => {\n            const reducer = reducers[key];\n            const prevState = state[key];\n            const nextState = reducer(prevState,action)\n            newState[key] = nextState\n        })\n        return newState\n    }\n}\n\nfunction counterReducer (state = { count:0 },action){\n    switch(action.type){\n        case 'INCREMENT':\n            return{\n                ...state,\n                count:state.count + 1,\n            }\n        case 'DECREMENT':\n            return{\n                ...state,\n                count:state.count - 1,\n            }\n        default:\n            return state        \n    }\n}\n\nfunction infoReducer (state = {name:'有个名字',description:'一个称谓'},action){\n    switch(action.type){\n        case 'SET_NAME':\n            return {\n                ...state,\n                name:action.payload.name\n            }\n        case 'SET_DESCRIPTION':\n            return {\n                ...state,\n                description:action.payload.description\n            }  \n        default:\n            return state      \n    }\n}\n\nconst reducer = combindReducers({\n    counter:counterReducer,\n    info:infoReducer\n})\n\nfunction compose(funcs){\n    if(funcs.length === 0)return  (...arg) => arg;\n    if(funcs.length === 1)return funcs[0];\n    return funcs.reduce((acc,cur) => (...arg) => acc(cur(...arg)))\n}\n\nfunction applyMiddleware(...middlewares){\n    return function(createStore){\n        return function(reducer,state){\n            const store = createStore(reducer,state);\n            const chain = middlewares.map(middleware => middleware(store));\n            const dispatch = compose(chain)(store.dispatch)\n            return {\n                ...store,\n                dispatch\n            }\n        }\n    }\n}\n\nfunction expectionMiddleware(store){\n    return function (next){\n        return function(action){\n            try {\n                console.log('caghterror')\n                next(action)\n            }catch(e){\n                console.log(e)\n            }   \n        }\n    }\n}\n\nfunction loggerMiddleware(store){\n    return function(next){\n        return function (action){\n            console.log('logger')\n            next(action)\n        }\n    }\n}\n\n\nfunction timeMiddleware(store){\n    return function(next){\n        return function (action){\n            console.log(new Date().getTime(),'🀄️')\n            next(action)\n        }\n    }\n}\n\nconst rewriteCreateStore = applyMiddleware(expectionMiddleware,timeMiddleware,loggerMiddleware)\n\nconst store = createStore(reducer,{},rewriteCreateStore)\n\nstore.subscribe(()=>{\n    console.log(store.getState(),'🌈')\n})\n\nfunction increment (payload){\n    return {\n        type:'INCREMENT'\n    }\n}\n\nfunction setName (payload){\n    return {\n        type:'SET_NAME',\n        payload\n    }\n}\n\n\nfunction bindActionCreators(actions,dispatch){\n    const newActions = {}\n    Object.keys(actions).forEach(key => {\n        newActions[key] = (...arg) => {\n            dispatch(actions[key].apply(this,...arg))\n        }\n    })\n    return newActions\n}\n\nconst actions = bindActionCreators({\n    increment,setName\n},store.dispatch)\n\nstore.dispatch({type:'INCREMENT'})\nactions.setName({name:'故事的小黄花'})\n\n```\n\n![avatar](/img/redux-res.webp)\n\n- 可以看到执行结果中加入的监听错误和时间以及日志的中间件的执行，以及store直接dispatch和通过actions函数执行都改变了state","slug":"redux","published":1,"date":"2021-08-31T02:31:51.218Z","updated":"2021-08-31T03:53:35.060Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40c000a42u7608oelss","content":"<h3 id=\"redux简介-一个可以用于多端的状态管理框架\"><a href=\"#redux简介-一个可以用于多端的状态管理框架\" class=\"headerlink\" title=\"redux简介 一个可以用于多端的状态管理框架\"></a>redux简介 一个可以用于多端的状态管理框架</h3><ul>\n<li>Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native).</li>\n</ul>\n<h3 id=\"redux-核心函数createStore-combindreducers-applyMiddleware-bindActionCreaters\"><a href=\"#redux-核心函数createStore-combindreducers-applyMiddleware-bindActionCreaters\" class=\"headerlink\" title=\"redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters\"></a>redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters</h3><ul>\n<li><p>createStore函数可接收2个参数reducer,enhancer配置对象.由于此文章实现redux主要功能，也为了方便理解，所有对applyMiddleware函数的执行结果作为第三个参数传入。</p>\n</li>\n<li><p>combindreducers执行传入reduers一个reducer的对象，返回一个总的reducer函数，在总的reducer函数返回新的state。</p>\n</li>\n<li><p>applyMiddleware的原理主要是重写store.dispatch函数，用洋葱模式的形式将每个中间件作为next参数传入一层一层的包裹执行。</p>\n</li>\n<li><p>bindActionCreaters对dispacth做一层封装，可以执行异步操作等，拿到数据后出发dispatch改变数据。</p>\n</li>\n</ul>\n<h3 id=\"手写代码\"><a href=\"#手写代码\" class=\"headerlink\" title=\"手写代码\"></a>手写代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">reducer,state = &#123;&#125;,rewriteCreateStore</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rewriteCreateStore)&#123;</span><br><span class=\"line\">        createStore = <span class=\"title function_\">rewriteCreateStore</span>(createStore);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">createStore</span>(reducer,state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state = state;</span><br><span class=\"line\">    listeners = [];    <span class=\"comment\">// 用于存放订阅的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> listener === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">            listeners.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span> (<span class=\"string\">`<span class=\"subst\">$&#123;listener&#125;</span> is not function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">listener</span>)&#123;      <span class=\"comment\">// 返回函数用于取消订阅的事件   </span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = listeners.<span class=\"title function_\">indexOf</span>(listener);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt; -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                listeners.<span class=\"title function_\">splice</span>(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getState</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">        state = <span class=\"title function_\">reducer</span>(state,action);</span><br><span class=\"line\">        listeners.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">listener</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"title class_\">Symbol</span>()&#125;)   <span class=\"comment\">//用于初始化state 防止直接getState时 没有值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">combindReducers</span>(<span class=\"params\">reducers</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">state,action</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(reducers).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> reducer = reducers[key];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prevState = state[key];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextState = <span class=\"title function_\">reducer</span>(prevState,action)</span><br><span class=\"line\">            newState[key] = nextState</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newState</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">counterReducer</span> (state = &#123; <span class=\"attr\">count</span>:<span class=\"number\">0</span> &#125;,action)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;INCREMENT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> + <span class=\"number\">1</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DECREMENT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infoReducer</span> (state = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;有个名字&#x27;</span>,<span class=\"attr\">description</span>:<span class=\"string\">&#x27;一个称谓&#x27;</span>&#125;,action)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;SET_NAME&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">name</span>:action.<span class=\"property\">payload</span>.<span class=\"property\">name</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;SET_DESCRIPTION&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">description</span>:action.<span class=\"property\">payload</span>.<span class=\"property\">description</span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"title function_\">combindReducers</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">counter</span>:counterReducer,</span><br><span class=\"line\">    <span class=\"attr\">info</span>:infoReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">funcs</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>)<span class=\"keyword\">return</span>  <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> arg;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>)<span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc,cur</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> <span class=\"title function_\">acc</span>(<span class=\"title function_\">cur</span>(...arg)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">createStore</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">reducer,state</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,state);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(store));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">compose</span>(chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...store,</span><br><span class=\"line\">                dispatch</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">expectionMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;caghterror&#x27;</span>)</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loggerMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;logger&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),<span class=\"string\">&#x27;🀄️&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rewriteCreateStore = <span class=\"title function_\">applyMiddleware</span>(expectionMiddleware,timeMiddleware,loggerMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,&#123;&#125;,rewriteCreateStore)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>(),<span class=\"string\">&#x27;🌈&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span> (payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span> (payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;SET_NAME&#x27;</span>,</span><br><span class=\"line\">        payload</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"params\">actions,dispatch</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newActions = &#123;&#125;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(actions).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        newActions[key] = <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">dispatch</span>(actions[key].<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,...arg))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newActions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = <span class=\"title function_\">bindActionCreators</span>(&#123;</span><br><span class=\"line\">    increment,setName</span><br><span class=\"line\">&#125;,store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span>&#125;)</span><br><span class=\"line\">actions.<span class=\"title function_\">setName</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;故事的小黄花&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/redux-res.webp\" alt=\"avatar\"></p>\n<ul>\n<li>可以看到执行结果中加入的监听错误和时间以及日志的中间件的执行，以及store直接dispatch和通过actions函数执行都改变了state</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"redux简介-一个可以用于多端的状态管理框架\"><a href=\"#redux简介-一个可以用于多端的状态管理框架\" class=\"headerlink\" title=\"redux简介 一个可以用于多端的状态管理框架\"></a>redux简介 一个可以用于多端的状态管理框架</h3><ul>\n<li>Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native).</li>\n</ul>\n<h3 id=\"redux-核心函数createStore-combindreducers-applyMiddleware-bindActionCreaters\"><a href=\"#redux-核心函数createStore-combindreducers-applyMiddleware-bindActionCreaters\" class=\"headerlink\" title=\"redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters\"></a>redux 核心函数createStore combindreducers applyMiddleware bindActionCreaters</h3><ul>\n<li><p>createStore函数可接收2个参数reducer,enhancer配置对象.由于此文章实现redux主要功能，也为了方便理解，所有对applyMiddleware函数的执行结果作为第三个参数传入。</p>\n</li>\n<li><p>combindreducers执行传入reduers一个reducer的对象，返回一个总的reducer函数，在总的reducer函数返回新的state。</p>\n</li>\n<li><p>applyMiddleware的原理主要是重写store.dispatch函数，用洋葱模式的形式将每个中间件作为next参数传入一层一层的包裹执行。</p>\n</li>\n<li><p>bindActionCreaters对dispacth做一层封装，可以执行异步操作等，拿到数据后出发dispatch改变数据。</p>\n</li>\n</ul>\n<h3 id=\"手写代码\"><a href=\"#手写代码\" class=\"headerlink\" title=\"手写代码\"></a>手写代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">reducer,state = &#123;&#125;,rewriteCreateStore</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rewriteCreateStore)&#123;</span><br><span class=\"line\">        createStore = <span class=\"title function_\">rewriteCreateStore</span>(createStore);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">createStore</span>(reducer,state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state = state;</span><br><span class=\"line\">    listeners = [];    <span class=\"comment\">// 用于存放订阅的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> listener === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">            listeners.<span class=\"title function_\">push</span>(listener)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span> (<span class=\"string\">`<span class=\"subst\">$&#123;listener&#125;</span> is not function`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">listener</span>)&#123;      <span class=\"comment\">// 返回函数用于取消订阅的事件   </span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = listeners.<span class=\"title function_\">indexOf</span>(listener);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt; -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                listeners.<span class=\"title function_\">splice</span>(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getState</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">        state = <span class=\"title function_\">reducer</span>(state,action);</span><br><span class=\"line\">        listeners.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">listener</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">listener</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"title class_\">Symbol</span>()&#125;)   <span class=\"comment\">//用于初始化state 防止直接getState时 没有值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">combindReducers</span>(<span class=\"params\">reducers</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">state,action</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(reducers).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> reducer = reducers[key];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prevState = state[key];</span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextState = <span class=\"title function_\">reducer</span>(prevState,action)</span><br><span class=\"line\">            newState[key] = nextState</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newState</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">counterReducer</span> (state = &#123; <span class=\"attr\">count</span>:<span class=\"number\">0</span> &#125;,action)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;INCREMENT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> + <span class=\"number\">1</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;DECREMENT&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">count</span>:state.<span class=\"property\">count</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infoReducer</span> (state = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;有个名字&#x27;</span>,<span class=\"attr\">description</span>:<span class=\"string\">&#x27;一个称谓&#x27;</span>&#125;,action)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;SET_NAME&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">name</span>:action.<span class=\"property\">payload</span>.<span class=\"property\">name</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;SET_DESCRIPTION&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                <span class=\"attr\">description</span>:action.<span class=\"property\">payload</span>.<span class=\"property\">description</span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"title function_\">combindReducers</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">counter</span>:counterReducer,</span><br><span class=\"line\">    <span class=\"attr\">info</span>:infoReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">funcs</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(funcs.<span class=\"property\">length</span> === <span class=\"number\">0</span>)<span class=\"keyword\">return</span>  <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> arg;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(funcs.<span class=\"property\">length</span> === <span class=\"number\">1</span>)<span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc,cur</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> <span class=\"title function_\">acc</span>(<span class=\"title function_\">cur</span>(...arg)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">createStore</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">reducer,state</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,state);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> chain = middlewares.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> <span class=\"title function_\">middleware</span>(store));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> dispatch = <span class=\"title function_\">compose</span>(chain)(store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                ...store,</span><br><span class=\"line\">                dispatch</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">expectionMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;caghterror&#x27;</span>)</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loggerMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;logger&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeMiddleware</span>(<span class=\"params\">store</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">action</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),<span class=\"string\">&#x27;🀄️&#x27;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rewriteCreateStore = <span class=\"title function_\">applyMiddleware</span>(expectionMiddleware,timeMiddleware,loggerMiddleware)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer,&#123;&#125;,rewriteCreateStore)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>(),<span class=\"string\">&#x27;🌈&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span> (payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span> (payload)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;SET_NAME&#x27;</span>,</span><br><span class=\"line\">        payload</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"params\">actions,dispatch</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newActions = &#123;&#125;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(actions).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        newActions[key] = <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">dispatch</span>(actions[key].<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,...arg))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newActions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = <span class=\"title function_\">bindActionCreators</span>(&#123;</span><br><span class=\"line\">    increment,setName</span><br><span class=\"line\">&#125;,store.<span class=\"property\">dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;INCREMENT&#x27;</span>&#125;)</span><br><span class=\"line\">actions.<span class=\"title function_\">setName</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;故事的小黄花&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/redux-res.webp\" alt=\"avatar\"></p>\n<ul>\n<li>可以看到执行结果中加入的监听错误和时间以及日志的中间件的执行，以及store直接dispatch和通过actions函数执行都改变了state</li>\n</ul>\n"},{"title":"service worker","cover":"/img/serviceworker-z.webp","_content":"\n### service worker 概念和特点\n\n- Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用采取来适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。\n\n- Service worker 运行在 worker 上下文，因此它不能访问 DOM。相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步 API（如 XHR 和 localStorage (en-US)）不能在 service worker 中使用。\n\n- 出于安全考量，Service workers 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。\n\n### service worker 实践\n\n- index.html 浏览器请求的页面，判断是否支持 service worker，注册 service worker，在 service worker 准备好后可以互相通信\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>service worker</title>\n  </head>\n  <body>\n    <script>\n      if (\"serviceWorker\" in navigator && navigator.serviceWorker) {\n        // 需要判断是否支持service worker\n        navigator.serviceWorker\n          .register(\"/webs.js\")\n          .then((reg) => {\n            //  注册service worker '/webs.js'就是service worker编写的文件\n            console.log(reg, \"🧬\");\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n        navigator.serviceWorker?.ready // 当service worker 准备好后，向service worker线程发送消息\n          .then(() => {\n            navigator.serviceWorker.controller?.postMessage({\n              msg: \"client service worker\",\n            });\n          });\n        navigator.serviceWorker.addEventListener(\"message\", function (event) {\n          // 监听service worker 发送来的消息\n          console.log(event, \"🇫🇯\");\n        });\n      }\n    </script>\n  </body>\n</html>\n```\n\n- webs.js 负责缓存文件 和 拦截 fetch 事件 以下是 mdn 对每个事件的定义\n- ExtendableEvent.waitUntil() 方法告诉事件分发器该事件仍在进行。这个方法也可以用于检测进行的任务是否成功。在服务工作线程中，这个方法告诉浏览器事件一直进行，直至 promise 解决，浏览器不应该在事件中的异步操作完成之前终止服务工作线程。\n- 服务工作线程（service workers）中的 install (en-US) 事件使用 waitUntil() 来将服务工作线程保持在 installing (en-US) 阶段。如果传入 waitUntil() 的 promise 被拒绝，则将此次安装视为失败，丢弃这个服务工作线程。这主要用于确保在服务工作线程安装以前，所有依赖的核心缓存都已经成功载入。\n- 服务工作线程（service workers）中的 activate (en-US) 事件使用 waitUntil() 来延迟函数事件，如 fetch 和 push，直至传入 waitUntil() 的 promise 被解决。这让服务工作线程有时间更新数据库架构（database schema）和删除过时缓存（caches），让其他事件能在一个完成更新的状态下进行。\n- waitUntil() 方法最初必须在事件回调里调用，在此之后，方法可以被调用多次，直至所有传入的 promise 被解决。\n\n- CacheStorage 接口的 open() 方法返回一个 resolve 为匹配 cacheName 的 Cache 对象的 Promise .注意:如果指定的 Cache 不存在，则使用该 cacheName 创建一个新的 cache，并返回一个 resolve 为该新 Cache 对象的 Promise.\n- Cache 接口的 delete() 方法查询 request 为 key 的 Cache 条目，如果找到，则删除该 Cache 条目并返回 resolve 为 true 的 Promise 。 如果没有找到，则返回 resolve 为 false 的 Promise 。\n\n- FetchEvent 接口的 respondWith() 方法旨在包裹代码，这些代码为来自受控页面的 request 生成自定义的 response。这些代码通过返回一个 Response 、 network error 或者 Fetch 的方式 resolve。\n- Response 接口的 clone() 方法创建了一个响应对象的克隆，这个对象在所有方面都是相同的，但是存储在一个不同的变量中。\n- Cache 接口的 put() 方法 允许将键/值对添加到当前的 Cache 对象中.\n\n- Clients 接口的 matchAll() 方法返回 service worker Client 对象列表的 Promise . 包含 options 参数以返回域与关联的 service worker 的域相同所有 service worker 的 clients. 如果未包含 options，该方法仅返回由 service worker 控制的 service worker clients.\n\n```js\nconst cacheName = \"v1\"; // 缓存的版本号\n\n// const cacheAssets = ['index.html','main.js']  // 手动添加你需要缓存的文件名称\n\n// self.addEventListener('install', function(event) {    // install声明周期\n//   event.waitUntil(caches.open(cacheName).then(cache => {\n//     cache.addAll(cacheAssets)\n//   }).then(() => {self.skipWaiting()})\n//   )\n// });\n\nself.addEventListener(\"activate\", function (event) {\n  // activate 生命周期\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      // 拿到所有缓存 删除匹配不是当前cacheName 版本的缓存\n      return Promise.all(\n        cacheNames.map((cache) => {\n          if (cache !== cacheName) {\n            return caches.delete(cache);\n          }\n        })\n      );\n    })\n  );\n});\nself.addEventListener(\"fetch\", (e) => {\n  // 拦截fetch 自定义返回response\n  e.respondWith(\n    fetch(e.request)\n      .then((res) => {\n        const resClone = res.clone(); // clone response\n        caches\n          .open(cacheName) // 新建cacheStorage 对象\n          .then((cache) => {\n            if (e.request.url.indexOf(self.location.host) > -1) {\n              // 判断url是否同源\n              cache.put(e.request.url, resClone); // 将键值对 存入cache对象\n            }\n          });\n        return res;\n      })\n      .catch(() => caches.match(e.request).then((res) => res))\n  );\n});\nself.addEventListener(\"message\", (event) => {\n  self.clients.matchAll().then(function (clients) {\n    // 向所有client/windowClient对象发送消息\n    clients.forEach(function (client) {\n      client.postMessage(\"serve service worker\");\n    });\n  });\n});\n```\n\n### 本地调试结果\n\n- 前端开发常用 vscode 插件中下载 live server 插件，直接右键 index.html open with live server，可以启动一个本地服务器\n- 进入到页面就可以看到 打开 chrome 控制台，点击 Application 中的 service Workers serviceWorker 的 status 是 activated and is running\n- 将页面调成 offline 断网状态刷新页面依旧可以正常运行\n  ![avatar](/img/swa.webp)\n- cache storage 中可看到按你自己版本号 储存的 cache\n  ![avatar](/img/cache.webp)\n\n- 如果你需要在 install 或者 activate 声明周期中打印调试 需要在 console 中开启 preserve log，不然你会只看不到信息，因为每次刷新会重新创建一次 service worker\n  ![avatar](/img/prev.webp)\n\n### github 调试\n\n- 由于 service worker 只能在 https 协议中使用，自己的服务器测试不了，刚好可以借用 github 来试验\n- github 新建自己的仓库将代码，push 到 github 上，中间又出了点小插曲。\n\n![avatar](/img/token.webp)\n\n- github 在 2021 的中国情人节那天来了个以后登录只能使用 token 登录，这时你就需要去自己 github 上点击自己头像，出现下拉点击 setting，去到设置页面下拉，\n  点击 Developer settings，去到开发者设置，点击 Personal access tokens，新建你的 token。\n- 要使用 token 从命令行访问仓库，请勾选 repo。\n- 要使用 token 从命令行删除仓库，请勾选 delete_repo。\n- 之后在你的本地仓库执行：\n\n```js\ngit remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git。\n例如:git remote set-url origin https://xxx@github.com/xxx/xxx.github.io.git/\n```\n\n- 终于可以 github 测试了，可以看到你在断网情况下刷新页面，页面依旧可以运行。\n  ![avatar](/img/gitservice.webp)\n","source":"_posts/service-worker.md","raw":"---\ntitle: service worker\ncover: /img/serviceworker-z.webp\n---\n\n### service worker 概念和特点\n\n- Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用采取来适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。\n\n- Service worker 运行在 worker 上下文，因此它不能访问 DOM。相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步 API（如 XHR 和 localStorage (en-US)）不能在 service worker 中使用。\n\n- 出于安全考量，Service workers 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。\n\n### service worker 实践\n\n- index.html 浏览器请求的页面，判断是否支持 service worker，注册 service worker，在 service worker 准备好后可以互相通信\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>service worker</title>\n  </head>\n  <body>\n    <script>\n      if (\"serviceWorker\" in navigator && navigator.serviceWorker) {\n        // 需要判断是否支持service worker\n        navigator.serviceWorker\n          .register(\"/webs.js\")\n          .then((reg) => {\n            //  注册service worker '/webs.js'就是service worker编写的文件\n            console.log(reg, \"🧬\");\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n        navigator.serviceWorker?.ready // 当service worker 准备好后，向service worker线程发送消息\n          .then(() => {\n            navigator.serviceWorker.controller?.postMessage({\n              msg: \"client service worker\",\n            });\n          });\n        navigator.serviceWorker.addEventListener(\"message\", function (event) {\n          // 监听service worker 发送来的消息\n          console.log(event, \"🇫🇯\");\n        });\n      }\n    </script>\n  </body>\n</html>\n```\n\n- webs.js 负责缓存文件 和 拦截 fetch 事件 以下是 mdn 对每个事件的定义\n- ExtendableEvent.waitUntil() 方法告诉事件分发器该事件仍在进行。这个方法也可以用于检测进行的任务是否成功。在服务工作线程中，这个方法告诉浏览器事件一直进行，直至 promise 解决，浏览器不应该在事件中的异步操作完成之前终止服务工作线程。\n- 服务工作线程（service workers）中的 install (en-US) 事件使用 waitUntil() 来将服务工作线程保持在 installing (en-US) 阶段。如果传入 waitUntil() 的 promise 被拒绝，则将此次安装视为失败，丢弃这个服务工作线程。这主要用于确保在服务工作线程安装以前，所有依赖的核心缓存都已经成功载入。\n- 服务工作线程（service workers）中的 activate (en-US) 事件使用 waitUntil() 来延迟函数事件，如 fetch 和 push，直至传入 waitUntil() 的 promise 被解决。这让服务工作线程有时间更新数据库架构（database schema）和删除过时缓存（caches），让其他事件能在一个完成更新的状态下进行。\n- waitUntil() 方法最初必须在事件回调里调用，在此之后，方法可以被调用多次，直至所有传入的 promise 被解决。\n\n- CacheStorage 接口的 open() 方法返回一个 resolve 为匹配 cacheName 的 Cache 对象的 Promise .注意:如果指定的 Cache 不存在，则使用该 cacheName 创建一个新的 cache，并返回一个 resolve 为该新 Cache 对象的 Promise.\n- Cache 接口的 delete() 方法查询 request 为 key 的 Cache 条目，如果找到，则删除该 Cache 条目并返回 resolve 为 true 的 Promise 。 如果没有找到，则返回 resolve 为 false 的 Promise 。\n\n- FetchEvent 接口的 respondWith() 方法旨在包裹代码，这些代码为来自受控页面的 request 生成自定义的 response。这些代码通过返回一个 Response 、 network error 或者 Fetch 的方式 resolve。\n- Response 接口的 clone() 方法创建了一个响应对象的克隆，这个对象在所有方面都是相同的，但是存储在一个不同的变量中。\n- Cache 接口的 put() 方法 允许将键/值对添加到当前的 Cache 对象中.\n\n- Clients 接口的 matchAll() 方法返回 service worker Client 对象列表的 Promise . 包含 options 参数以返回域与关联的 service worker 的域相同所有 service worker 的 clients. 如果未包含 options，该方法仅返回由 service worker 控制的 service worker clients.\n\n```js\nconst cacheName = \"v1\"; // 缓存的版本号\n\n// const cacheAssets = ['index.html','main.js']  // 手动添加你需要缓存的文件名称\n\n// self.addEventListener('install', function(event) {    // install声明周期\n//   event.waitUntil(caches.open(cacheName).then(cache => {\n//     cache.addAll(cacheAssets)\n//   }).then(() => {self.skipWaiting()})\n//   )\n// });\n\nself.addEventListener(\"activate\", function (event) {\n  // activate 生命周期\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      // 拿到所有缓存 删除匹配不是当前cacheName 版本的缓存\n      return Promise.all(\n        cacheNames.map((cache) => {\n          if (cache !== cacheName) {\n            return caches.delete(cache);\n          }\n        })\n      );\n    })\n  );\n});\nself.addEventListener(\"fetch\", (e) => {\n  // 拦截fetch 自定义返回response\n  e.respondWith(\n    fetch(e.request)\n      .then((res) => {\n        const resClone = res.clone(); // clone response\n        caches\n          .open(cacheName) // 新建cacheStorage 对象\n          .then((cache) => {\n            if (e.request.url.indexOf(self.location.host) > -1) {\n              // 判断url是否同源\n              cache.put(e.request.url, resClone); // 将键值对 存入cache对象\n            }\n          });\n        return res;\n      })\n      .catch(() => caches.match(e.request).then((res) => res))\n  );\n});\nself.addEventListener(\"message\", (event) => {\n  self.clients.matchAll().then(function (clients) {\n    // 向所有client/windowClient对象发送消息\n    clients.forEach(function (client) {\n      client.postMessage(\"serve service worker\");\n    });\n  });\n});\n```\n\n### 本地调试结果\n\n- 前端开发常用 vscode 插件中下载 live server 插件，直接右键 index.html open with live server，可以启动一个本地服务器\n- 进入到页面就可以看到 打开 chrome 控制台，点击 Application 中的 service Workers serviceWorker 的 status 是 activated and is running\n- 将页面调成 offline 断网状态刷新页面依旧可以正常运行\n  ![avatar](/img/swa.webp)\n- cache storage 中可看到按你自己版本号 储存的 cache\n  ![avatar](/img/cache.webp)\n\n- 如果你需要在 install 或者 activate 声明周期中打印调试 需要在 console 中开启 preserve log，不然你会只看不到信息，因为每次刷新会重新创建一次 service worker\n  ![avatar](/img/prev.webp)\n\n### github 调试\n\n- 由于 service worker 只能在 https 协议中使用，自己的服务器测试不了，刚好可以借用 github 来试验\n- github 新建自己的仓库将代码，push 到 github 上，中间又出了点小插曲。\n\n![avatar](/img/token.webp)\n\n- github 在 2021 的中国情人节那天来了个以后登录只能使用 token 登录，这时你就需要去自己 github 上点击自己头像，出现下拉点击 setting，去到设置页面下拉，\n  点击 Developer settings，去到开发者设置，点击 Personal access tokens，新建你的 token。\n- 要使用 token 从命令行访问仓库，请勾选 repo。\n- 要使用 token 从命令行删除仓库，请勾选 delete_repo。\n- 之后在你的本地仓库执行：\n\n```js\ngit remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git。\n例如:git remote set-url origin https://xxx@github.com/xxx/xxx.github.io.git/\n```\n\n- 终于可以 github 测试了，可以看到你在断网情况下刷新页面，页面依旧可以运行。\n  ![avatar](/img/gitservice.webp)\n","slug":"service-worker","published":1,"date":"2021-08-17T01:00:22.772Z","updated":"2025-05-21T07:32:33.221Z","_id":"cm0lup40c000b42u7bcreaij3","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"service-worker-概念和特点\"><a href=\"#service-worker-概念和特点\" class=\"headerlink\" title=\"service worker 概念和特点\"></a>service worker 概念和特点</h3><ul>\n<li><p>Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用采取来适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。</p>\n</li>\n<li><p>Service worker 运行在 worker 上下文，因此它不能访问 DOM。相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步 API（如 XHR 和 localStorage (en-US)）不能在 service worker 中使用。</p>\n</li>\n<li><p>出于安全考量，Service workers 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。</p>\n</li>\n</ul>\n<h3 id=\"service-worker-实践\"><a href=\"#service-worker-实践\" class=\"headerlink\" title=\"service worker 实践\"></a>service worker 实践</h3><ul>\n<li>index.html 浏览器请求的页面，判断是否支持 service worker，注册 service worker，在 service worker 准备好后可以互相通信</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>service worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (<span class=\"string\">&quot;serviceWorker&quot;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; navigator.<span class=\"property\">serviceWorker</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 需要判断是否支持service worker</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">register</span>(<span class=\"string\">&quot;/webs.js&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">reg</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//  注册service worker &#x27;/webs.js&#x27;就是service worker编写的文件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg, <span class=\"string\">&quot;🧬&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span>?.<span class=\"property\">ready</span> <span class=\"comment\">// 当service worker 准备好后，向service worker线程发送消息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            navigator.<span class=\"property\">serviceWorker</span>.<span class=\"property\">controller</span>?.<span class=\"title function_\">postMessage</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">msg</span>: <span class=\"string\">&quot;client service worker&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 监听service worker 发送来的消息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event, <span class=\"string\">&quot;🇫🇯&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>webs.js 负责缓存文件 和 拦截 fetch 事件 以下是 mdn 对每个事件的定义</p>\n</li>\n<li><p>ExtendableEvent.waitUntil() 方法告诉事件分发器该事件仍在进行。这个方法也可以用于检测进行的任务是否成功。在服务工作线程中，这个方法告诉浏览器事件一直进行，直至 promise 解决，浏览器不应该在事件中的异步操作完成之前终止服务工作线程。</p>\n</li>\n<li><p>服务工作线程（service workers）中的 install (en-US) 事件使用 waitUntil() 来将服务工作线程保持在 installing (en-US) 阶段。如果传入 waitUntil() 的 promise 被拒绝，则将此次安装视为失败，丢弃这个服务工作线程。这主要用于确保在服务工作线程安装以前，所有依赖的核心缓存都已经成功载入。</p>\n</li>\n<li><p>服务工作线程（service workers）中的 activate (en-US) 事件使用 waitUntil() 来延迟函数事件，如 fetch 和 push，直至传入 waitUntil() 的 promise 被解决。这让服务工作线程有时间更新数据库架构（database schema）和删除过时缓存（caches），让其他事件能在一个完成更新的状态下进行。</p>\n</li>\n<li><p>waitUntil() 方法最初必须在事件回调里调用，在此之后，方法可以被调用多次，直至所有传入的 promise 被解决。</p>\n</li>\n<li><p>CacheStorage 接口的 open() 方法返回一个 resolve 为匹配 cacheName 的 Cache 对象的 Promise .注意:如果指定的 Cache 不存在，则使用该 cacheName 创建一个新的 cache，并返回一个 resolve 为该新 Cache 对象的 Promise.</p>\n</li>\n<li><p>Cache 接口的 delete() 方法查询 request 为 key 的 Cache 条目，如果找到，则删除该 Cache 条目并返回 resolve 为 true 的 Promise 。 如果没有找到，则返回 resolve 为 false 的 Promise 。</p>\n</li>\n<li><p>FetchEvent 接口的 respondWith() 方法旨在包裹代码，这些代码为来自受控页面的 request 生成自定义的 response。这些代码通过返回一个 Response 、 network error 或者 Fetch 的方式 resolve。</p>\n</li>\n<li><p>Response 接口的 clone() 方法创建了一个响应对象的克隆，这个对象在所有方面都是相同的，但是存储在一个不同的变量中。</p>\n</li>\n<li><p>Cache 接口的 put() 方法 允许将键&#x2F;值对添加到当前的 Cache 对象中.</p>\n</li>\n<li><p>Clients 接口的 matchAll() 方法返回 service worker Client 对象列表的 Promise . 包含 options 参数以返回域与关联的 service worker 的域相同所有 service worker 的 clients. 如果未包含 options，该方法仅返回由 service worker 控制的 service worker clients.</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cacheName = <span class=\"string\">&quot;v1&quot;</span>; <span class=\"comment\">// 缓存的版本号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const cacheAssets = [&#x27;index.html&#x27;,&#x27;main.js&#x27;]  // 手动添加你需要缓存的文件名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// self.addEventListener(&#x27;install&#x27;, function(event) &#123;    // install声明周期</span></span><br><span class=\"line\"><span class=\"comment\">//   event.waitUntil(caches.open(cacheName).then(cache =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     cache.addAll(cacheAssets)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;).then(() =&gt; &#123;self.skipWaiting()&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   )</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;activate&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// activate 生命周期</span></span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">keys</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">cacheNames</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 拿到所有缓存 删除匹配不是当前cacheName 版本的缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">        cacheNames.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">cache</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cache !== cacheName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.<span class=\"title function_\">delete</span>(cache);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;fetch&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 拦截fetch 自定义返回response</span></span><br><span class=\"line\">  e.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(e.<span class=\"property\">request</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> resClone = res.<span class=\"title function_\">clone</span>(); <span class=\"comment\">// clone response</span></span><br><span class=\"line\">        caches</span><br><span class=\"line\">          .<span class=\"title function_\">open</span>(cacheName) <span class=\"comment\">// 新建cacheStorage 对象</span></span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">cache</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">request</span>.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(self.<span class=\"property\">location</span>.<span class=\"property\">host</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 判断url是否同源</span></span><br><span class=\"line\">              cache.<span class=\"title function_\">put</span>(e.<span class=\"property\">request</span>.<span class=\"property\">url</span>, resClone); <span class=\"comment\">// 将键值对 存入cache对象</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> caches.<span class=\"title function_\">match</span>(e.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res))</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  self.<span class=\"property\">clients</span>.<span class=\"title function_\">matchAll</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">clients</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向所有client/windowClient对象发送消息</span></span><br><span class=\"line\">    clients.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">client</span>) &#123;</span><br><span class=\"line\">      client.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&quot;serve service worker&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试结果\"><a href=\"#本地调试结果\" class=\"headerlink\" title=\"本地调试结果\"></a>本地调试结果</h3><ul>\n<li><p>前端开发常用 vscode 插件中下载 live server 插件，直接右键 index.html open with live server，可以启动一个本地服务器</p>\n</li>\n<li><p>进入到页面就可以看到 打开 chrome 控制台，点击 Application 中的 service Workers serviceWorker 的 status 是 activated and is running</p>\n</li>\n<li><p>将页面调成 offline 断网状态刷新页面依旧可以正常运行<br><img src=\"/img/swa.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>cache storage 中可看到按你自己版本号 储存的 cache<br><img src=\"/img/cache.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>如果你需要在 install 或者 activate 声明周期中打印调试 需要在 console 中开启 preserve log，不然你会只看不到信息，因为每次刷新会重新创建一次 service worker<br><img src=\"/img/prev.webp\" alt=\"avatar\"></p>\n</li>\n</ul>\n<h3 id=\"github-调试\"><a href=\"#github-调试\" class=\"headerlink\" title=\"github 调试\"></a>github 调试</h3><ul>\n<li>由于 service worker 只能在 https 协议中使用，自己的服务器测试不了，刚好可以借用 github 来试验</li>\n<li>github 新建自己的仓库将代码，push 到 github 上，中间又出了点小插曲。</li>\n</ul>\n<p><img src=\"/img/token.webp\" alt=\"avatar\"></p>\n<ul>\n<li>github 在 2021 的中国情人节那天来了个以后登录只能使用 token 登录，这时你就需要去自己 github 上点击自己头像，出现下拉点击 setting，去到设置页面下拉，<br>点击 Developer settings，去到开发者设置，点击 Personal access tokens，新建你的 token。</li>\n<li>要使用 token 从命令行访问仓库，请勾选 repo。</li>\n<li>要使用 token 从命令行删除仓库，请勾选 delete_repo。</li>\n<li>之后在你的本地仓库执行：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin <span class=\"attr\">https</span>:<span class=\"comment\">//&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git。</span></span><br><span class=\"line\">例如:git remote set-url origin <span class=\"attr\">https</span>:<span class=\"comment\">//xxx@github.com/xxx/xxx.github.io.git/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终于可以 github 测试了，可以看到你在断网情况下刷新页面，页面依旧可以运行。<br><img src=\"/img/gitservice.webp\" alt=\"avatar\"></li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"service-worker-概念和特点\"><a href=\"#service-worker-概念和特点\" class=\"headerlink\" title=\"service worker 概念和特点\"></a>service worker 概念和特点</h3><ul>\n<li><p>Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用采取来适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。</p>\n</li>\n<li><p>Service worker 运行在 worker 上下文，因此它不能访问 DOM。相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步 API（如 XHR 和 localStorage (en-US)）不能在 service worker 中使用。</p>\n</li>\n<li><p>出于安全考量，Service workers 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。</p>\n</li>\n</ul>\n<h3 id=\"service-worker-实践\"><a href=\"#service-worker-实践\" class=\"headerlink\" title=\"service worker 实践\"></a>service worker 实践</h3><ul>\n<li>index.html 浏览器请求的页面，判断是否支持 service worker，注册 service worker，在 service worker 准备好后可以互相通信</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>service worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (<span class=\"string\">&quot;serviceWorker&quot;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; navigator.<span class=\"property\">serviceWorker</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 需要判断是否支持service worker</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">register</span>(<span class=\"string\">&quot;/webs.js&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">reg</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//  注册service worker &#x27;/webs.js&#x27;就是service worker编写的文件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reg, <span class=\"string\">&quot;🧬&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span>?.<span class=\"property\">ready</span> <span class=\"comment\">// 当service worker 准备好后，向service worker线程发送消息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            navigator.<span class=\"property\">serviceWorker</span>.<span class=\"property\">controller</span>?.<span class=\"title function_\">postMessage</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">msg</span>: <span class=\"string\">&quot;client service worker&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 监听service worker 发送来的消息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event, <span class=\"string\">&quot;🇫🇯&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>webs.js 负责缓存文件 和 拦截 fetch 事件 以下是 mdn 对每个事件的定义</p>\n</li>\n<li><p>ExtendableEvent.waitUntil() 方法告诉事件分发器该事件仍在进行。这个方法也可以用于检测进行的任务是否成功。在服务工作线程中，这个方法告诉浏览器事件一直进行，直至 promise 解决，浏览器不应该在事件中的异步操作完成之前终止服务工作线程。</p>\n</li>\n<li><p>服务工作线程（service workers）中的 install (en-US) 事件使用 waitUntil() 来将服务工作线程保持在 installing (en-US) 阶段。如果传入 waitUntil() 的 promise 被拒绝，则将此次安装视为失败，丢弃这个服务工作线程。这主要用于确保在服务工作线程安装以前，所有依赖的核心缓存都已经成功载入。</p>\n</li>\n<li><p>服务工作线程（service workers）中的 activate (en-US) 事件使用 waitUntil() 来延迟函数事件，如 fetch 和 push，直至传入 waitUntil() 的 promise 被解决。这让服务工作线程有时间更新数据库架构（database schema）和删除过时缓存（caches），让其他事件能在一个完成更新的状态下进行。</p>\n</li>\n<li><p>waitUntil() 方法最初必须在事件回调里调用，在此之后，方法可以被调用多次，直至所有传入的 promise 被解决。</p>\n</li>\n<li><p>CacheStorage 接口的 open() 方法返回一个 resolve 为匹配 cacheName 的 Cache 对象的 Promise .注意:如果指定的 Cache 不存在，则使用该 cacheName 创建一个新的 cache，并返回一个 resolve 为该新 Cache 对象的 Promise.</p>\n</li>\n<li><p>Cache 接口的 delete() 方法查询 request 为 key 的 Cache 条目，如果找到，则删除该 Cache 条目并返回 resolve 为 true 的 Promise 。 如果没有找到，则返回 resolve 为 false 的 Promise 。</p>\n</li>\n<li><p>FetchEvent 接口的 respondWith() 方法旨在包裹代码，这些代码为来自受控页面的 request 生成自定义的 response。这些代码通过返回一个 Response 、 network error 或者 Fetch 的方式 resolve。</p>\n</li>\n<li><p>Response 接口的 clone() 方法创建了一个响应对象的克隆，这个对象在所有方面都是相同的，但是存储在一个不同的变量中。</p>\n</li>\n<li><p>Cache 接口的 put() 方法 允许将键&#x2F;值对添加到当前的 Cache 对象中.</p>\n</li>\n<li><p>Clients 接口的 matchAll() 方法返回 service worker Client 对象列表的 Promise . 包含 options 参数以返回域与关联的 service worker 的域相同所有 service worker 的 clients. 如果未包含 options，该方法仅返回由 service worker 控制的 service worker clients.</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cacheName = <span class=\"string\">&quot;v1&quot;</span>; <span class=\"comment\">// 缓存的版本号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const cacheAssets = [&#x27;index.html&#x27;,&#x27;main.js&#x27;]  // 手动添加你需要缓存的文件名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// self.addEventListener(&#x27;install&#x27;, function(event) &#123;    // install声明周期</span></span><br><span class=\"line\"><span class=\"comment\">//   event.waitUntil(caches.open(cacheName).then(cache =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     cache.addAll(cacheAssets)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;).then(() =&gt; &#123;self.skipWaiting()&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   )</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;activate&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// activate 生命周期</span></span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">keys</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">cacheNames</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 拿到所有缓存 删除匹配不是当前cacheName 版本的缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">        cacheNames.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">cache</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cache !== cacheName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.<span class=\"title function_\">delete</span>(cache);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;fetch&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 拦截fetch 自定义返回response</span></span><br><span class=\"line\">  e.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(e.<span class=\"property\">request</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> resClone = res.<span class=\"title function_\">clone</span>(); <span class=\"comment\">// clone response</span></span><br><span class=\"line\">        caches</span><br><span class=\"line\">          .<span class=\"title function_\">open</span>(cacheName) <span class=\"comment\">// 新建cacheStorage 对象</span></span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">cache</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"property\">request</span>.<span class=\"property\">url</span>.<span class=\"title function_\">indexOf</span>(self.<span class=\"property\">location</span>.<span class=\"property\">host</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 判断url是否同源</span></span><br><span class=\"line\">              cache.<span class=\"title function_\">put</span>(e.<span class=\"property\">request</span>.<span class=\"property\">url</span>, resClone); <span class=\"comment\">// 将键值对 存入cache对象</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> caches.<span class=\"title function_\">match</span>(e.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res))</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  self.<span class=\"property\">clients</span>.<span class=\"title function_\">matchAll</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">clients</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向所有client/windowClient对象发送消息</span></span><br><span class=\"line\">    clients.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">client</span>) &#123;</span><br><span class=\"line\">      client.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&quot;serve service worker&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试结果\"><a href=\"#本地调试结果\" class=\"headerlink\" title=\"本地调试结果\"></a>本地调试结果</h3><ul>\n<li><p>前端开发常用 vscode 插件中下载 live server 插件，直接右键 index.html open with live server，可以启动一个本地服务器</p>\n</li>\n<li><p>进入到页面就可以看到 打开 chrome 控制台，点击 Application 中的 service Workers serviceWorker 的 status 是 activated and is running</p>\n</li>\n<li><p>将页面调成 offline 断网状态刷新页面依旧可以正常运行<br><img src=\"/img/swa.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>cache storage 中可看到按你自己版本号 储存的 cache<br><img src=\"/img/cache.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>如果你需要在 install 或者 activate 声明周期中打印调试 需要在 console 中开启 preserve log，不然你会只看不到信息，因为每次刷新会重新创建一次 service worker<br><img src=\"/img/prev.webp\" alt=\"avatar\"></p>\n</li>\n</ul>\n<h3 id=\"github-调试\"><a href=\"#github-调试\" class=\"headerlink\" title=\"github 调试\"></a>github 调试</h3><ul>\n<li>由于 service worker 只能在 https 协议中使用，自己的服务器测试不了，刚好可以借用 github 来试验</li>\n<li>github 新建自己的仓库将代码，push 到 github 上，中间又出了点小插曲。</li>\n</ul>\n<p><img src=\"/img/token.webp\" alt=\"avatar\"></p>\n<ul>\n<li>github 在 2021 的中国情人节那天来了个以后登录只能使用 token 登录，这时你就需要去自己 github 上点击自己头像，出现下拉点击 setting，去到设置页面下拉，<br>点击 Developer settings，去到开发者设置，点击 Personal access tokens，新建你的 token。</li>\n<li>要使用 token 从命令行访问仓库，请勾选 repo。</li>\n<li>要使用 token 从命令行删除仓库，请勾选 delete_repo。</li>\n<li>之后在你的本地仓库执行：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin <span class=\"attr\">https</span>:<span class=\"comment\">//&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git。</span></span><br><span class=\"line\">例如:git remote set-url origin <span class=\"attr\">https</span>:<span class=\"comment\">//xxx@github.com/xxx/xxx.github.io.git/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终于可以 github 测试了，可以看到你在断网情况下刷新页面，页面依旧可以运行。<br><img src=\"/img/gitservice.webp\" alt=\"avatar\"></li>\n</ul>\n"},{"title":"ts utils","cover":"/img/useState.webp","_content":"\n### Parameters  提取函数参数\n\n```ts\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\nconst func = (name:string,age:number) => {};\n\ntype params = Parameters<typeof func>\n```\n\n### keyof 强制类型校验\n\n```ts\nconst data = {\n    name:'xxx',\n    age:18\n}\n\nfunction getData<T extends object ,K extends keyof T>(o:T,key:K):T[K]{\n    return o[key]\n}\n\ngetData(data,'name')\n```\n\n### 部分参数可选\n\n```ts\ntype User = {\n     id:number,\n     name:string,\n     age:number\n }\n\n// Pick选取原对象匹配到传入key的值 key只能是原对象存在的\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n// Exclude选取原对象匹配到传入key的值 key可以是原对象不存在的\ntype Exclude<T, U> = T extends U ? never : T;\n\n// Omit 拿到原对象没有匹配到传入的key的值\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n// Partial将原对象的值变为可选\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n// SelectPartial将原对象变为部分参数可选\ntype SelectPartial<T,K extends keyof T> = Partial<Pick<T,K>> & Omit<T,K>\n\ntype Final = SelectPartial<User,'id' | 'name'>\n```\n\n### 交集和并集\n\n```ts\ninterface FirstType {\n     id:number,\n     firstName:string,\n     lastName:string\n }\n\ninterface SecondType {\n     id:number,\n     address:string,\n     name:string\n }\n\ntype ExtractType = Extract<keyof FirstType,keyof SecondType>\ntype ExcludeType = Exclude<keyof FirstType,keyof SecondType> \n```\n\n### Record 定义对象的key value\n\n```ts\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n\n interface ProductCar {\n     size:string,\n     length:number,\n     type:string\n }\n\n type Product = ProductCar[]\n\n interface ProductCarIn {\n     [key:string]:ProductCar\n }\n\n class CarModel {\n     ProductCar :Record<string,ProductCar> = {\n         'X5':{\n             size:'big',\n             length:5080,\n             type:'suv'\n         }\n     }\n }\n```\n\n### NonNullable排除null undefined\n\n```ts\n type NonNullableType = string | number | null | undefined\n\n const nonNull:NonNullable<NonNullableType> = 'ts-node'  \n```\n\n### ts唯一属性\n\n```ts\nconst PROD = Symbol('production mode');\nconst DEV = Symbol('development mode');\n```\n\n\n### 构造函数参数类型 构造函数返回值类型\n\n```ts\n// 构造函数返回值类型\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n\n// 构造函数参数类型\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\nclass UserOne {\n    constructor(public name:string){}\n}\n\ninterface IConstruct<T extends new (...arg:any) => any> {\n    type:new (...arg:ConstructorParameters<T>) => InstanceType<T>;\n}\n\ntype UserConstruct = IConstruct<typeof UserOne>\n\nconst constr:UserConstruct = {\n    type:UserOne\n}\n\n// constr.type ==> new (name:string) => UserOne\n\nconst userInstance = new constr.type('jiong')\n\nconsole.log(userInstance.name)\n\n```\n\n### is toArray\n\n```ts\nfunction isString(a:unknown):a is string{\n    return typeof a === 'string'\n}\n\ntype ToArray<T> = T extends unknown[] ? T : T[]\n\nconst arrData:ToArray<string> = Array.from('123')\n```\n\n\n### 强制类型转换 <const> as const 元组转数组\n\n```ts\nfunction tuplify <T extends unknown[]>(...eles:T):T{\n    return eles\n}\nfunction test(){\n    const respone :string = 'jiong';\n    const age:number = 30;\n    return tuplify(respone,age) \n    // return[respone,age]\n}\nconst item = test();\nconst [respone] = item\n```\n\n### hasKey\n\n```ts\nfunction hasKey<O extends object>(obj:O,key:PropertyKey):key is keyof O{\n    return obj.hasOwnProperty(key)\n}\n```\n\n\n### 实现PickPromise，能够获取泛型的类型\n\n```ts\ntype PickPromise<T extends Promise<any>> = T extends Promise<infer P> ? P : never\ntype A = Promise<number>\ntype B = PickPromise<A> \n```\n\n\n### 把对象的值的类型 提取成元组\n\n```ts\n\nconst objVol = {\n    name:'xxx',\n    age:18,\n    add:(a:number,b:number) =>{ return a + b},\n}\n\ntype GetObjVal<T extends object> = T[keyof T]\ntype GetObjKey<T extends object> = {\n    [K in keyof T]:K\n}[keyof T]\n\ntype ObjKey = GetObjKey<typeof objVol>\ntype ObjVal = GetObjVal<typeof objVol>\n```\n\n\n### 泛型放前面\n\n```ts\ninterface C {\n    <T>(arg:T):T\n}\n\ntype CC = <T>(arg:T) => number\n\nconst getDataA:C = <T>(arg:T):T => {\n    return arg\n}\n\ngetDataA<string>('xxx')\n\n\nconst getDataB:CC = <T>(arg:T):number => {\n    return <number>(arg as unknown)\n}\n```\n\n\n### 实现一个ts的工具函数 GetOnlyFnProps<T> 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\n\n\n```ts\ntype GetOnlyFnKeys<T extends object> = {\n    [K in keyof T]: T[K] extends Function ? K : never\n}[keyof T]\n   \ntype GetOnlyFnProps<T extends object> = {\n    [K in GetOnlyFnKeys<T>]: T[K]\n}\n\ntype SomeObj = {\n    name: string,\n    age:number,\n    add():void,\n    des():void,\n}\n\ntype CCC = GetOnlyFnKeys<SomeObj>\n\n```\n","source":"_posts/ts-skills.md","raw":"---\ntitle: ts utils\ncover: /img/useState.webp\n---\n\n### Parameters  提取函数参数\n\n```ts\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\nconst func = (name:string,age:number) => {};\n\ntype params = Parameters<typeof func>\n```\n\n### keyof 强制类型校验\n\n```ts\nconst data = {\n    name:'xxx',\n    age:18\n}\n\nfunction getData<T extends object ,K extends keyof T>(o:T,key:K):T[K]{\n    return o[key]\n}\n\ngetData(data,'name')\n```\n\n### 部分参数可选\n\n```ts\ntype User = {\n     id:number,\n     name:string,\n     age:number\n }\n\n// Pick选取原对象匹配到传入key的值 key只能是原对象存在的\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n// Exclude选取原对象匹配到传入key的值 key可以是原对象不存在的\ntype Exclude<T, U> = T extends U ? never : T;\n\n// Omit 拿到原对象没有匹配到传入的key的值\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n// Partial将原对象的值变为可选\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n// SelectPartial将原对象变为部分参数可选\ntype SelectPartial<T,K extends keyof T> = Partial<Pick<T,K>> & Omit<T,K>\n\ntype Final = SelectPartial<User,'id' | 'name'>\n```\n\n### 交集和并集\n\n```ts\ninterface FirstType {\n     id:number,\n     firstName:string,\n     lastName:string\n }\n\ninterface SecondType {\n     id:number,\n     address:string,\n     name:string\n }\n\ntype ExtractType = Extract<keyof FirstType,keyof SecondType>\ntype ExcludeType = Exclude<keyof FirstType,keyof SecondType> \n```\n\n### Record 定义对象的key value\n\n```ts\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n\n interface ProductCar {\n     size:string,\n     length:number,\n     type:string\n }\n\n type Product = ProductCar[]\n\n interface ProductCarIn {\n     [key:string]:ProductCar\n }\n\n class CarModel {\n     ProductCar :Record<string,ProductCar> = {\n         'X5':{\n             size:'big',\n             length:5080,\n             type:'suv'\n         }\n     }\n }\n```\n\n### NonNullable排除null undefined\n\n```ts\n type NonNullableType = string | number | null | undefined\n\n const nonNull:NonNullable<NonNullableType> = 'ts-node'  \n```\n\n### ts唯一属性\n\n```ts\nconst PROD = Symbol('production mode');\nconst DEV = Symbol('development mode');\n```\n\n\n### 构造函数参数类型 构造函数返回值类型\n\n```ts\n// 构造函数返回值类型\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n\n// 构造函数参数类型\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\nclass UserOne {\n    constructor(public name:string){}\n}\n\ninterface IConstruct<T extends new (...arg:any) => any> {\n    type:new (...arg:ConstructorParameters<T>) => InstanceType<T>;\n}\n\ntype UserConstruct = IConstruct<typeof UserOne>\n\nconst constr:UserConstruct = {\n    type:UserOne\n}\n\n// constr.type ==> new (name:string) => UserOne\n\nconst userInstance = new constr.type('jiong')\n\nconsole.log(userInstance.name)\n\n```\n\n### is toArray\n\n```ts\nfunction isString(a:unknown):a is string{\n    return typeof a === 'string'\n}\n\ntype ToArray<T> = T extends unknown[] ? T : T[]\n\nconst arrData:ToArray<string> = Array.from('123')\n```\n\n\n### 强制类型转换 <const> as const 元组转数组\n\n```ts\nfunction tuplify <T extends unknown[]>(...eles:T):T{\n    return eles\n}\nfunction test(){\n    const respone :string = 'jiong';\n    const age:number = 30;\n    return tuplify(respone,age) \n    // return[respone,age]\n}\nconst item = test();\nconst [respone] = item\n```\n\n### hasKey\n\n```ts\nfunction hasKey<O extends object>(obj:O,key:PropertyKey):key is keyof O{\n    return obj.hasOwnProperty(key)\n}\n```\n\n\n### 实现PickPromise，能够获取泛型的类型\n\n```ts\ntype PickPromise<T extends Promise<any>> = T extends Promise<infer P> ? P : never\ntype A = Promise<number>\ntype B = PickPromise<A> \n```\n\n\n### 把对象的值的类型 提取成元组\n\n```ts\n\nconst objVol = {\n    name:'xxx',\n    age:18,\n    add:(a:number,b:number) =>{ return a + b},\n}\n\ntype GetObjVal<T extends object> = T[keyof T]\ntype GetObjKey<T extends object> = {\n    [K in keyof T]:K\n}[keyof T]\n\ntype ObjKey = GetObjKey<typeof objVol>\ntype ObjVal = GetObjVal<typeof objVol>\n```\n\n\n### 泛型放前面\n\n```ts\ninterface C {\n    <T>(arg:T):T\n}\n\ntype CC = <T>(arg:T) => number\n\nconst getDataA:C = <T>(arg:T):T => {\n    return arg\n}\n\ngetDataA<string>('xxx')\n\n\nconst getDataB:CC = <T>(arg:T):number => {\n    return <number>(arg as unknown)\n}\n```\n\n\n### 实现一个ts的工具函数 GetOnlyFnProps<T> 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\n\n\n```ts\ntype GetOnlyFnKeys<T extends object> = {\n    [K in keyof T]: T[K] extends Function ? K : never\n}[keyof T]\n   \ntype GetOnlyFnProps<T extends object> = {\n    [K in GetOnlyFnKeys<T>]: T[K]\n}\n\ntype SomeObj = {\n    name: string,\n    age:number,\n    add():void,\n    des():void,\n}\n\ntype CCC = GetOnlyFnKeys<SomeObj>\n\n```\n","slug":"ts-skills","published":1,"date":"2021-11-09T01:54:59.337Z","updated":"2021-11-09T03:26:26.816Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40d000c42u7aaw48sme","content":"<h3 id=\"Parameters-提取函数参数\"><a href=\"#Parameters-提取函数参数\" class=\"headerlink\" title=\"Parameters  提取函数参数\"></a>Parameters  提取函数参数</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Parameters</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> params = <span class=\"title class_\">Parameters</span>&lt;<span class=\"keyword\">typeof</span> func&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keyof-强制类型校验\"><a href=\"#keyof-强制类型校验\" class=\"headerlink\" title=\"keyof 强制类型校验\"></a>keyof 强制类型校验</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getData&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span> ,K <span class=\"keyword\">extends</span> keyof T&gt;(<span class=\"attr\">o</span>:T,<span class=\"attr\">key</span>:K):T[K]&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getData</span>(data,<span class=\"string\">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部分参数可选\"><a href=\"#部分参数可选\" class=\"headerlink\" title=\"部分参数可选\"></a>部分参数可选</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pick选取原对象匹配到传入key的值 key只能是原对象存在的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Pick</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T[P];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exclude选取原对象匹配到传入key的值 key可以是原对象不存在的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Exclude</span>&lt;T, U&gt; = T <span class=\"keyword\">extends</span> U ? <span class=\"built_in\">never</span> : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Omit 拿到原对象没有匹配到传入的key的值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Omit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Partial将原对象的值变为可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Partial</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SelectPartial将原对象变为部分参数可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SelectPartial</span>&lt;T,K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Partial</span>&lt;<span class=\"title class_\">Pick</span>&lt;T,K&gt;&gt; &amp; <span class=\"title class_\">Omit</span>&lt;T,K&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Final</span> = <span class=\"title class_\">SelectPartial</span>&lt;<span class=\"title class_\">User</span>,<span class=\"string\">&#x27;id&#x27;</span> | <span class=\"string\">&#x27;name&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"交集和并集\"><a href=\"#交集和并集\" class=\"headerlink\" title=\"交集和并集\"></a>交集和并集</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FirstType</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">firstName</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">lastName</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SecondType</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">address</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExtractType</span> = <span class=\"title class_\">Extract</span>&lt;keyof <span class=\"title class_\">FirstType</span>,keyof <span class=\"title class_\">SecondType</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExcludeType</span> = <span class=\"title class_\">Exclude</span>&lt;keyof <span class=\"title class_\">FirstType</span>,keyof <span class=\"title class_\">SecondType</span>&gt; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Record-定义对象的key-value\"><a href=\"#Record-定义对象的key-value\" class=\"headerlink\" title=\"Record 定义对象的key value\"></a>Record 定义对象的key value</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Record</span>&lt;K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>, T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductCar</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">size</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">length</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">type</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">type</span> <span class=\"title class_\">Product</span> = <span class=\"title class_\">ProductCar</span>[]</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductCarIn</span> &#123;</span><br><span class=\"line\">     [<span class=\"attr\">key</span>:<span class=\"built_in\">string</span>]:<span class=\"title class_\">ProductCar</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">CarModel</span> &#123;</span><br><span class=\"line\">     <span class=\"title class_\">ProductCar</span> :<span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>,<span class=\"title class_\">ProductCar</span>&gt; = &#123;</span><br><span class=\"line\">         <span class=\"string\">&#x27;X5&#x27;</span>:&#123;</span><br><span class=\"line\">             <span class=\"attr\">size</span>:<span class=\"string\">&#x27;big&#x27;</span>,</span><br><span class=\"line\">             <span class=\"attr\">length</span>:<span class=\"number\">5080</span>,</span><br><span class=\"line\">             <span class=\"attr\">type</span>:<span class=\"string\">&#x27;suv&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NonNullable排除null-undefined\"><a href=\"#NonNullable排除null-undefined\" class=\"headerlink\" title=\"NonNullable排除null undefined\"></a>NonNullable排除null undefined</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NonNullableType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">nonNull</span>:<span class=\"title class_\">NonNullable</span>&lt;<span class=\"title class_\">NonNullableType</span>&gt; = <span class=\"string\">&#x27;ts-node&#x27;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ts唯一属性\"><a href=\"#ts唯一属性\" class=\"headerlink\" title=\"ts唯一属性\"></a>ts唯一属性</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROD</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;production mode&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DEV</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;development mode&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"构造函数参数类型-构造函数返回值类型\"><a href=\"#构造函数参数类型-构造函数返回值类型\" class=\"headerlink\" title=\"构造函数参数类型 构造函数返回值类型\"></a>构造函数参数类型 构造函数返回值类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数返回值类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">InstanceType</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; infer R ? R : <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数参数类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructorParameters</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserOne</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IConstruct</span>&lt;T <span class=\"keyword\">extends</span> new (...arg:<span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"keyword\">new</span> (...<span class=\"attr\">arg</span>:<span class=\"title class_\">ConstructorParameters</span>&lt;T&gt;) =&gt; <span class=\"title class_\">InstanceType</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserConstruct</span> = <span class=\"title class_\">IConstruct</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">UserOne</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">constr</span>:<span class=\"title class_\">UserConstruct</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"title class_\">UserOne</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// constr.type ==&gt; new (name:string) =&gt; UserOne</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInstance = <span class=\"keyword\">new</span> constr.<span class=\"title function_\">type</span>(<span class=\"string\">&#x27;jiong&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(userInstance.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"is-toArray\"><a href=\"#is-toArray\" class=\"headerlink\" title=\"is toArray\"></a>is toArray</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isString</span>(<span class=\"params\">a:<span class=\"built_in\">unknown</span></span>):a is <span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ToArray</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">unknown</span>[] ? T : T[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">arrData</span>:<span class=\"title class_\">ToArray</span>&lt;<span class=\"built_in\">string</span>&gt; = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"强制类型转换-as-const-元组转数组\"><a href=\"#强制类型转换-as-const-元组转数组\" class=\"headerlink\" title=\"强制类型转换  as const 元组转数组\"></a>强制类型转换 <const> as const 元组转数组</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> tuplify &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">unknown</span>[]&gt;(...<span class=\"attr\">eles</span>:T):T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> eles</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> respone :<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;jiong&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">age</span>:<span class=\"built_in\">number</span> = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">tuplify</span>(respone,age) </span><br><span class=\"line\">    <span class=\"comment\">// return[respone,age]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> item = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> [respone] = item</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasKey\"><a href=\"#hasKey\" class=\"headerlink\" title=\"hasKey\"></a>hasKey</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> hasKey&lt;O <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">obj</span>:O,<span class=\"attr\">key</span>:<span class=\"title class_\">PropertyKey</span>):key is keyof O&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"title function_\">hasOwnProperty</span>(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现PickPromise，能够获取泛型的类型\"><a href=\"#实现PickPromise，能够获取泛型的类型\" class=\"headerlink\" title=\"实现PickPromise，能够获取泛型的类型\"></a>实现PickPromise，能够获取泛型的类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PickPromise</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; = T <span class=\"keyword\">extends</span> <span class=\"title class_\">Promise</span>&lt;infer P&gt; ? P : <span class=\"built_in\">never</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"title class_\">PickPromise</span>&lt;A&gt; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"把对象的值的类型-提取成元组\"><a href=\"#把对象的值的类型-提取成元组\" class=\"headerlink\" title=\"把对象的值的类型 提取成元组\"></a>把对象的值的类型 提取成元组</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> objVol = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\">(<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>) =&gt;</span>&#123; <span class=\"keyword\">return</span> a + b&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetObjVal</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = T[keyof T]</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetObjKey</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> keyof T]:K</span><br><span class=\"line\">&#125;[keyof T]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ObjKey</span> = <span class=\"title class_\">GetObjKey</span>&lt;<span class=\"keyword\">typeof</span> objVol&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ObjVal</span> = <span class=\"title class_\">GetObjVal</span>&lt;<span class=\"keyword\">typeof</span> objVol&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"泛型放前面\"><a href=\"#泛型放前面\" class=\"headerlink\" title=\"泛型放前面\"></a>泛型放前面</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> C &#123;</span><br><span class=\"line\">    &lt;T&gt;(<span class=\"attr\">arg</span>:T):T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CC</span> = &lt;T&gt;<span class=\"function\">(<span class=\"params\">arg:T</span>) =&gt;</span> <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getDataA</span>:C = &lt;T&gt;(<span class=\"attr\">arg</span>:T):<span class=\"function\"><span class=\"params\">T</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getDataA&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getDataB</span>:<span class=\"variable constant_\">CC</span> = &lt;T&gt;(<span class=\"attr\">arg</span>:T):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;<span class=\"built_in\">number</span>&gt;(arg <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现一个ts的工具函数-GetOnlyFnProps-提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\"><a href=\"#实现一个ts的工具函数-GetOnlyFnProps-提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\" class=\"headerlink\" title=\"实现一个ts的工具函数 GetOnlyFnProps 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\"></a>实现一个ts的工具函数 GetOnlyFnProps<T> 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetOnlyFnKeys</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> keyof T]: T[K] <span class=\"keyword\">extends</span> <span class=\"title class_\">Function</span> ? K : <span class=\"built_in\">never</span></span><br><span class=\"line\">&#125;[keyof T]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetOnlyFnProps</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> <span class=\"title class_\">GetOnlyFnKeys</span>&lt;T&gt;]: T[K]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SomeObj</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    <span class=\"title function_\">add</span>():<span class=\"built_in\">void</span>,</span><br><span class=\"line\">    <span class=\"title function_\">des</span>():<span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CCC</span> = <span class=\"title class_\">GetOnlyFnKeys</span>&lt;<span class=\"title class_\">SomeObj</span>&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"Parameters-提取函数参数\"><a href=\"#Parameters-提取函数参数\" class=\"headerlink\" title=\"Parameters  提取函数参数\"></a>Parameters  提取函数参数</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Parameters</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">func</span> = (<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span></span>) =&gt; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> params = <span class=\"title class_\">Parameters</span>&lt;<span class=\"keyword\">typeof</span> func&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"keyof-强制类型校验\"><a href=\"#keyof-强制类型校验\" class=\"headerlink\" title=\"keyof 强制类型校验\"></a>keyof 强制类型校验</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getData&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span> ,K <span class=\"keyword\">extends</span> keyof T&gt;(<span class=\"attr\">o</span>:T,<span class=\"attr\">key</span>:K):T[K]&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getData</span>(data,<span class=\"string\">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部分参数可选\"><a href=\"#部分参数可选\" class=\"headerlink\" title=\"部分参数可选\"></a>部分参数可选</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pick选取原对象匹配到传入key的值 key只能是原对象存在的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Pick</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T[P];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exclude选取原对象匹配到传入key的值 key可以是原对象不存在的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Exclude</span>&lt;T, U&gt; = T <span class=\"keyword\">extends</span> U ? <span class=\"built_in\">never</span> : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Omit 拿到原对象没有匹配到传入的key的值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Omit</span>&lt;T, K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>&gt; = <span class=\"title class_\">Pick</span>&lt;T, <span class=\"title class_\">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Partial将原对象的值变为可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Partial</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SelectPartial将原对象变为部分参数可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SelectPartial</span>&lt;T,K <span class=\"keyword\">extends</span> keyof T&gt; = <span class=\"title class_\">Partial</span>&lt;<span class=\"title class_\">Pick</span>&lt;T,K&gt;&gt; &amp; <span class=\"title class_\">Omit</span>&lt;T,K&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Final</span> = <span class=\"title class_\">SelectPartial</span>&lt;<span class=\"title class_\">User</span>,<span class=\"string\">&#x27;id&#x27;</span> | <span class=\"string\">&#x27;name&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"交集和并集\"><a href=\"#交集和并集\" class=\"headerlink\" title=\"交集和并集\"></a>交集和并集</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FirstType</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">firstName</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">lastName</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SecondType</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">address</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExtractType</span> = <span class=\"title class_\">Extract</span>&lt;keyof <span class=\"title class_\">FirstType</span>,keyof <span class=\"title class_\">SecondType</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ExcludeType</span> = <span class=\"title class_\">Exclude</span>&lt;keyof <span class=\"title class_\">FirstType</span>,keyof <span class=\"title class_\">SecondType</span>&gt; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Record-定义对象的key-value\"><a href=\"#Record-定义对象的key-value\" class=\"headerlink\" title=\"Record 定义对象的key value\"></a>Record 定义对象的key value</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Record</span>&lt;K <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>, T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductCar</span> &#123;</span><br><span class=\"line\">     <span class=\"attr\">size</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">     <span class=\"attr\">length</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">     <span class=\"attr\">type</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">type</span> <span class=\"title class_\">Product</span> = <span class=\"title class_\">ProductCar</span>[]</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductCarIn</span> &#123;</span><br><span class=\"line\">     [<span class=\"attr\">key</span>:<span class=\"built_in\">string</span>]:<span class=\"title class_\">ProductCar</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">CarModel</span> &#123;</span><br><span class=\"line\">     <span class=\"title class_\">ProductCar</span> :<span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>,<span class=\"title class_\">ProductCar</span>&gt; = &#123;</span><br><span class=\"line\">         <span class=\"string\">&#x27;X5&#x27;</span>:&#123;</span><br><span class=\"line\">             <span class=\"attr\">size</span>:<span class=\"string\">&#x27;big&#x27;</span>,</span><br><span class=\"line\">             <span class=\"attr\">length</span>:<span class=\"number\">5080</span>,</span><br><span class=\"line\">             <span class=\"attr\">type</span>:<span class=\"string\">&#x27;suv&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NonNullable排除null-undefined\"><a href=\"#NonNullable排除null-undefined\" class=\"headerlink\" title=\"NonNullable排除null undefined\"></a>NonNullable排除null undefined</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NonNullableType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">nonNull</span>:<span class=\"title class_\">NonNullable</span>&lt;<span class=\"title class_\">NonNullableType</span>&gt; = <span class=\"string\">&#x27;ts-node&#x27;</span>  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ts唯一属性\"><a href=\"#ts唯一属性\" class=\"headerlink\" title=\"ts唯一属性\"></a>ts唯一属性</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROD</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;production mode&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DEV</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;development mode&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"构造函数参数类型-构造函数返回值类型\"><a href=\"#构造函数参数类型-构造函数返回值类型\" class=\"headerlink\" title=\"构造函数参数类型 构造函数返回值类型\"></a>构造函数参数类型 构造函数返回值类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数返回值类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">InstanceType</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; infer R ? R : <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数参数类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructorParameters</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">new</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserOne</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name:<span class=\"built_in\">string</span></span>)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IConstruct</span>&lt;T <span class=\"keyword\">extends</span> new (...arg:<span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"keyword\">new</span> (...<span class=\"attr\">arg</span>:<span class=\"title class_\">ConstructorParameters</span>&lt;T&gt;) =&gt; <span class=\"title class_\">InstanceType</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserConstruct</span> = <span class=\"title class_\">IConstruct</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">UserOne</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">constr</span>:<span class=\"title class_\">UserConstruct</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"title class_\">UserOne</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// constr.type ==&gt; new (name:string) =&gt; UserOne</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInstance = <span class=\"keyword\">new</span> constr.<span class=\"title function_\">type</span>(<span class=\"string\">&#x27;jiong&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(userInstance.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"is-toArray\"><a href=\"#is-toArray\" class=\"headerlink\" title=\"is toArray\"></a>is toArray</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isString</span>(<span class=\"params\">a:<span class=\"built_in\">unknown</span></span>):a is <span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ToArray</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">unknown</span>[] ? T : T[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">arrData</span>:<span class=\"title class_\">ToArray</span>&lt;<span class=\"built_in\">string</span>&gt; = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"强制类型转换-as-const-元组转数组\"><a href=\"#强制类型转换-as-const-元组转数组\" class=\"headerlink\" title=\"强制类型转换  as const 元组转数组\"></a>强制类型转换 <const> as const 元组转数组</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> tuplify &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">unknown</span>[]&gt;(...<span class=\"attr\">eles</span>:T):T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> eles</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> respone :<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;jiong&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">age</span>:<span class=\"built_in\">number</span> = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">tuplify</span>(respone,age) </span><br><span class=\"line\">    <span class=\"comment\">// return[respone,age]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> item = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> [respone] = item</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasKey\"><a href=\"#hasKey\" class=\"headerlink\" title=\"hasKey\"></a>hasKey</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> hasKey&lt;O <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">obj</span>:O,<span class=\"attr\">key</span>:<span class=\"title class_\">PropertyKey</span>):key is keyof O&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"title function_\">hasOwnProperty</span>(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现PickPromise，能够获取泛型的类型\"><a href=\"#实现PickPromise，能够获取泛型的类型\" class=\"headerlink\" title=\"实现PickPromise，能够获取泛型的类型\"></a>实现PickPromise，能够获取泛型的类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PickPromise</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; = T <span class=\"keyword\">extends</span> <span class=\"title class_\">Promise</span>&lt;infer P&gt; ? P : <span class=\"built_in\">never</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"title class_\">PickPromise</span>&lt;A&gt; </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"把对象的值的类型-提取成元组\"><a href=\"#把对象的值的类型-提取成元组\" class=\"headerlink\" title=\"把对象的值的类型 提取成元组\"></a>把对象的值的类型 提取成元组</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> objVol = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xxx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"function\">(<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>) =&gt;</span>&#123; <span class=\"keyword\">return</span> a + b&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetObjVal</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = T[keyof T]</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetObjKey</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> keyof T]:K</span><br><span class=\"line\">&#125;[keyof T]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ObjKey</span> = <span class=\"title class_\">GetObjKey</span>&lt;<span class=\"keyword\">typeof</span> objVol&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ObjVal</span> = <span class=\"title class_\">GetObjVal</span>&lt;<span class=\"keyword\">typeof</span> objVol&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"泛型放前面\"><a href=\"#泛型放前面\" class=\"headerlink\" title=\"泛型放前面\"></a>泛型放前面</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> C &#123;</span><br><span class=\"line\">    &lt;T&gt;(<span class=\"attr\">arg</span>:T):T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CC</span> = &lt;T&gt;<span class=\"function\">(<span class=\"params\">arg:T</span>) =&gt;</span> <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getDataA</span>:C = &lt;T&gt;(<span class=\"attr\">arg</span>:T):<span class=\"function\"><span class=\"params\">T</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getDataA&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getDataB</span>:<span class=\"variable constant_\">CC</span> = &lt;T&gt;(<span class=\"attr\">arg</span>:T):<span class=\"function\"><span class=\"params\">number</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;<span class=\"built_in\">number</span>&gt;(arg <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"实现一个ts的工具函数-GetOnlyFnProps-提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\"><a href=\"#实现一个ts的工具函数-GetOnlyFnProps-提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\" class=\"headerlink\" title=\"实现一个ts的工具函数 GetOnlyFnProps 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。\"></a>实现一个ts的工具函数 GetOnlyFnProps<T> 提取泛型T中字段类型是函数类型的工具函数，其中T属于一个对象。</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetOnlyFnKeys</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> keyof T]: T[K] <span class=\"keyword\">extends</span> <span class=\"title class_\">Function</span> ? K : <span class=\"built_in\">never</span></span><br><span class=\"line\">&#125;[keyof T]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetOnlyFnProps</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt; = &#123;</span><br><span class=\"line\">    [K <span class=\"keyword\">in</span> <span class=\"title class_\">GetOnlyFnKeys</span>&lt;T&gt;]: T[K]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SomeObj</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    <span class=\"title function_\">add</span>():<span class=\"built_in\">void</span>,</span><br><span class=\"line\">    <span class=\"title function_\">des</span>():<span class=\"built_in\">void</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CCC</span> = <span class=\"title class_\">GetOnlyFnKeys</span>&lt;<span class=\"title class_\">SomeObj</span>&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"webpack 优化","cover":"/img/hand-z.webp","_content":"\n### webpack 构建速度优化\n\n- 开启多线程构建:happypack(没有维护)\n- thread-loader 开启线程池\n\n   ```js\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.js$/,\n            include: path.resolve('src'),\n            use: [\n            'thread-loader',\n            // your expensive loader (e.g babel-loader)\n            ],\n        },\n        ],\n    },\n    };\n   ```\n- terser-webpack-plugin 开启多线程\n\n   ```js\n    module.exports = {\n    optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n            parallel: true,\n        }),\n      ],\n    },\n    };\n   ```\n\n- 缩小打包作用域:\n   1.include|exclude 确定需要解析编译的模块或排除不需要解析编译的模块\n\n   ```js\n    {\n  \"loader\": \"babel-loader\",\n  \"options\": {\n        \"exclude\": [\n        // \\\\ for Windows, \\/ for Mac OS and Linux\n        /node_modules[\\\\\\/]core-js/,\n        /node_modules[\\\\\\/]webpack[\\\\\\/]buildin/,\n        ],\n        \"presets\": [\n        \"@babel/preset-env\"\n        ]\n      }\n    }\n   ```\n   2. resolve.modules 告诉webpack在解析模块时应该搜索哪些目录\n\n   ```js\n   module.exports = {\n    //...\n    resolve: {\n        modules: ['node_modules'],\n    },\n   };\n   ```\n   3. resolve.extensions 减少不必要的后缀的解析\n\n   ```js\n   module.exports = {\n    //...\n    resolve: {\n        extensions: ['.js', '.json', '.wasm'],\n    },\n    };\n   ```\n   4. ignore-loader 例如ssr时打包的服务端的模块就可以使用该loader忽略对css的处理\n\n   ```js\n    module.exports = {\n    // other configurations\n    module: {\n        loaders: [\n        { test: /\\.css$/, loader: 'ignore-loader' }\n        ]\n    }\n    };\n   ```\n- 利用缓存提升二次编译速度\n   1. webpack5 cache\n\n   ```js\n   module.exports = {\n    cache: {\n        type: 'filesystem',\n        allowCollectingMemory: true,\n    },\n    };\n   ```\n   2. webpack4 cache\n\n   2.1 babel-loader 开启缓存\n\n   ```js\n    rules: [\n    {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n            optional: \"runtime\",\n            cacheDirectory: true\n        }\n    }\n    ]   \n   ```\n   2.2 cache-loader 开启缓存\n\n   ```js\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.ext$/,\n            use: ['cache-loader', ...loaders],\n            include: path.resolve('src'),\n        },\n        ],\n    },\n    };\n   ```\n   2.3 hard-source-webpack-plugin 开启缓存\n\n   ```js\n    var HardSourceWebpackPlugin = require('hard-source-webpack-plugin');\n    module.exports = {\n        context: // ...\n        entry: // ...\n        output: // ...\n        plugins: [\n            new HardSourceWebpackPlugin()\n        ]\n    }\n   ```\n- DllPlugin和DllReferencePlugin提供了拆分包的方法，可以极大地提高构建时的性能。\n  DllPlugin 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。\n  通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 __webpack_require__ 函数来 require 它们。 \n\n  webacpk --config webpack_dll.config.js 会生成entry中对用的js 和 mainifest.json js需要在index.html中引用\n  ```js\n    // webpack_dll.config.js\n    const path = require('path'); \n    const DllPlugin = require('webpack/lib/DllPlugin');\n    module.exports = {\n      // JS 执行入口文件\n      mode:'production',\n      entry: {\n        // 把 React 相关模块的放到一个单独的动态链接库\n        react: ['react', 'react-dom'],\n        // 把项目需要所有的 polyfill 放到一个单独的动态链接库\n        // polyfill: ['core-js/fn/object/assign', 'core-js/fn/promise', 'whatwg-fetch'],\n      },\n      output: {\n        // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，\n        // 也就是 entry 中配置的 react 和 polyfill\n        filename: '[name].dll.js',\n        // 输出的文件都放到 dist 目录下\n        path: path.resolve(__dirname, '../dist'),\n        // 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react\n        // 之所以在前面加上 _dll_ 是为了防止全局变量冲突\n        library: '_dll_[name]',\n      },\n      plugins: [\n        // 接入 DllPlugin\n        new DllPlugin({\n          // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n          // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n          // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n          name: '_dll_[name]',\n          // 描述动态链接库的 manifest.json 文件输出时的文件名称\n          path: path.join(__dirname, '../dist', '[name].manifest.json'),\n        }),\n      ],\n    };\n  ```\n\n- module.noParse 不需要解析的独立的模块或库如jq,lodash\n\n  ```js\n  module.exports = {\n    //...\n    module: {\n        noParse: /jquery|lodash/,\n    },\n  }\n  ```\n\n\n### webpack 打包体积优化\n\n- 代码压缩\n\n  1. terser-webpack-plugin 开启parallel:true 多进程并行压缩\n  2. mini-css-extract-plugin 将css提取生成css文件 通过optimize-css-assets-webpack-plugin插件(webapck5使用 css-minimizer-webpack-plugin插件) 使用cssnano压缩css \n\n- 提取公共资源\n  1. externals 将可以用cdn引入的资源 不打包直接通过cdn引入 如antd momentjs vue等\n\n  ```js\n    <script\n    src=\"https://code.jquery.com/jquery-3.1.0.js\"\n    integrity=\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"\n    crossorigin=\"anonymous\">\n    </script>\n\n    externals: {\n        jquery: 'jQuery'\n    }\n  ```\n  2. SplitChunksPlugin 对公共的chunk进行提取打包\n\n  ```js\n    module.exports = {\n    //...\n    optimization: {\n        splitChunks:{\n            chunks:'all',\n            maxInitialRequests:3,\n            maxAsyncRequests:5,\n            minChunks:3,\n            minSize:{\n                javascript:30 * 1024,\n                style:30 * 1024\n            },\n            maxSize:{\n                javascript:110 * 1024,\n                style:110 * 1024\n            },\n            cacheGroups:{\n                common:{\n                    chunks:'all',\n                    name:'common',\n                    priority:-20,\n                    enforce:true,\n                    reuseExistingChunk:true\n                }\n            }\n        }\n    };\n  ```\n\n\n- tree shaking\n  \n  1. unCss 和 mini-css-extract-plugin配合使用 移除无用的css\n  2. 尽量使用ES6的export导出语法对模块进行导出，提高treeshaking的效率 webpack5使用prepack进行计算清除\n  3. 禁用babel-loader的模块依赖解析，否则webpack接受到的就都是转换过的CommonJS形式的模块，无法进行tree-shaking\n  4. 开sideeffect:false告诉webpack无论导出的包里面有没有副作用只要没用到都tree shking掉\n\n- 图片压缩 \n  1. 使用基于Node图片压缩的库 imgaemin 配置image-webpack-loader  \n\n- scope hoisting\n  1. 构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销大。\n  scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量防止变量名冲突\n\n  2. scope hoisting 必须是ES6的语法，因为有很多第三方库仍采用CommonJS语法，为了充分发挥 scope hoisting\n  的作用，需要配置mainFields对第三方模块优先采用jsnext:main中指向的ES6模块化语法\n\n\n- webpack5 的新特性\n\n1. 支持实验性的toplevelawit\n2. 优化异步chunk名称冲突\n3. 废除了很多loader 如对图片处理 {test:/\\.(png|jpg|svg)$/,type:'asset'}\n4. 去掉了webpack的polyfill\n5. 使用prepack计算清除\n\n ","source":"_posts/webpackO.md","raw":"---\ntitle: webpack 优化 \ncover: /img/hand-z.webp\n---\n\n### webpack 构建速度优化\n\n- 开启多线程构建:happypack(没有维护)\n- thread-loader 开启线程池\n\n   ```js\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.js$/,\n            include: path.resolve('src'),\n            use: [\n            'thread-loader',\n            // your expensive loader (e.g babel-loader)\n            ],\n        },\n        ],\n    },\n    };\n   ```\n- terser-webpack-plugin 开启多线程\n\n   ```js\n    module.exports = {\n    optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n            parallel: true,\n        }),\n      ],\n    },\n    };\n   ```\n\n- 缩小打包作用域:\n   1.include|exclude 确定需要解析编译的模块或排除不需要解析编译的模块\n\n   ```js\n    {\n  \"loader\": \"babel-loader\",\n  \"options\": {\n        \"exclude\": [\n        // \\\\ for Windows, \\/ for Mac OS and Linux\n        /node_modules[\\\\\\/]core-js/,\n        /node_modules[\\\\\\/]webpack[\\\\\\/]buildin/,\n        ],\n        \"presets\": [\n        \"@babel/preset-env\"\n        ]\n      }\n    }\n   ```\n   2. resolve.modules 告诉webpack在解析模块时应该搜索哪些目录\n\n   ```js\n   module.exports = {\n    //...\n    resolve: {\n        modules: ['node_modules'],\n    },\n   };\n   ```\n   3. resolve.extensions 减少不必要的后缀的解析\n\n   ```js\n   module.exports = {\n    //...\n    resolve: {\n        extensions: ['.js', '.json', '.wasm'],\n    },\n    };\n   ```\n   4. ignore-loader 例如ssr时打包的服务端的模块就可以使用该loader忽略对css的处理\n\n   ```js\n    module.exports = {\n    // other configurations\n    module: {\n        loaders: [\n        { test: /\\.css$/, loader: 'ignore-loader' }\n        ]\n    }\n    };\n   ```\n- 利用缓存提升二次编译速度\n   1. webpack5 cache\n\n   ```js\n   module.exports = {\n    cache: {\n        type: 'filesystem',\n        allowCollectingMemory: true,\n    },\n    };\n   ```\n   2. webpack4 cache\n\n   2.1 babel-loader 开启缓存\n\n   ```js\n    rules: [\n    {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n            optional: \"runtime\",\n            cacheDirectory: true\n        }\n    }\n    ]   \n   ```\n   2.2 cache-loader 开启缓存\n\n   ```js\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.ext$/,\n            use: ['cache-loader', ...loaders],\n            include: path.resolve('src'),\n        },\n        ],\n    },\n    };\n   ```\n   2.3 hard-source-webpack-plugin 开启缓存\n\n   ```js\n    var HardSourceWebpackPlugin = require('hard-source-webpack-plugin');\n    module.exports = {\n        context: // ...\n        entry: // ...\n        output: // ...\n        plugins: [\n            new HardSourceWebpackPlugin()\n        ]\n    }\n   ```\n- DllPlugin和DllReferencePlugin提供了拆分包的方法，可以极大地提高构建时的性能。\n  DllPlugin 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。\n  通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 __webpack_require__ 函数来 require 它们。 \n\n  webacpk --config webpack_dll.config.js 会生成entry中对用的js 和 mainifest.json js需要在index.html中引用\n  ```js\n    // webpack_dll.config.js\n    const path = require('path'); \n    const DllPlugin = require('webpack/lib/DllPlugin');\n    module.exports = {\n      // JS 执行入口文件\n      mode:'production',\n      entry: {\n        // 把 React 相关模块的放到一个单独的动态链接库\n        react: ['react', 'react-dom'],\n        // 把项目需要所有的 polyfill 放到一个单独的动态链接库\n        // polyfill: ['core-js/fn/object/assign', 'core-js/fn/promise', 'whatwg-fetch'],\n      },\n      output: {\n        // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，\n        // 也就是 entry 中配置的 react 和 polyfill\n        filename: '[name].dll.js',\n        // 输出的文件都放到 dist 目录下\n        path: path.resolve(__dirname, '../dist'),\n        // 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react\n        // 之所以在前面加上 _dll_ 是为了防止全局变量冲突\n        library: '_dll_[name]',\n      },\n      plugins: [\n        // 接入 DllPlugin\n        new DllPlugin({\n          // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n          // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n          // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n          name: '_dll_[name]',\n          // 描述动态链接库的 manifest.json 文件输出时的文件名称\n          path: path.join(__dirname, '../dist', '[name].manifest.json'),\n        }),\n      ],\n    };\n  ```\n\n- module.noParse 不需要解析的独立的模块或库如jq,lodash\n\n  ```js\n  module.exports = {\n    //...\n    module: {\n        noParse: /jquery|lodash/,\n    },\n  }\n  ```\n\n\n### webpack 打包体积优化\n\n- 代码压缩\n\n  1. terser-webpack-plugin 开启parallel:true 多进程并行压缩\n  2. mini-css-extract-plugin 将css提取生成css文件 通过optimize-css-assets-webpack-plugin插件(webapck5使用 css-minimizer-webpack-plugin插件) 使用cssnano压缩css \n\n- 提取公共资源\n  1. externals 将可以用cdn引入的资源 不打包直接通过cdn引入 如antd momentjs vue等\n\n  ```js\n    <script\n    src=\"https://code.jquery.com/jquery-3.1.0.js\"\n    integrity=\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"\n    crossorigin=\"anonymous\">\n    </script>\n\n    externals: {\n        jquery: 'jQuery'\n    }\n  ```\n  2. SplitChunksPlugin 对公共的chunk进行提取打包\n\n  ```js\n    module.exports = {\n    //...\n    optimization: {\n        splitChunks:{\n            chunks:'all',\n            maxInitialRequests:3,\n            maxAsyncRequests:5,\n            minChunks:3,\n            minSize:{\n                javascript:30 * 1024,\n                style:30 * 1024\n            },\n            maxSize:{\n                javascript:110 * 1024,\n                style:110 * 1024\n            },\n            cacheGroups:{\n                common:{\n                    chunks:'all',\n                    name:'common',\n                    priority:-20,\n                    enforce:true,\n                    reuseExistingChunk:true\n                }\n            }\n        }\n    };\n  ```\n\n\n- tree shaking\n  \n  1. unCss 和 mini-css-extract-plugin配合使用 移除无用的css\n  2. 尽量使用ES6的export导出语法对模块进行导出，提高treeshaking的效率 webpack5使用prepack进行计算清除\n  3. 禁用babel-loader的模块依赖解析，否则webpack接受到的就都是转换过的CommonJS形式的模块，无法进行tree-shaking\n  4. 开sideeffect:false告诉webpack无论导出的包里面有没有副作用只要没用到都tree shking掉\n\n- 图片压缩 \n  1. 使用基于Node图片压缩的库 imgaemin 配置image-webpack-loader  \n\n- scope hoisting\n  1. 构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销大。\n  scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量防止变量名冲突\n\n  2. scope hoisting 必须是ES6的语法，因为有很多第三方库仍采用CommonJS语法，为了充分发挥 scope hoisting\n  的作用，需要配置mainFields对第三方模块优先采用jsnext:main中指向的ES6模块化语法\n\n\n- webpack5 的新特性\n\n1. 支持实验性的toplevelawit\n2. 优化异步chunk名称冲突\n3. 废除了很多loader 如对图片处理 {test:/\\.(png|jpg|svg)$/,type:'asset'}\n4. 去掉了webpack的polyfill\n5. 使用prepack计算清除\n\n ","slug":"webpackO","published":1,"date":"2021-08-03T03:40:14.233Z","updated":"2021-08-22T02:41:46.975Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40d000d42u77vi20z95","content":"<h3 id=\"webpack-构建速度优化\"><a href=\"#webpack-构建速度优化\" class=\"headerlink\" title=\"webpack 构建速度优化\"></a>webpack 构建速度优化</h3><ul>\n<li><p>开启多线程构建:happypack(没有维护)</p>\n</li>\n<li><p>thread-loader 开启线程池</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;thread-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// your expensive loader (e.g babel-loader)</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>terser-webpack-plugin 开启多线程</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缩小打包作用域:<br> 1.include|exclude 确定需要解析编译的模块或排除不需要解析编译的模块</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\"><span class=\"string\">&quot;loader&quot;</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;exclude&quot;</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// \\\\ for Windows, \\/ for Mac OS and Linux</span></span><br><span class=\"line\">      <span class=\"regexp\">/node_modules[\\\\\\/]core-js/</span>,</span><br><span class=\"line\">      <span class=\"regexp\">/node_modules[\\\\\\/]webpack[\\\\\\/]buildin/</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>resolve.modules 告诉webpack在解析模块时应该搜索哪些目录</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"> <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>resolve.extensions 减少不必要的后缀的解析</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"> <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.wasm&#x27;</span>],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>ignore-loader 例如ssr时打包的服务端的模块就可以使用该loader忽略对css的处理</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">// other configurations</span></span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loaders</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;ignore-loader&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>利用缓存提升二次编译速度</p>\n<ol>\n<li>webpack5 cache</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">type</span>: <span class=\"string\">&#x27;filesystem&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">allowCollectingMemory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack4 cache</li>\n</ol>\n<p> 2.1 babel-loader 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">optional</span>: <span class=\"string\">&quot;runtime&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]   </span><br></pre></td></tr></table></figure>\n<p> 2.2 cache-loader 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ext$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;cache-loader&#x27;</span>, ...loaders],</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p> 2.3 hard-source-webpack-plugin 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">HardSourceWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hard-source-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HardSourceWebpackPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>DllPlugin和DllReferencePlugin提供了拆分包的方法，可以极大地提高构建时的性能。<br>DllPlugin 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。<br>通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <strong>webpack_require</strong> 函数来 require 它们。 </p>\n<p>webacpk –config webpack_dll.config.js 会生成entry中对用的js 和 mainifest.json js需要在index.html中引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack_dll.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DllPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack/lib/DllPlugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// JS 执行入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把 React 相关模块的放到一个单独的动态链接库</span></span><br><span class=\"line\">    <span class=\"attr\">react</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 把项目需要所有的 polyfill 放到一个单独的动态链接库</span></span><br><span class=\"line\">    <span class=\"comment\">// polyfill: [&#x27;core-js/fn/object/assign&#x27;, &#x27;core-js/fn/promise&#x27;, &#x27;whatwg-fetch&#x27;],</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是 entry 中配置的 react 和 polyfill</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].dll.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件都放到 dist 目录下</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react</span></span><br><span class=\"line\">    <span class=\"comment\">// 之所以在前面加上 _dll_ 是为了防止全局变量冲突</span></span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;_dll_[name]&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 接入 DllPlugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">DllPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动态链接库的全局变量名称，需要和 output.library 中保持一致</span></span><br><span class=\"line\">      <span class=\"comment\">// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值</span></span><br><span class=\"line\">      <span class=\"comment\">// 例如 react.manifest.json 中就有 &quot;name&quot;: &quot;_dll_react&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;_dll_[name]&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 描述动态链接库的 manifest.json 文件输出时的文件名称</span></span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>, <span class=\"string\">&#x27;[name].manifest.json&#x27;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>module.noParse 不需要解析的独立的模块或库如jq,lodash</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">noParse</span>: <span class=\"regexp\">/jquery|lodash/</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"webpack-打包体积优化\"><a href=\"#webpack-打包体积优化\" class=\"headerlink\" title=\"webpack 打包体积优化\"></a>webpack 打包体积优化</h3><ul>\n<li><p>代码压缩</p>\n<ol>\n<li>terser-webpack-plugin 开启parallel:true 多进程并行压缩</li>\n<li>mini-css-extract-plugin 将css提取生成css文件 通过optimize-css-assets-webpack-plugin插件(webapck5使用 css-minimizer-webpack-plugin插件) 使用cssnano压缩css</li>\n</ol>\n</li>\n<li><p>提取公共资源</p>\n<ol>\n<li>externals 将可以用cdn引入的资源 不打包直接通过cdn引入 如antd momentjs vue等</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">src=<span class=\"string\">&quot;https://code.jquery.com/jquery-3.1.0.js&quot;</span></span><br><span class=\"line\">integrity=<span class=\"string\">&quot;sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=&quot;</span></span><br><span class=\"line\">crossorigin=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jquery</span>: <span class=\"string\">&#x27;jQuery&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>SplitChunksPlugin 对公共的chunk进行提取打包</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">javascript</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">            <span class=\"attr\">style</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">maxSize</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">javascript</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">            <span class=\"attr\">style</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">common</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">name</span>:<span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">priority</span>:-<span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"attr\">enforce</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">reuseExistingChunk</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>tree shaking</p>\n<ol>\n<li>unCss 和 mini-css-extract-plugin配合使用 移除无用的css</li>\n<li>尽量使用ES6的export导出语法对模块进行导出，提高treeshaking的效率 webpack5使用prepack进行计算清除</li>\n<li>禁用babel-loader的模块依赖解析，否则webpack接受到的就都是转换过的CommonJS形式的模块，无法进行tree-shaking</li>\n<li>开sideeffect:false告诉webpack无论导出的包里面有没有副作用只要没用到都tree shking掉</li>\n</ol>\n</li>\n<li><p>图片压缩 </p>\n<ol>\n<li>使用基于Node图片压缩的库 imgaemin 配置image-webpack-loader</li>\n</ol>\n</li>\n<li><p>scope hoisting</p>\n<ol>\n<li><p>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销大。<br>scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量防止变量名冲突</p>\n</li>\n<li><p>scope hoisting 必须是ES6的语法，因为有很多第三方库仍采用CommonJS语法，为了充分发挥 scope hoisting<br>的作用，需要配置mainFields对第三方模块优先采用jsnext:main中指向的ES6模块化语法</p>\n</li>\n</ol>\n</li>\n<li><p>webpack5 的新特性</p>\n</li>\n</ul>\n<ol>\n<li>支持实验性的toplevelawit</li>\n<li>优化异步chunk名称冲突</li>\n<li>废除了很多loader 如对图片处理 {test:&#x2F;.(png|jpg|svg)$&#x2F;,type:’asset’}</li>\n<li>去掉了webpack的polyfill</li>\n<li>使用prepack计算清除</li>\n</ol>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"webpack-构建速度优化\"><a href=\"#webpack-构建速度优化\" class=\"headerlink\" title=\"webpack 构建速度优化\"></a>webpack 构建速度优化</h3><ul>\n<li><p>开启多线程构建:happypack(没有维护)</p>\n</li>\n<li><p>thread-loader 开启线程池</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;thread-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// your expensive loader (e.g babel-loader)</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>terser-webpack-plugin 开启多线程</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缩小打包作用域:<br> 1.include|exclude 确定需要解析编译的模块或排除不需要解析编译的模块</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\"><span class=\"string\">&quot;loader&quot;</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;exclude&quot;</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// \\\\ for Windows, \\/ for Mac OS and Linux</span></span><br><span class=\"line\">      <span class=\"regexp\">/node_modules[\\\\\\/]core-js/</span>,</span><br><span class=\"line\">      <span class=\"regexp\">/node_modules[\\\\\\/]webpack[\\\\\\/]buildin/</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>resolve.modules 告诉webpack在解析模块时应该搜索哪些目录</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"> <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">modules</span>: [<span class=\"string\">&#x27;node_modules&#x27;</span>],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>resolve.extensions 减少不必要的后缀的解析</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"> <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>, <span class=\"string\">&#x27;.wasm&#x27;</span>],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>ignore-loader 例如ssr时打包的服务端的模块就可以使用该loader忽略对css的处理</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">// other configurations</span></span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loaders</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;ignore-loader&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>利用缓存提升二次编译速度</p>\n<ol>\n<li>webpack5 cache</li>\n</ol>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">type</span>: <span class=\"string\">&#x27;filesystem&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">allowCollectingMemory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>webpack4 cache</li>\n</ol>\n<p> 2.1 babel-loader 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">optional</span>: <span class=\"string\">&quot;runtime&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]   </span><br></pre></td></tr></table></figure>\n<p> 2.2 cache-loader 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ext$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;cache-loader&#x27;</span>, ...loaders],</span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p> 2.3 hard-source-webpack-plugin 开启缓存</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">HardSourceWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hard-source-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HardSourceWebpackPlugin</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>DllPlugin和DllReferencePlugin提供了拆分包的方法，可以极大地提高构建时的性能。<br>DllPlugin 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。<br>通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <strong>webpack_require</strong> 函数来 require 它们。 </p>\n<p>webacpk –config webpack_dll.config.js 会生成entry中对用的js 和 mainifest.json js需要在index.html中引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack_dll.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DllPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack/lib/DllPlugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// JS 执行入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把 React 相关模块的放到一个单独的动态链接库</span></span><br><span class=\"line\">    <span class=\"attr\">react</span>: [<span class=\"string\">&#x27;react&#x27;</span>, <span class=\"string\">&#x27;react-dom&#x27;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 把项目需要所有的 polyfill 放到一个单独的动态链接库</span></span><br><span class=\"line\">    <span class=\"comment\">// polyfill: [&#x27;core-js/fn/object/assign&#x27;, &#x27;core-js/fn/promise&#x27;, &#x27;whatwg-fetch&#x27;],</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是 entry 中配置的 react 和 polyfill</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].dll.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件都放到 dist 目录下</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react</span></span><br><span class=\"line\">    <span class=\"comment\">// 之所以在前面加上 _dll_ 是为了防止全局变量冲突</span></span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;_dll_[name]&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 接入 DllPlugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">DllPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动态链接库的全局变量名称，需要和 output.library 中保持一致</span></span><br><span class=\"line\">      <span class=\"comment\">// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值</span></span><br><span class=\"line\">      <span class=\"comment\">// 例如 react.manifest.json 中就有 &quot;name&quot;: &quot;_dll_react&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;_dll_[name]&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 描述动态链接库的 manifest.json 文件输出时的文件名称</span></span><br><span class=\"line\">      <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../dist&#x27;</span>, <span class=\"string\">&#x27;[name].manifest.json&#x27;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>module.noParse 不需要解析的独立的模块或库如jq,lodash</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">noParse</span>: <span class=\"regexp\">/jquery|lodash/</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"webpack-打包体积优化\"><a href=\"#webpack-打包体积优化\" class=\"headerlink\" title=\"webpack 打包体积优化\"></a>webpack 打包体积优化</h3><ul>\n<li><p>代码压缩</p>\n<ol>\n<li>terser-webpack-plugin 开启parallel:true 多进程并行压缩</li>\n<li>mini-css-extract-plugin 将css提取生成css文件 通过optimize-css-assets-webpack-plugin插件(webapck5使用 css-minimizer-webpack-plugin插件) 使用cssnano压缩css</li>\n</ol>\n</li>\n<li><p>提取公共资源</p>\n<ol>\n<li>externals 将可以用cdn引入的资源 不打包直接通过cdn引入 如antd momentjs vue等</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">src=<span class=\"string\">&quot;https://code.jquery.com/jquery-3.1.0.js&quot;</span></span><br><span class=\"line\">integrity=<span class=\"string\">&quot;sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=&quot;</span></span><br><span class=\"line\">crossorigin=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jquery</span>: <span class=\"string\">&#x27;jQuery&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>SplitChunksPlugin 对公共的chunk进行提取打包</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">javascript</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">            <span class=\"attr\">style</span>:<span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">maxSize</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">javascript</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">            <span class=\"attr\">style</span>:<span class=\"number\">110</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">common</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">chunks</span>:<span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">name</span>:<span class=\"string\">&#x27;common&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">priority</span>:-<span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"attr\">enforce</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">reuseExistingChunk</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>tree shaking</p>\n<ol>\n<li>unCss 和 mini-css-extract-plugin配合使用 移除无用的css</li>\n<li>尽量使用ES6的export导出语法对模块进行导出，提高treeshaking的效率 webpack5使用prepack进行计算清除</li>\n<li>禁用babel-loader的模块依赖解析，否则webpack接受到的就都是转换过的CommonJS形式的模块，无法进行tree-shaking</li>\n<li>开sideeffect:false告诉webpack无论导出的包里面有没有副作用只要没用到都tree shking掉</li>\n</ol>\n</li>\n<li><p>图片压缩 </p>\n<ol>\n<li>使用基于Node图片压缩的库 imgaemin 配置image-webpack-loader</li>\n</ol>\n</li>\n<li><p>scope hoisting</p>\n<ol>\n<li><p>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销大。<br>scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量防止变量名冲突</p>\n</li>\n<li><p>scope hoisting 必须是ES6的语法，因为有很多第三方库仍采用CommonJS语法，为了充分发挥 scope hoisting<br>的作用，需要配置mainFields对第三方模块优先采用jsnext:main中指向的ES6模块化语法</p>\n</li>\n</ol>\n</li>\n<li><p>webpack5 的新特性</p>\n</li>\n</ul>\n<ol>\n<li>支持实验性的toplevelawit</li>\n<li>优化异步chunk名称冲突</li>\n<li>废除了很多loader 如对图片处理 {test:&#x2F;.(png|jpg|svg)$&#x2F;,type:’asset’}</li>\n<li>去掉了webpack的polyfill</li>\n<li>使用prepack计算清除</li>\n</ol>\n"},{"title":"webpack loader 和 plugins","cover":"/img/webpack.webp","_content":"\n### 如何编写一个最简版的babel-loader\n\n- babel-loader的配置，复制的babel-loader的配置\n```js\nconst { resolve } = require('path')\nmodule.exports = {\n    module: {\n        rules: [\n          {\n            test: /\\.m?js$/,\n            exclude: /node_modules/,\n            use: {\n              loader: resolve(__dirname,'./js-loader.js'),\n              options: {\n                presets: [\n                  ['@babel/preset-env', { targets: \"defaults\" }]\n                ]\n              }\n            }\n          }\n        ]\n    }\n}\n```\n\n- js-loader.js引入了acorn,acorn-walk,magic-string,loader-utils。loader-utils获取你配置的options，acorn解析js生成ast树，acorn-walk遍历生成的ast树，magic-string负责把字符串改写或者添加你需要的类容，pitch方法可以在loader执行前加入你所需要的内容。\n```js\nconst acorn = require('acorn');\nconst walk = require('acorn-walk');\nconst MagicString = require( 'magic-string' );\nconst loadUtils = require('loader-utils');\n\nmodule.exports = function(context){\n    console.log(this.data.value,'👀')\n    const options = loadUtils.getOptions(this);\n    console.log(options,'🐶')\n    const ast = acorn.parse(context);\n    console.log(ast,'🍎')\n    const code = new MagicString(context);\n    console.log(code,'🚗')\n    walk.simple(ast,{\n        VariableDeclaration(node){\n            console.log(node,'🚀')\n            const { start } = node;\n            code.overwrite(start,start + 5,'var')\n        },\n        ExpressionStatement(node){\n            console.log(node,'🌹')\n            const { end } = node;\n            code.overwrite(end  -1,end,'+ \"添加的元素\")')\n        }\n    })\n    return code.toString();\n}\n\nmodule.exports.pitch = function(r,prerequest,data){\n    data.value = '人众无知'\n}\n```\n- 生成的dist中的main.js可以看到已经用var替换了const，并添加了对应的字符。 \n```js\n/******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/***/ (() => {\n\neval(\"var jiong = '🤔囧';\\nconsole.log(jiong+ \\\"添加的元素\\\")\\n\\n//# sourceURL=webpack://loader/./src/index.js?\");\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval devtool is used.\n/******/ \tvar __webpack_exports__ = {};\n/******/ \t__webpack_modules__[\"./src/index.js\"]();\n/******/ \t\n/******/ })()\n```\n\n\n### tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。\n```js\n// webpack/lib/Compiler.js  这里的this指代的是compiler实例\nthis.hooks = Object.freeze({\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tinitialize: new SyncHook([]),\n\t\t\t/** @type {SyncBailHook<[Compilation], boolean>} */\n\t\t\tshouldEmit: new SyncBailHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Stats]>} */\n\t\t\tdone: new AsyncSeriesHook([\"stats\"]),\n\t\t\t/** @type {SyncHook<[Stats]>} */\n\t\t\tafterDone: new SyncHook([\"stats\"]),\n\t\t\t/** @type {AsyncSeriesHook<[]>} */\n\t\t\tadditionalPass: new AsyncSeriesHook([]),\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\tbeforeRun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\trun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\temit: new AsyncSeriesHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[string, AssetEmittedInfo]>} */\n\t\t\tassetEmitted: new AsyncSeriesHook([\"file\", \"info\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\tafterEmit: new AsyncSeriesHook([\"compilation\"]),\n\n\t\t\t/** @type {SyncHook<[Compilation, CompilationParams]>} */\n\t\t\tthisCompilation: new SyncHook([\"compilation\", \"params\"]),\n\t\t\t/** @type {SyncHook<[Compilation, CompilationParams]>} */\n\t\t\tcompilation: new SyncHook([\"compilation\", \"params\"]),\n\t\t\t/** @type {SyncHook<[NormalModuleFactory]>} */\n\t\t\tnormalModuleFactory: new SyncHook([\"normalModuleFactory\"]),\n\t\t\t/** @type {SyncHook<[ContextModuleFactory]>}  */\n\t\t\tcontextModuleFactory: new SyncHook([\"contextModuleFactory\"]),\n\n\t\t\t/** @type {AsyncSeriesHook<[CompilationParams]>} */\n\t\t\tbeforeCompile: new AsyncSeriesHook([\"params\"]),\n\t\t\t/** @type {SyncHook<[CompilationParams]>} */\n\t\t\tcompile: new SyncHook([\"params\"]),\n\t\t\t/** @type {AsyncParallelHook<[Compilation]>} */\n\t\t\tmake: new AsyncParallelHook([\"compilation\"]),\n\t\t\t/** @type {AsyncParallelHook<[Compilation]>} */\n\t\t\tfinishMake: new AsyncSeriesHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\tafterCompile: new AsyncSeriesHook([\"compilation\"]),\n\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\twatchRun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {SyncHook<[Error]>} */\n\t\t\tfailed: new SyncHook([\"error\"]),\n\t\t\t/** @type {SyncHook<[string | null, number]>} */\n\t\t\tinvalid: new SyncHook([\"filename\", \"changeTime\"]),\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\twatchClose: new SyncHook([]),\n\t\t\t/** @type {AsyncSeriesHook<[]>} */\n\t\t\tshutdown: new AsyncSeriesHook([]),\n\n\t\t\t/** @type {SyncBailHook<[string, string, any[]], true>} */\n\t\t\tinfrastructureLog: new SyncBailHook([\"origin\", \"type\", \"args\"]),\n\n\t\t\t// TODO the following hooks are weirdly located here\n\t\t\t// TODO move them for webpack 5\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tenvironment: new SyncHook([]),\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tafterEnvironment: new SyncHook([]),\n\t\t\t/** @type {SyncHook<[Compiler]>} */\n\t\t\tafterPlugins: new SyncHook([\"compiler\"]),\n\t\t\t/** @type {SyncHook<[Compiler]>} */\n\t\t\tafterResolvers: new SyncHook([\"compiler\"]),\n\t\t\t/** @type {SyncBailHook<[string, Entry], boolean>} */\n\t\t\tentryOption: new SyncBailHook([\"context\", \"entry\"])\n\t\t});\n    // tapable库\n    const {\n\t\t\tSyncHook,\n\t\t\tSyncBailHook,\n\t\t\tSyncWaterfallHook,\n\t\t\tSyncLoopHook,\n\t\t\tAsyncParallelHook,\n\t\t\tAsyncParallelBailHook,\n\t\t\tAsyncSeriesHook,\n\t\t\tAsyncSeriesBailHook,\n\t\t\tAsyncSeriesWaterfallHook\n\t\t } = require(\"tapable\");\n\n\t\t1.SyncHook 同步串行 不关心监听函数的返回值\n\t\t2.SyncBailHook 同步串行 只要监听函数中有一个函数的返回值不为null,则跳过剩下所有的逻辑\n\t\t3.SyncWaterfallHook 同步串行 上一个监听函数的返回值可以传递给下一个监听函数\n\t\t4.SyncLoopHook 同步循环 当监听函数被触发的时候，如果该监听函数返回true时则这个监听函数会反复执行，如果返回undefined 则表示退出循环\n\t\t5.AsyncParallelHook 异步并发 不关心监听函数的返回值\n\t\t6.AsyncParallelBailHook 异步并发 只要监听函数的返回值不为null，就会忽略后面的监听函数执行，直接跳跃到callAsync等触发函数绑定的回调函数，然后执行这个被绑定的回调函数\n\t\t7.AsyncSeriesHook 异步串行 不关心callback的参数\n\t\t8.AsyncSeriesBailHook 异步串行 callback的参数不为null，就会直接执行callAsync等触发函数绑定的回调函数\n\t\t9.AsyncSeriesWaterfallHook 异步串行 上一个监听函数中的callback(err,data)的第二个参数，可以作为下一个监听函数的参数\n```","source":"_posts/webpack-plugin-loader.md","raw":"---\ntitle: webpack loader 和 plugins   \ncover: /img/webpack.webp\n---\n\n### 如何编写一个最简版的babel-loader\n\n- babel-loader的配置，复制的babel-loader的配置\n```js\nconst { resolve } = require('path')\nmodule.exports = {\n    module: {\n        rules: [\n          {\n            test: /\\.m?js$/,\n            exclude: /node_modules/,\n            use: {\n              loader: resolve(__dirname,'./js-loader.js'),\n              options: {\n                presets: [\n                  ['@babel/preset-env', { targets: \"defaults\" }]\n                ]\n              }\n            }\n          }\n        ]\n    }\n}\n```\n\n- js-loader.js引入了acorn,acorn-walk,magic-string,loader-utils。loader-utils获取你配置的options，acorn解析js生成ast树，acorn-walk遍历生成的ast树，magic-string负责把字符串改写或者添加你需要的类容，pitch方法可以在loader执行前加入你所需要的内容。\n```js\nconst acorn = require('acorn');\nconst walk = require('acorn-walk');\nconst MagicString = require( 'magic-string' );\nconst loadUtils = require('loader-utils');\n\nmodule.exports = function(context){\n    console.log(this.data.value,'👀')\n    const options = loadUtils.getOptions(this);\n    console.log(options,'🐶')\n    const ast = acorn.parse(context);\n    console.log(ast,'🍎')\n    const code = new MagicString(context);\n    console.log(code,'🚗')\n    walk.simple(ast,{\n        VariableDeclaration(node){\n            console.log(node,'🚀')\n            const { start } = node;\n            code.overwrite(start,start + 5,'var')\n        },\n        ExpressionStatement(node){\n            console.log(node,'🌹')\n            const { end } = node;\n            code.overwrite(end  -1,end,'+ \"添加的元素\")')\n        }\n    })\n    return code.toString();\n}\n\nmodule.exports.pitch = function(r,prerequest,data){\n    data.value = '人众无知'\n}\n```\n- 生成的dist中的main.js可以看到已经用var替换了const，并添加了对应的字符。 \n```js\n/******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/***/ (() => {\n\neval(\"var jiong = '🤔囧';\\nconsole.log(jiong+ \\\"添加的元素\\\")\\n\\n//# sourceURL=webpack://loader/./src/index.js?\");\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval devtool is used.\n/******/ \tvar __webpack_exports__ = {};\n/******/ \t__webpack_modules__[\"./src/index.js\"]();\n/******/ \t\n/******/ })()\n```\n\n\n### tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。\n```js\n// webpack/lib/Compiler.js  这里的this指代的是compiler实例\nthis.hooks = Object.freeze({\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tinitialize: new SyncHook([]),\n\t\t\t/** @type {SyncBailHook<[Compilation], boolean>} */\n\t\t\tshouldEmit: new SyncBailHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Stats]>} */\n\t\t\tdone: new AsyncSeriesHook([\"stats\"]),\n\t\t\t/** @type {SyncHook<[Stats]>} */\n\t\t\tafterDone: new SyncHook([\"stats\"]),\n\t\t\t/** @type {AsyncSeriesHook<[]>} */\n\t\t\tadditionalPass: new AsyncSeriesHook([]),\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\tbeforeRun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\trun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\temit: new AsyncSeriesHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[string, AssetEmittedInfo]>} */\n\t\t\tassetEmitted: new AsyncSeriesHook([\"file\", \"info\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\tafterEmit: new AsyncSeriesHook([\"compilation\"]),\n\n\t\t\t/** @type {SyncHook<[Compilation, CompilationParams]>} */\n\t\t\tthisCompilation: new SyncHook([\"compilation\", \"params\"]),\n\t\t\t/** @type {SyncHook<[Compilation, CompilationParams]>} */\n\t\t\tcompilation: new SyncHook([\"compilation\", \"params\"]),\n\t\t\t/** @type {SyncHook<[NormalModuleFactory]>} */\n\t\t\tnormalModuleFactory: new SyncHook([\"normalModuleFactory\"]),\n\t\t\t/** @type {SyncHook<[ContextModuleFactory]>}  */\n\t\t\tcontextModuleFactory: new SyncHook([\"contextModuleFactory\"]),\n\n\t\t\t/** @type {AsyncSeriesHook<[CompilationParams]>} */\n\t\t\tbeforeCompile: new AsyncSeriesHook([\"params\"]),\n\t\t\t/** @type {SyncHook<[CompilationParams]>} */\n\t\t\tcompile: new SyncHook([\"params\"]),\n\t\t\t/** @type {AsyncParallelHook<[Compilation]>} */\n\t\t\tmake: new AsyncParallelHook([\"compilation\"]),\n\t\t\t/** @type {AsyncParallelHook<[Compilation]>} */\n\t\t\tfinishMake: new AsyncSeriesHook([\"compilation\"]),\n\t\t\t/** @type {AsyncSeriesHook<[Compilation]>} */\n\t\t\tafterCompile: new AsyncSeriesHook([\"compilation\"]),\n\n\t\t\t/** @type {AsyncSeriesHook<[Compiler]>} */\n\t\t\twatchRun: new AsyncSeriesHook([\"compiler\"]),\n\t\t\t/** @type {SyncHook<[Error]>} */\n\t\t\tfailed: new SyncHook([\"error\"]),\n\t\t\t/** @type {SyncHook<[string | null, number]>} */\n\t\t\tinvalid: new SyncHook([\"filename\", \"changeTime\"]),\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\twatchClose: new SyncHook([]),\n\t\t\t/** @type {AsyncSeriesHook<[]>} */\n\t\t\tshutdown: new AsyncSeriesHook([]),\n\n\t\t\t/** @type {SyncBailHook<[string, string, any[]], true>} */\n\t\t\tinfrastructureLog: new SyncBailHook([\"origin\", \"type\", \"args\"]),\n\n\t\t\t// TODO the following hooks are weirdly located here\n\t\t\t// TODO move them for webpack 5\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tenvironment: new SyncHook([]),\n\t\t\t/** @type {SyncHook<[]>} */\n\t\t\tafterEnvironment: new SyncHook([]),\n\t\t\t/** @type {SyncHook<[Compiler]>} */\n\t\t\tafterPlugins: new SyncHook([\"compiler\"]),\n\t\t\t/** @type {SyncHook<[Compiler]>} */\n\t\t\tafterResolvers: new SyncHook([\"compiler\"]),\n\t\t\t/** @type {SyncBailHook<[string, Entry], boolean>} */\n\t\t\tentryOption: new SyncBailHook([\"context\", \"entry\"])\n\t\t});\n    // tapable库\n    const {\n\t\t\tSyncHook,\n\t\t\tSyncBailHook,\n\t\t\tSyncWaterfallHook,\n\t\t\tSyncLoopHook,\n\t\t\tAsyncParallelHook,\n\t\t\tAsyncParallelBailHook,\n\t\t\tAsyncSeriesHook,\n\t\t\tAsyncSeriesBailHook,\n\t\t\tAsyncSeriesWaterfallHook\n\t\t } = require(\"tapable\");\n\n\t\t1.SyncHook 同步串行 不关心监听函数的返回值\n\t\t2.SyncBailHook 同步串行 只要监听函数中有一个函数的返回值不为null,则跳过剩下所有的逻辑\n\t\t3.SyncWaterfallHook 同步串行 上一个监听函数的返回值可以传递给下一个监听函数\n\t\t4.SyncLoopHook 同步循环 当监听函数被触发的时候，如果该监听函数返回true时则这个监听函数会反复执行，如果返回undefined 则表示退出循环\n\t\t5.AsyncParallelHook 异步并发 不关心监听函数的返回值\n\t\t6.AsyncParallelBailHook 异步并发 只要监听函数的返回值不为null，就会忽略后面的监听函数执行，直接跳跃到callAsync等触发函数绑定的回调函数，然后执行这个被绑定的回调函数\n\t\t7.AsyncSeriesHook 异步串行 不关心callback的参数\n\t\t8.AsyncSeriesBailHook 异步串行 callback的参数不为null，就会直接执行callAsync等触发函数绑定的回调函数\n\t\t9.AsyncSeriesWaterfallHook 异步串行 上一个监听函数中的callback(err,data)的第二个参数，可以作为下一个监听函数的参数\n```","slug":"webpack-plugin-loader","published":1,"date":"2021-08-26T03:49:59.135Z","updated":"2021-08-27T08:14:17.373Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40d000e42u72y7ebqa0","content":"<h3 id=\"如何编写一个最简版的babel-loader\"><a href=\"#如何编写一个最简版的babel-loader\" class=\"headerlink\" title=\"如何编写一个最简版的babel-loader\"></a>如何编写一个最简版的babel-loader</h3><ul>\n<li><p>babel-loader的配置，复制的babel-loader的配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">loader</span>: <span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./js-loader.js&#x27;</span>),</span><br><span class=\"line\">              <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">                  [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class=\"attr\">targets</span>: <span class=\"string\">&quot;defaults&quot;</span> &#125;]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js-loader.js引入了acorn,acorn-walk,magic-string,loader-utils。loader-utils获取你配置的options，acorn解析js生成ast树，acorn-walk遍历生成的ast树，magic-string负责把字符串改写或者添加你需要的类容，pitch方法可以在loader执行前加入你所需要的内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> acorn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;acorn&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> walk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;acorn-walk&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MagicString</span> = <span class=\"built_in\">require</span>( <span class=\"string\">&#x27;magic-string&#x27;</span> );</span><br><span class=\"line\"><span class=\"keyword\">const</span> loadUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">value</span>,<span class=\"string\">&#x27;👀&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = loadUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options,<span class=\"string\">&#x27;🐶&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = acorn.<span class=\"title function_\">parse</span>(context);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ast,<span class=\"string\">&#x27;🍎&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = <span class=\"keyword\">new</span> <span class=\"title class_\">MagicString</span>(context);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(code,<span class=\"string\">&#x27;🚗&#x27;</span>)</span><br><span class=\"line\">    walk.<span class=\"title function_\">simple</span>(ast,&#123;</span><br><span class=\"line\">        <span class=\"title class_\">VariableDeclaration</span>(node)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node,<span class=\"string\">&#x27;🚀&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; start &#125; = node;</span><br><span class=\"line\">            code.<span class=\"title function_\">overwrite</span>(start,start + <span class=\"number\">5</span>,<span class=\"string\">&#x27;var&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title class_\">ExpressionStatement</span>(node)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node,<span class=\"string\">&#x27;🌹&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; end &#125; = node;</span><br><span class=\"line\">            code.<span class=\"title function_\">overwrite</span>(end  -<span class=\"number\">1</span>,end,<span class=\"string\">&#x27;+ &quot;添加的元素&quot;)&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"keyword\">function</span>(<span class=\"params\">r,prerequest,data</span>)&#123;</span><br><span class=\"line\">    data.<span class=\"property\">value</span> = <span class=\"string\">&#x27;人众无知&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成的dist中的main.js可以看到已经用var替换了const，并添加了对应的字符。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_modules__ = (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./src/index.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./src/index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**********************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;var jiong = &#x27;🤔囧&#x27;;\\nconsole.log(jiong+ \\&quot;添加的元素\\&quot;)\\n\\n//# sourceURL=webpack://loader/./src/index.js?&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// startup</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_modules__[<span class=\"string\">&quot;./src/index.js&quot;</span>]();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"tapable-webpack处理钩子函数的库，负责把插件挂起到compiler上。\"><a href=\"#tapable-webpack处理钩子函数的库，负责把插件挂起到compiler上。\" class=\"headerlink\" title=\"tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。\"></a>tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack/lib/Compiler.js  这里的this指代的是compiler实例</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">initialize</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[Compilation], boolean&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shouldEmit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Stats]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">done</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;stats&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Stats]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterDone</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;stats&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">additionalPass</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">beforeRun</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">run</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[string, AssetEmittedInfo]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">assetEmitted</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;file&quot;</span>, <span class=\"string\">&quot;info&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterEmit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compilation, CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">thisCompilation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compilation, CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">compilation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[NormalModuleFactory]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">normalModuleFactory</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;normalModuleFactory&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[ContextModuleFactory]&gt;</span>&#125;  */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">contextModuleFactory</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;contextModuleFactory&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">beforeCompile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">compile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncParallelHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">make</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncParallelHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">finishMake</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterCompile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchRun</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Error]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">failed</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;error&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[string | null, number]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">invalid</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;filename&quot;</span>, <span class=\"string\">&quot;changeTime&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchClose</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shutdown</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[string, string, any[]], true&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">infrastructureLog</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;origin&quot;</span>, <span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;args&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO the following hooks are weirdly located here</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO move them for webpack 5</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">environment</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterEnvironment</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterPlugins</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterResolvers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[string, Entry], boolean&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">entryOption</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;context&quot;</span>, <span class=\"string\">&quot;entry&quot;</span>])</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// tapable库</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncWaterfallHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncLoopHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncParallelHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncParallelBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesWaterfallHook</span></span><br><span class=\"line\">\t\t &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">1.</span><span class=\"title class_\">SyncHook</span> 同步串行 不关心监听函数的返回值</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span><span class=\"title class_\">SyncBailHook</span> 同步串行 只要监听函数中有一个函数的返回值不为<span class=\"literal\">null</span>,则跳过剩下所有的逻辑</span><br><span class=\"line\">\t\t<span class=\"number\">3.</span><span class=\"title class_\">SyncWaterfallHook</span> 同步串行 上一个监听函数的返回值可以传递给下一个监听函数</span><br><span class=\"line\">\t\t<span class=\"number\">4.</span><span class=\"title class_\">SyncLoopHook</span> 同步循环 当监听函数被触发的时候，如果该监听函数返回<span class=\"literal\">true</span>时则这个监听函数会反复执行，如果返回<span class=\"literal\">undefined</span> 则表示退出循环</span><br><span class=\"line\">\t\t<span class=\"number\">5.</span><span class=\"title class_\">AsyncParallelHook</span> 异步并发 不关心监听函数的返回值</span><br><span class=\"line\">\t\t<span class=\"number\">6.</span><span class=\"title class_\">AsyncParallelBailHook</span> 异步并发 只要监听函数的返回值不为<span class=\"literal\">null</span>，就会忽略后面的监听函数执行，直接跳跃到callAsync等触发函数绑定的回调函数，然后执行这个被绑定的回调函数</span><br><span class=\"line\">\t\t<span class=\"number\">7.</span><span class=\"title class_\">AsyncSeriesHook</span> 异步串行 不关心callback的参数</span><br><span class=\"line\">\t\t<span class=\"number\">8.</span><span class=\"title class_\">AsyncSeriesBailHook</span> 异步串行 callback的参数不为<span class=\"literal\">null</span>，就会直接执行callAsync等触发函数绑定的回调函数</span><br><span class=\"line\">\t\t<span class=\"number\">9.</span><span class=\"title class_\">AsyncSeriesWaterfallHook</span> 异步串行 上一个监听函数中的<span class=\"title function_\">callback</span>(err,data)的第二个参数，可以作为下一个监听函数的参数</span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h3 id=\"如何编写一个最简版的babel-loader\"><a href=\"#如何编写一个最简版的babel-loader\" class=\"headerlink\" title=\"如何编写一个最简版的babel-loader\"></a>如何编写一个最简版的babel-loader</h3><ul>\n<li><p>babel-loader的配置，复制的babel-loader的配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.m?js$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">loader</span>: <span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;./js-loader.js&#x27;</span>),</span><br><span class=\"line\">              <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">                  [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class=\"attr\">targets</span>: <span class=\"string\">&quot;defaults&quot;</span> &#125;]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js-loader.js引入了acorn,acorn-walk,magic-string,loader-utils。loader-utils获取你配置的options，acorn解析js生成ast树，acorn-walk遍历生成的ast树，magic-string负责把字符串改写或者添加你需要的类容，pitch方法可以在loader执行前加入你所需要的内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> acorn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;acorn&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> walk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;acorn-walk&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MagicString</span> = <span class=\"built_in\">require</span>( <span class=\"string\">&#x27;magic-string&#x27;</span> );</span><br><span class=\"line\"><span class=\"keyword\">const</span> loadUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">value</span>,<span class=\"string\">&#x27;👀&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = loadUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options,<span class=\"string\">&#x27;🐶&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = acorn.<span class=\"title function_\">parse</span>(context);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ast,<span class=\"string\">&#x27;🍎&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = <span class=\"keyword\">new</span> <span class=\"title class_\">MagicString</span>(context);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(code,<span class=\"string\">&#x27;🚗&#x27;</span>)</span><br><span class=\"line\">    walk.<span class=\"title function_\">simple</span>(ast,&#123;</span><br><span class=\"line\">        <span class=\"title class_\">VariableDeclaration</span>(node)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node,<span class=\"string\">&#x27;🚀&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; start &#125; = node;</span><br><span class=\"line\">            code.<span class=\"title function_\">overwrite</span>(start,start + <span class=\"number\">5</span>,<span class=\"string\">&#x27;var&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title class_\">ExpressionStatement</span>(node)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node,<span class=\"string\">&#x27;🌹&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; end &#125; = node;</span><br><span class=\"line\">            code.<span class=\"title function_\">overwrite</span>(end  -<span class=\"number\">1</span>,end,<span class=\"string\">&#x27;+ &quot;添加的元素&quot;)&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"keyword\">function</span>(<span class=\"params\">r,prerequest,data</span>)&#123;</span><br><span class=\"line\">    data.<span class=\"property\">value</span> = <span class=\"string\">&#x27;人众无知&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成的dist中的main.js可以看到已经用var替换了const，并添加了对应的字符。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_modules__ = (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./src/index.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./src/index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**********************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;var jiong = &#x27;🤔囧&#x27;;\\nconsole.log(jiong+ \\&quot;添加的元素\\&quot;)\\n\\n//# sourceURL=webpack://loader/./src/index.js?&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// startup</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_modules__[<span class=\"string\">&quot;./src/index.js&quot;</span>]();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"tapable-webpack处理钩子函数的库，负责把插件挂起到compiler上。\"><a href=\"#tapable-webpack处理钩子函数的库，负责把插件挂起到compiler上。\" class=\"headerlink\" title=\"tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。\"></a>tapable webpack处理钩子函数的库，负责把插件挂起到compiler上。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack/lib/Compiler.js  这里的this指代的是compiler实例</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">hooks</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">initialize</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[Compilation], boolean&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shouldEmit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Stats]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">done</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;stats&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Stats]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterDone</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;stats&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">additionalPass</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">beforeRun</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">run</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">emit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[string, AssetEmittedInfo]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">assetEmitted</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;file&quot;</span>, <span class=\"string\">&quot;info&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterEmit</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compilation, CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">thisCompilation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compilation, CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">compilation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compilation&quot;</span>, <span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[NormalModuleFactory]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">normalModuleFactory</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;normalModuleFactory&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[ContextModuleFactory]&gt;</span>&#125;  */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">contextModuleFactory</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;contextModuleFactory&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">beforeCompile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[CompilationParams]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">compile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;params&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncParallelHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">make</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncParallelHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncParallelHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">finishMake</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compilation]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterCompile</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compilation&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchRun</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Error]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">failed</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;error&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[string | null, number]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">invalid</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;filename&quot;</span>, <span class=\"string\">&quot;changeTime&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchClose</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">AsyncSeriesHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shutdown</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncSeriesHook</span>([]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[string, string, any[]], true&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">infrastructureLog</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;origin&quot;</span>, <span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;args&quot;</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO the following hooks are weirdly located here</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO move them for webpack 5</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">environment</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterEnvironment</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterPlugins</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncHook&lt;[Compiler]&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">afterResolvers</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>([<span class=\"string\">&quot;compiler&quot;</span>]),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SyncBailHook&lt;[string, Entry], boolean&gt;</span>&#125; */</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">entryOption</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">SyncBailHook</span>([<span class=\"string\">&quot;context&quot;</span>, <span class=\"string\">&quot;entry&quot;</span>])</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// tapable库</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncWaterfallHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SyncLoopHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncParallelHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncParallelBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesBailHook</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AsyncSeriesWaterfallHook</span></span><br><span class=\"line\">\t\t &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">1.</span><span class=\"title class_\">SyncHook</span> 同步串行 不关心监听函数的返回值</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span><span class=\"title class_\">SyncBailHook</span> 同步串行 只要监听函数中有一个函数的返回值不为<span class=\"literal\">null</span>,则跳过剩下所有的逻辑</span><br><span class=\"line\">\t\t<span class=\"number\">3.</span><span class=\"title class_\">SyncWaterfallHook</span> 同步串行 上一个监听函数的返回值可以传递给下一个监听函数</span><br><span class=\"line\">\t\t<span class=\"number\">4.</span><span class=\"title class_\">SyncLoopHook</span> 同步循环 当监听函数被触发的时候，如果该监听函数返回<span class=\"literal\">true</span>时则这个监听函数会反复执行，如果返回<span class=\"literal\">undefined</span> 则表示退出循环</span><br><span class=\"line\">\t\t<span class=\"number\">5.</span><span class=\"title class_\">AsyncParallelHook</span> 异步并发 不关心监听函数的返回值</span><br><span class=\"line\">\t\t<span class=\"number\">6.</span><span class=\"title class_\">AsyncParallelBailHook</span> 异步并发 只要监听函数的返回值不为<span class=\"literal\">null</span>，就会忽略后面的监听函数执行，直接跳跃到callAsync等触发函数绑定的回调函数，然后执行这个被绑定的回调函数</span><br><span class=\"line\">\t\t<span class=\"number\">7.</span><span class=\"title class_\">AsyncSeriesHook</span> 异步串行 不关心callback的参数</span><br><span class=\"line\">\t\t<span class=\"number\">8.</span><span class=\"title class_\">AsyncSeriesBailHook</span> 异步串行 callback的参数不为<span class=\"literal\">null</span>，就会直接执行callAsync等触发函数绑定的回调函数</span><br><span class=\"line\">\t\t<span class=\"number\">9.</span><span class=\"title class_\">AsyncSeriesWaterfallHook</span> 异步串行 上一个监听函数中的<span class=\"title function_\">callback</span>(err,data)的第二个参数，可以作为下一个监听函数的参数</span><br></pre></td></tr></table></figure>"},{"title":"vue computed 计算属性分析","cover":"/img/light-z.webp","_content":"\n## computed 简介\n\n### 1.computed简化模版中过多的声明式逻辑\n\n```js\n<div>{{fullName}}</div>\nnew Vue({\n  data: {\n    firstName: \"Xiao\",\n    lastName: \"Ming\",\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + \" \" + this.lastName;\n    },\n  },\n});\n\n```\n\n### 2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性\n\n```js\ncomputed: {\n  aDouble: vm => vm.a * 2\n}\n```\n\n### 3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\n\n```js\nvar vm = new Vue({\n  data: { a: 1 },\n  computed: {\n    // get only\n    aDouble: function () {\n      return this.a * 2\n    },\n    // both get and set\n    aPlus: {\n      get: function () {\n        return this.a + 1\n      },\n      set: function (v) {\n        this.a = v - 1\n      }\n    }\n  }\n})\nvm.aPlus   // => 2\nvm.aPlus = 3\nvm.a       // => 2\nvm.aDouble // => 4\n```\n\n\n### computed与watch的对比\n\n#### watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\n\n### computed 与 watch的差异\n\n#### 1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)\n#### 2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\n#### 3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\n\n\n### 源码分析\n\n#### 1.computed初始化在src/core/instance/state.js的initcomputed函数中\n\n```js\nfunction initComputed (vm: Component, computed: Object) {\n  // $flow-disable-line\n  const watchers = vm._computedWatchers = Object.create(null)\n  // computed properties are just getters during SSR\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        `Getter is missing for computed property \"${key}\".`,\n        vm\n      )\n    }\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\n\nexport function defineComputed (\n  target: any,\n  key: string,\n  userDef: Object | Function\n) {\n  const shouldCache = !isServerRendering()\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef)\n    sharedPropertyDefinition.set = noop\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop\n    sharedPropertyDefinition.set = userDef.set || noop\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        `Computed property \"${key}\" was assigned to but it has no setter.`,\n        this\n      )\n    }\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\n```\n\n#### 2.Watcher的类位于/src/core/observer/watcher.js维护了响应式数据和使用到该响应式数据的地方的关系\n\n```js\nimport { queueWatcher } from './scheduler'\nimport Dep, { pushTarget, popTarget } from './dep'\nexport default class Watcher {\n  vm: Component;\n  expression: string;\n  cb: Function;\n  id: number;\n  deep: boolean;\n  user: boolean;\n  lazy: boolean;\n  sync: boolean;\n  dirty: boolean;\n  active: boolean;\n  deps: Array<Dep>;\n  newDeps: Array<Dep>;\n  depIds: SimpleSet;\n  newDepIds: SimpleSet;\n  before: ?Function;\n  getter: Function;\n  value: any;\n\n  constructor(\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: ?Object,\n    isRenderWatcher?: boolean\n  ) {\n    this.vm = vm\n    if (isRenderWatcher) {\n      vm._watcher = this\n    }\n    vm._watchers.push(this)\n    // options\n    if (options) {\n      this.deep = !!options.deep\n      this.user = !!options.user\n      this.lazy = !!options.lazy\n      this.sync = !!options.sync\n      this.before = options.before\n    } else {\n      this.deep = this.user = this.lazy = this.sync = false\n    }\n    this.cb = cb\n    this.id = ++uid // uid for batching\n    this.active = true\n    this.dirty = this.lazy // for lazy watchers\n    this.deps = []\n    this.newDeps = []\n    this.depIds = new Set()\n    this.newDepIds = new Set()\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      if (!this.getter) {\n        this.getter = noop\n        process.env.NODE_ENV !== 'production' && warn(\n          `Failed watching path: \"${expOrFn}\" ` +\n          'Watcher only accepts simple dot-delimited paths. ' +\n          'For full control, use a function instead.',\n          vm\n        )\n      }\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n  get() {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps()\n    }\n    return value\n  }\n  addDep(dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  /**\n   * Clean up for dependency collection.\n   */\n  cleanupDeps() {\n    let i = this.deps.length\n    while (i--) {\n      const dep = this.deps[i]\n      if (!this.newDepIds.has(dep.id)) {\n        dep.removeSub(this)\n      }\n    }\n    let tmp = this.depIds\n    this.depIds = this.newDepIds\n    this.newDepIds = tmp\n    this.newDepIds.clear()\n    tmp = this.deps\n    this.deps = this.newDeps\n    this.newDeps = tmp\n    this.newDeps.length = 0\n  }\n\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   */\n  update() {\n    /* istanbul ignore else */\n    if (this.lazy) {//懒\n      this.dirty = true\n    } else if (this.sync) {//同步\n      this.run()\n    } else {//批量跟新\n      queueWatcher(this)\n    }\n  }\n\n  /**\n   * Scheduler job interface.\n   * Will be called by the scheduler.\n   */\n  run() {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n  evaluate() {\n    this.value = this.get()\n    this.dirty = false\n  }\n  depend() {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n  teardown() {\n    if (this.active) {\n      if (!this.vm._isBeingDestroyed) {\n        remove(this.vm._watchers, this)\n      }\n      let i = this.deps.length\n      while (i--) {\n        this.deps[i].removeSub(this)\n      }\n      this.active = false\n    }\n  }\n}\n\n```\n\n#### 3.Dep的类位于/src/core/observer/dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\n\n```js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor() {\n    this.id = uid++\n    this.subs = [];\n  }\n\n  addSub(sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub(sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend() {\n    if (Dep.target) {\n      //wathcer.appDep(dep)\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify() {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()//Watcher\n    }\n  }\n}\n\nDep.target = null\nconst targetStack = [];\nexport function pushTarget(target: ?Watcher) {\n  targetStack.push(target)\n  Dep.target = target\n}\n\nexport function popTarget() {\n  targetStack.pop()\n  Dep.target = targetStack[targetStack.length - 1]\n}\n\n```\n\n#### 4.Observer的类位于/src/core/observer/index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据\n\n```js\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n  constructor(value: any) {\n    this.value = value\n    this.dep = new Dep();\n    this.vmCount = 0\n    def(value, '__ob__', this);// 表示是响应式数据\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  /**\n   * Walk through all properties and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */\n  walk(obj: Object) {\n    const keys = Object.keys(obj);//[time,yidneg]\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray(items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n\nexport function observe(value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return//boolean number string\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)//\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nexport function defineReactive(\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep()\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      //使用数据的东西添加到电话本\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();//打电话通知，数据被修改\n    }\n  })\n  depend() {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n    Dep.target = null\n    const targetStack = []\n\n    export function pushTarget(target: ?Watcher) {\n        targetStack.push(target)\n        Dep.target = target\n    }\n\n    export function popTarget() {\n        targetStack.pop()\n        Dep.target = targetStack[targetStack.length - 1]\n    }\n}\n```\n\n\n### 上述代码还是有些多的，简单阐述下我对整个流程的大致理解\n\n#### 1.我看可以在/src/core/observer/index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs=[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法\n```js\n     // /src/core/observer/index.js\n    const dep = new Dep()\n\n    Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();\n    }\n  })\n  // /src/core/observer/dep.js\n    constructor() {\n        this.id = uid++\n        this.subs = [];\n    }\n```\n\n#### 2.这个时候就需要看/src/core/observer/watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\n\n```js\n // /src/core/observer/watcher.js\n    get() {\n        pushTarget(this)\n        let value\n        const vm = this.vm\n        try {\n        value = this.getter.call(vm, vm)\n        } catch (e) {\n        if (this.user) {\n            handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n        } else {\n            throw e\n        }\n        } finally {\n        // \"touch\" every property so they are all tracked as\n        // dependencies for deep watching\n        if (this.deep) {\n            traverse(value)\n        }\n        popTarget()\n        this.cleanupDeps()\n        }\n        return value\n  }\naddDep(dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n```\n\n\n#### 3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。\n```js\n    // /src/core/observer/index.js\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();\n\n    // /src/core/observer/dep.js\n    notify() {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()//Watcher\n    }\n  }\n```\n\n#### 4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\n\n```js\n    // /src/core/observer/state.js\n    const computedWatcherOptions = { lazy: true }\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n    // /src/core/observer/watcher.js\n    if (options) {\n      this.deep = !!options.deep\n      this.user = !!options.user\n      this.lazy = !!options.lazy\n      this.sync = !!options.sync\n      this.before = options.before\n    } else {\n      this.deep = this.user = this.lazy = this.sync = false\n    }\n    update() {\n    /* istanbul ignore else */\n    if (this.lazy) {//懒\n      this.dirty = true\n    } else if (this.sync) {//同步\n      this.run()\n    } else {//批量跟新\n      queueWatcher(this)\n    }\n  }\n  run() {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n```","source":"_posts/vue-computed.md","raw":"---\ntitle: vue computed 计算属性分析 \ncover: /img/light-z.webp\n---\n\n## computed 简介\n\n### 1.computed简化模版中过多的声明式逻辑\n\n```js\n<div>{{fullName}}</div>\nnew Vue({\n  data: {\n    firstName: \"Xiao\",\n    lastName: \"Ming\",\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + \" \" + this.lastName;\n    },\n  },\n});\n\n```\n\n### 2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性\n\n```js\ncomputed: {\n  aDouble: vm => vm.a * 2\n}\n```\n\n### 3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\n\n```js\nvar vm = new Vue({\n  data: { a: 1 },\n  computed: {\n    // get only\n    aDouble: function () {\n      return this.a * 2\n    },\n    // both get and set\n    aPlus: {\n      get: function () {\n        return this.a + 1\n      },\n      set: function (v) {\n        this.a = v - 1\n      }\n    }\n  }\n})\nvm.aPlus   // => 2\nvm.aPlus = 3\nvm.a       // => 2\nvm.aDouble // => 4\n```\n\n\n### computed与watch的对比\n\n#### watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\n\n### computed 与 watch的差异\n\n#### 1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)\n#### 2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\n#### 3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\n\n\n### 源码分析\n\n#### 1.computed初始化在src/core/instance/state.js的initcomputed函数中\n\n```js\nfunction initComputed (vm: Component, computed: Object) {\n  // $flow-disable-line\n  const watchers = vm._computedWatchers = Object.create(null)\n  // computed properties are just getters during SSR\n  const isSSR = isServerRendering()\n  for (const key in computed) {\n    const userDef = computed[key]\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        `Getter is missing for computed property \"${key}\".`,\n        vm\n      )\n    }\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\n\nexport function defineComputed (\n  target: any,\n  key: string,\n  userDef: Object | Function\n) {\n  const shouldCache = !isServerRendering()\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef)\n    sharedPropertyDefinition.set = noop\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop\n    sharedPropertyDefinition.set = userDef.set || noop\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        `Computed property \"${key}\" was assigned to but it has no setter.`,\n        this\n      )\n    }\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate()\n      }\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\n```\n\n#### 2.Watcher的类位于/src/core/observer/watcher.js维护了响应式数据和使用到该响应式数据的地方的关系\n\n```js\nimport { queueWatcher } from './scheduler'\nimport Dep, { pushTarget, popTarget } from './dep'\nexport default class Watcher {\n  vm: Component;\n  expression: string;\n  cb: Function;\n  id: number;\n  deep: boolean;\n  user: boolean;\n  lazy: boolean;\n  sync: boolean;\n  dirty: boolean;\n  active: boolean;\n  deps: Array<Dep>;\n  newDeps: Array<Dep>;\n  depIds: SimpleSet;\n  newDepIds: SimpleSet;\n  before: ?Function;\n  getter: Function;\n  value: any;\n\n  constructor(\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: ?Object,\n    isRenderWatcher?: boolean\n  ) {\n    this.vm = vm\n    if (isRenderWatcher) {\n      vm._watcher = this\n    }\n    vm._watchers.push(this)\n    // options\n    if (options) {\n      this.deep = !!options.deep\n      this.user = !!options.user\n      this.lazy = !!options.lazy\n      this.sync = !!options.sync\n      this.before = options.before\n    } else {\n      this.deep = this.user = this.lazy = this.sync = false\n    }\n    this.cb = cb\n    this.id = ++uid // uid for batching\n    this.active = true\n    this.dirty = this.lazy // for lazy watchers\n    this.deps = []\n    this.newDeps = []\n    this.depIds = new Set()\n    this.newDepIds = new Set()\n    this.expression = process.env.NODE_ENV !== 'production'\n      ? expOrFn.toString()\n      : ''\n    // parse expression for getter\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      if (!this.getter) {\n        this.getter = noop\n        process.env.NODE_ENV !== 'production' && warn(\n          `Failed watching path: \"${expOrFn}\" ` +\n          'Watcher only accepts simple dot-delimited paths. ' +\n          'For full control, use a function instead.',\n          vm\n        )\n      }\n    }\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n  }\n  get() {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps()\n    }\n    return value\n  }\n  addDep(dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  /**\n   * Clean up for dependency collection.\n   */\n  cleanupDeps() {\n    let i = this.deps.length\n    while (i--) {\n      const dep = this.deps[i]\n      if (!this.newDepIds.has(dep.id)) {\n        dep.removeSub(this)\n      }\n    }\n    let tmp = this.depIds\n    this.depIds = this.newDepIds\n    this.newDepIds = tmp\n    this.newDepIds.clear()\n    tmp = this.deps\n    this.deps = this.newDeps\n    this.newDeps = tmp\n    this.newDeps.length = 0\n  }\n\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   */\n  update() {\n    /* istanbul ignore else */\n    if (this.lazy) {//懒\n      this.dirty = true\n    } else if (this.sync) {//同步\n      this.run()\n    } else {//批量跟新\n      queueWatcher(this)\n    }\n  }\n\n  /**\n   * Scheduler job interface.\n   * Will be called by the scheduler.\n   */\n  run() {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n  evaluate() {\n    this.value = this.get()\n    this.dirty = false\n  }\n  depend() {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n  teardown() {\n    if (this.active) {\n      if (!this.vm._isBeingDestroyed) {\n        remove(this.vm._watchers, this)\n      }\n      let i = this.deps.length\n      while (i--) {\n        this.deps[i].removeSub(this)\n      }\n      this.active = false\n    }\n  }\n}\n\n```\n\n#### 3.Dep的类位于/src/core/observer/dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\n\n```js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor() {\n    this.id = uid++\n    this.subs = [];\n  }\n\n  addSub(sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub(sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend() {\n    if (Dep.target) {\n      //wathcer.appDep(dep)\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify() {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()//Watcher\n    }\n  }\n}\n\nDep.target = null\nconst targetStack = [];\nexport function pushTarget(target: ?Watcher) {\n  targetStack.push(target)\n  Dep.target = target\n}\n\nexport function popTarget() {\n  targetStack.pop()\n  Dep.target = targetStack[targetStack.length - 1]\n}\n\n```\n\n#### 4.Observer的类位于/src/core/observer/index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据\n\n```js\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n  constructor(value: any) {\n    this.value = value\n    this.dep = new Dep();\n    this.vmCount = 0\n    def(value, '__ob__', this);// 表示是响应式数据\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  /**\n   * Walk through all properties and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   */\n  walk(obj: Object) {\n    const keys = Object.keys(obj);//[time,yidneg]\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray(items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n\nexport function observe(value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return//boolean number string\n  }\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)//\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nexport function defineReactive(\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep()\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      //使用数据的东西添加到电话本\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();//打电话通知，数据被修改\n    }\n  })\n  depend() {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n    Dep.target = null\n    const targetStack = []\n\n    export function pushTarget(target: ?Watcher) {\n        targetStack.push(target)\n        Dep.target = target\n    }\n\n    export function popTarget() {\n        targetStack.pop()\n        Dep.target = targetStack[targetStack.length - 1]\n    }\n}\n```\n\n\n### 上述代码还是有些多的，简单阐述下我对整个流程的大致理解\n\n#### 1.我看可以在/src/core/observer/index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs=[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法\n```js\n     // /src/core/observer/index.js\n    const dep = new Dep()\n\n    Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();\n    }\n  })\n  // /src/core/observer/dep.js\n    constructor() {\n        this.id = uid++\n        this.subs = [];\n    }\n```\n\n#### 2.这个时候就需要看/src/core/observer/watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\n\n```js\n // /src/core/observer/watcher.js\n    get() {\n        pushTarget(this)\n        let value\n        const vm = this.vm\n        try {\n        value = this.getter.call(vm, vm)\n        } catch (e) {\n        if (this.user) {\n            handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n        } else {\n            throw e\n        }\n        } finally {\n        // \"touch\" every property so they are all tracked as\n        // dependencies for deep watching\n        if (this.deep) {\n            traverse(value)\n        }\n        popTarget()\n        this.cleanupDeps()\n        }\n        return value\n  }\naddDep(dep: Dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n```\n\n\n#### 3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。\n```js\n    // /src/core/observer/index.js\n    set: function reactiveSetter(newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify();\n\n    // /src/core/observer/dep.js\n    notify() {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()//Watcher\n    }\n  }\n```\n\n#### 4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\n\n```js\n    // /src/core/observer/state.js\n    const computedWatcherOptions = { lazy: true }\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n    // /src/core/observer/watcher.js\n    if (options) {\n      this.deep = !!options.deep\n      this.user = !!options.user\n      this.lazy = !!options.lazy\n      this.sync = !!options.sync\n      this.before = options.before\n    } else {\n      this.deep = this.user = this.lazy = this.sync = false\n    }\n    update() {\n    /* istanbul ignore else */\n    if (this.lazy) {//懒\n      this.dirty = true\n    } else if (this.sync) {//同步\n      this.run()\n    } else {//批量跟新\n      queueWatcher(this)\n    }\n  }\n  run() {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n```","slug":"vue-computed","published":1,"date":"2021-07-27T07:59:44.471Z","updated":"2021-08-22T02:44:01.465Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40e000f42u7cy2d2rhl","content":"<h2 id=\"computed-简介\"><a href=\"#computed-简介\" class=\"headerlink\" title=\"computed 简介\"></a>computed 简介</h2><h3 id=\"1-computed简化模版中过多的声明式逻辑\"><a href=\"#1-computed简化模版中过多的声明式逻辑\" class=\"headerlink\" title=\"1.computed简化模版中过多的声明式逻辑\"></a>1.computed简化模版中过多的声明式逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;fullName&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Xiao&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Ming&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-computed如果是箭头函数写法，那么第一个参数为vm-vue-实例，可以拿到实例上的data里面的属性\"><a href=\"#2-computed如果是箭头函数写法，那么第一个参数为vm-vue-实例，可以拿到实例上的data里面的属性\" class=\"headerlink\" title=\"2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性\"></a>2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">aDouble</span>: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.<span class=\"property\">a</span> * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\"><a href=\"#3-computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\" class=\"headerlink\" title=\"3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\"></a>3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// get only</span></span><br><span class=\"line\">    <span class=\"attr\">aDouble</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// both get and set</span></span><br><span class=\"line\">    <span class=\"attr\">aPlus</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = v - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.<span class=\"property\">aPlus</span>   <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.<span class=\"property\">aPlus</span> = <span class=\"number\">3</span></span><br><span class=\"line\">vm.<span class=\"property\">a</span>       <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.<span class=\"property\">aDouble</span> <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"computed与watch的对比\"><a href=\"#computed与watch的对比\" class=\"headerlink\" title=\"computed与watch的对比\"></a>computed与watch的对比</h3><h4 id=\"watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\"><a href=\"#watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\" class=\"headerlink\" title=\"watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\"></a>watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。</h4><h3 id=\"computed-与-watch的差异\"><a href=\"#computed-与-watch的差异\" class=\"headerlink\" title=\"computed 与 watch的差异\"></a>computed 与 watch的差异</h3><h4 id=\"1-computed是计算一个新的属性，并将该属性挂载到vm-vue-实例上-而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化-其他还有data-prop\"><a href=\"#1-computed是计算一个新的属性，并将该属性挂载到vm-vue-实例上-而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化-其他还有data-prop\" class=\"headerlink\" title=\"1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)\"></a>1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)</h4><h4 id=\"2-computed本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\"><a href=\"#2-computed本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\" class=\"headerlink\" title=\"2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\"></a>2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数</h4><h4 id=\"3-从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\"><a href=\"#3-从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\" class=\"headerlink\" title=\"3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\"></a>3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据</h4><h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"1-computed初始化在src-core-instance-state-js的initcomputed函数中\"><a href=\"#1-computed初始化在src-core-instance-state-js的initcomputed函数中\" class=\"headerlink\" title=\"1.computed初始化在src&#x2F;core&#x2F;instance&#x2F;state.js的initcomputed函数中\"></a>1.computed初始化在src&#x2F;core&#x2F;instance&#x2F;state.js的initcomputed函数中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">computed</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = <span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Getter is missing for computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;.`</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineComputed</span> (</span><br><span class=\"line\">  <span class=\"attr\">target</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">userDef</span>: <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> shouldCache = !<span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = shouldCache</span><br><span class=\"line\">      ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">      : <span class=\"title function_\">createGetterInvoker</span>(userDef)</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = noop</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = userDef.<span class=\"property\">get</span></span><br><span class=\"line\">      ? shouldCache &amp;&amp; userDef.<span class=\"property\">cache</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">        : <span class=\"title function_\">createGetterInvoker</span>(userDef.<span class=\"property\">get</span>)</span><br><span class=\"line\">      : noop</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = userDef.<span class=\"property\">set</span> || noop</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">      sharedPropertyDefinition.<span class=\"property\">set</span> === noop) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; was assigned to but it has no setter.`</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createComputedGetter</span> (key) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">computedGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"variable language_\">this</span>.<span class=\"property\">_computedWatchers</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_computedWatchers</span>[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.<span class=\"property\">dirty</span>) &#123;</span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">        watcher.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createGetterInvoker</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">computedGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Watcher的类位于-src-core-observer-watcher-js维护了响应式数据和使用到该响应式数据的地方的关系\"><a href=\"#2-Watcher的类位于-src-core-observer-watcher-js维护了响应式数据和使用到该响应式数据的地方的关系\" class=\"headerlink\" title=\"2.Watcher的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js维护了响应式数据和使用到该响应式数据的地方的关系\"></a>2.Watcher的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js维护了响应式数据和使用到该响应式数据的地方的关系</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; queueWatcher &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./scheduler&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Dep</span>, &#123; pushTarget, popTarget &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./dep&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">  <span class=\"attr\">expression</span>: string;</span><br><span class=\"line\">  <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">deep</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">user</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">lazy</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">sync</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">dirty</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">active</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Dep</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">newDeps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Dep</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">depIds</span>: <span class=\"title class_\">SimpleSet</span>;</span><br><span class=\"line\">  <span class=\"attr\">newDepIds</span>: <span class=\"title class_\">SimpleSet</span>;</span><br><span class=\"line\">  <span class=\"attr\">before</span>: ?<span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">getter</span>: <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    vm: Component,</span></span><br><span class=\"line\"><span class=\"params\">    expOrFn: string | <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    cb: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    options?: ?<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    isRenderWatcher?: boolean</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">      vm.<span class=\"property\">_watcher</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm.<span class=\"property\">_watchers</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = ++uid <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">      ? expOrFn.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">      : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">`Failed watching path: &quot;<span class=\"subst\">$&#123;expOrFn&#125;</span>&quot; `</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;For full control, use a function instead.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">addDep</span>(<span class=\"params\">dep: Dep</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Clean up for dependency collection.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">cleanupDeps</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dep = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(dep.<span class=\"property\">id</span>)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = tmp</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">    tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = tmp</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Subscriber interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called when a dependency changes.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;<span class=\"comment\">//懒</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;<span class=\"comment\">//同步</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//批量跟新</span></span><br><span class=\"line\">      <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scheduler job interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called by the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ||</span><br><span class=\"line\">        <span class=\"title function_\">isObject</span>(value) ||</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">evaluate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">teardown</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_isBeingDestroyed</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_watchers</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Dep的类位于-src-core-observer-dep-js-在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\"><a href=\"#3-Dep的类位于-src-core-observer-dep-js-在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\" class=\"headerlink\" title=\"3.Dep的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\"></a>3.Dep的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addSub</span>(<span class=\"params\">sub: Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">removeSub</span>(<span class=\"params\">sub: Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//wathcer.appDep(dep)</span></span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.<span class=\"property\">async</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren&#x27;t sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.<span class=\"property\">id</span> - b.<span class=\"property\">id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].<span class=\"title function_\">update</span>()<span class=\"comment\">//Watcher</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetStack = [];</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span>(<span class=\"params\">target: ?Watcher</span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Observer的类位于-src-core-observer-index-js-将普通对象通过Object-defineProperty方法重写对象上的key转化为响应式数据\"><a href=\"#4-Observer的类位于-src-core-observer-index-js-将普通对象通过Object-defineProperty方法重写对象上的key转化为响应式数据\" class=\"headerlink\" title=\"4.Observer的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据\"></a>4.Observer的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  <span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>;</span><br><span class=\"line\">  <span class=\"attr\">vmCount</span>: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vmCount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title function_\">def</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"variable language_\">this</span>);<span class=\"comment\">// 表示是响应式数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">protoAugment</span>(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">observeArray</span>(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Walk through all properties and convert them into</span></span><br><span class=\"line\"><span class=\"comment\">   * getter/setters. This method should only be called when</span></span><br><span class=\"line\"><span class=\"comment\">   * value type is Object.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">walk</span>(<span class=\"params\">obj: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj);<span class=\"comment\">//[time,yidneg]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive</span>(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">observeArray</span>(<span class=\"params\">items: <span class=\"built_in\">Array</span>&lt;any&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">observe</span>(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(value) || value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span><span class=\"comment\">//boolean number string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ob</span>: <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class=\"property\">__ob__</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Observer</span>) &#123;</span><br><span class=\"line\">    ob = value.<span class=\"property\">__ob__</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !<span class=\"title function_\">isServerRendering</span>() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value) || <span class=\"title function_\">isPlainObject</span>(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">isExtensible</span>(value) &amp;&amp;</span><br><span class=\"line\">    !value.<span class=\"property\">_isVue</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(value)<span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.<span class=\"property\">vmCount</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a reactive property on an Object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  obj: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">  key: string,</span></span><br><span class=\"line\"><span class=\"params\">  val: any,</span></span><br><span class=\"line\"><span class=\"params\">  customSetter?: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">  shallow?: boolean</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> property = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.<span class=\"property\">configurable</span> === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getter = property &amp;&amp; property.<span class=\"property\">get</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setter = property &amp;&amp; property.<span class=\"property\">set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(val)</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//使用数据的东西添加到电话本</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>();<span class=\"comment\">//打电话通知，数据被修改</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetStack = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span>(<span class=\"params\">target: ?Watcher</span>) &#123;</span><br><span class=\"line\">        targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"上述代码还是有些多的，简单阐述下我对整个流程的大致理解\"><a href=\"#上述代码还是有些多的，简单阐述下我对整个流程的大致理解\" class=\"headerlink\" title=\"上述代码还是有些多的，简单阐述下我对整个流程的大致理解\"></a>上述代码还是有些多的，简单阐述下我对整个流程的大致理解</h3><h4 id=\"1-我看可以在-src-core-observer-index-js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this-subs-，这是维护关系的数组了，再继续回到index-js中，我们可以看到Object-defineProperty中的get函数中会调用dep-depend方法，以及里面所使用的Dep-target和pushTarget方法\"><a href=\"#1-我看可以在-src-core-observer-index-js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this-subs-，这是维护关系的数组了，再继续回到index-js中，我们可以看到Object-defineProperty中的get函数中会调用dep-depend方法，以及里面所使用的Dep-target和pushTarget方法\" class=\"headerlink\" title=\"1.我看可以在&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs&#x3D;[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法\"></a>1.我看可以在&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs&#x3D;[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// /src/core/observer/index.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">        childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">      setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">    dep.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// /src/core/observer/dep.js</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-这个时候就需要看-src-core-observer-watcher-js中的get方法中调用了pushTarget方法把自己指向Dep-target，再调用this-getter-call-vm-vm-此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep-depend方法，depend方法又调用了Dep-target-addDep方法-再看Dep-target-addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\"><a href=\"#2-这个时候就需要看-src-core-observer-watcher-js中的get方法中调用了pushTarget方法把自己指向Dep-target，再调用this-getter-call-vm-vm-此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep-depend方法，depend方法又调用了Dep-target-addDep方法-再看Dep-target-addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\" class=\"headerlink\" title=\"2.这个时候就需要看&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\"></a>2.这个时候就需要看&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// /src/core/observer/watcher.js</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value</span><br><span class=\"line\">        <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// &quot;touch&quot; every property so they are all tracked as</span></span><br><span class=\"line\">        <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"title function_\">addDep</span>(<span class=\"params\">dep: Dep</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-最后看bject-defineProperty中的set方法当响应数据发生改变时调用dep-notify-方法-通知每个watcher更新。\"><a href=\"#3-最后看bject-defineProperty中的set方法当响应数据发生改变时调用dep-notify-方法-通知每个watcher更新。\" class=\"headerlink\" title=\"3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。\"></a>3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// /src/core/observer/index.js</span></span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">      setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">    dep.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// /src/core/observer/dep.js</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.<span class=\"property\">async</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// subs aren&#x27;t sorted in scheduler if not running async</span></span><br><span class=\"line\">    <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">    <span class=\"comment\">// order</span></span><br><span class=\"line\">    subs.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.<span class=\"property\">id</span> - b.<span class=\"property\">id</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].<span class=\"title function_\">update</span>()<span class=\"comment\">//Watcher</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-computed的惰性求值-可以在new-Wacther看到传入一个lazy-true-而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\"><a href=\"#4-computed的惰性求值-可以在new-Wacther看到传入一个lazy-true-而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\" class=\"headerlink\" title=\"4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\"></a>4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// /src/core/observer/state.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> computedWatcherOptions = &#123; <span class=\"attr\">lazy</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">    watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">      vm,</span><br><span class=\"line\">      getter || noop,</span><br><span class=\"line\">      noop,</span><br><span class=\"line\">      computedWatcherOptions</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// /src/core/observer/watcher.js</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;<span class=\"comment\">//懒</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;<span class=\"comment\">//同步</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//批量跟新</span></span><br><span class=\"line\">    <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ||</span><br><span class=\"line\">      <span class=\"title function_\">isObject</span>(value) ||</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// set new value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h2 id=\"computed-简介\"><a href=\"#computed-简介\" class=\"headerlink\" title=\"computed 简介\"></a>computed 简介</h2><h3 id=\"1-computed简化模版中过多的声明式逻辑\"><a href=\"#1-computed简化模版中过多的声明式逻辑\" class=\"headerlink\" title=\"1.computed简化模版中过多的声明式逻辑\"></a>1.computed简化模版中过多的声明式逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&#123;&#123;fullName&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Xiao&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Ming&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-computed如果是箭头函数写法，那么第一个参数为vm-vue-实例，可以拿到实例上的data里面的属性\"><a href=\"#2-computed如果是箭头函数写法，那么第一个参数为vm-vue-实例，可以拿到实例上的data里面的属性\" class=\"headerlink\" title=\"2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性\"></a>2.computed如果是箭头函数写法，那么第一个参数为vm(vue)实例，可以拿到实例上的data里面的属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">aDouble</span>: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.<span class=\"property\">a</span> * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\"><a href=\"#3-computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\" class=\"headerlink\" title=\"3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值\"></a>3.computed属性是被缓存的，只有当computed的中依赖的响应式data中数据发生变化时，才会重新求值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// get only</span></span><br><span class=\"line\">    <span class=\"attr\">aDouble</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// both get and set</span></span><br><span class=\"line\">    <span class=\"attr\">aPlus</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = v - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.<span class=\"property\">aPlus</span>   <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.<span class=\"property\">aPlus</span> = <span class=\"number\">3</span></span><br><span class=\"line\">vm.<span class=\"property\">a</span>       <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.<span class=\"property\">aDouble</span> <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"computed与watch的对比\"><a href=\"#computed与watch的对比\" class=\"headerlink\" title=\"computed与watch的对比\"></a>computed与watch的对比</h3><h4 id=\"watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\"><a href=\"#watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\" class=\"headerlink\" title=\"watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。\"></a>watch的特点：使用watch选项允许我们执行异步操作或高消耗性能操作，限制我们执行该操作的频率，并在我们得到最终结前，设置中间状态，而这些都是计算属性无法做到的。</h4><h3 id=\"computed-与-watch的差异\"><a href=\"#computed-与-watch的差异\" class=\"headerlink\" title=\"computed 与 watch的差异\"></a>computed 与 watch的差异</h3><h4 id=\"1-computed是计算一个新的属性，并将该属性挂载到vm-vue-实例上-而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化-其他还有data-prop\"><a href=\"#1-computed是计算一个新的属性，并将该属性挂载到vm-vue-实例上-而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化-其他还有data-prop\" class=\"headerlink\" title=\"1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)\"></a>1.computed是计算一个新的属性，并将该属性挂载到vm(vue)实例上,而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化(其他还有data,prop)</h4><h4 id=\"2-computed本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\"><a href=\"#2-computed本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\" class=\"headerlink\" title=\"2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数\"></a>2.computed本质是一个惰性求值的观察者，\b具有缓存性，只有当依赖变化后，第一次访问computed属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数</h4><h4 id=\"3-从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\"><a href=\"#3-从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\" class=\"headerlink\" title=\"3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据\"></a>3.从使用场景上，computed适用于一个数据被多个数据影响，而watch适用于数据影响多个数据</h4><h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"1-computed初始化在src-core-instance-state-js的initcomputed函数中\"><a href=\"#1-computed初始化在src-core-instance-state-js的initcomputed函数中\" class=\"headerlink\" title=\"1.computed初始化在src&#x2F;core&#x2F;instance&#x2F;state.js的initcomputed函数中\"></a>1.computed初始化在src&#x2F;core&#x2F;instance&#x2F;state.js的initcomputed函数中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">computed</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = <span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Getter is missing for computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;.`</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineComputed</span> (</span><br><span class=\"line\">  <span class=\"attr\">target</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">userDef</span>: <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> shouldCache = !<span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = shouldCache</span><br><span class=\"line\">      ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">      : <span class=\"title function_\">createGetterInvoker</span>(userDef)</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = noop</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = userDef.<span class=\"property\">get</span></span><br><span class=\"line\">      ? shouldCache &amp;&amp; userDef.<span class=\"property\">cache</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">        : <span class=\"title function_\">createGetterInvoker</span>(userDef.<span class=\"property\">get</span>)</span><br><span class=\"line\">      : noop</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = userDef.<span class=\"property\">set</span> || noop</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">      sharedPropertyDefinition.<span class=\"property\">set</span> === noop) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; was assigned to but it has no setter.`</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createComputedGetter</span> (key) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">computedGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"variable language_\">this</span>.<span class=\"property\">_computedWatchers</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_computedWatchers</span>[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watcher.<span class=\"property\">dirty</span>) &#123;</span><br><span class=\"line\">        watcher.evaluate()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">        watcher.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> watcher.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createGetterInvoker</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">computedGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Watcher的类位于-src-core-observer-watcher-js维护了响应式数据和使用到该响应式数据的地方的关系\"><a href=\"#2-Watcher的类位于-src-core-observer-watcher-js维护了响应式数据和使用到该响应式数据的地方的关系\" class=\"headerlink\" title=\"2.Watcher的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js维护了响应式数据和使用到该响应式数据的地方的关系\"></a>2.Watcher的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js维护了响应式数据和使用到该响应式数据的地方的关系</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; queueWatcher &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./scheduler&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Dep</span>, &#123; pushTarget, popTarget &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./dep&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>;</span><br><span class=\"line\">  <span class=\"attr\">expression</span>: string;</span><br><span class=\"line\">  <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">deep</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">user</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">lazy</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">sync</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">dirty</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">active</span>: boolean;</span><br><span class=\"line\">  <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Dep</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">newDeps</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Dep</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">depIds</span>: <span class=\"title class_\">SimpleSet</span>;</span><br><span class=\"line\">  <span class=\"attr\">newDepIds</span>: <span class=\"title class_\">SimpleSet</span>;</span><br><span class=\"line\">  <span class=\"attr\">before</span>: ?<span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">getter</span>: <span class=\"title class_\">Function</span>;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    vm: Component,</span></span><br><span class=\"line\"><span class=\"params\">    expOrFn: string | <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    cb: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    options?: ?<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    isRenderWatcher?: boolean</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">      vm.<span class=\"property\">_watcher</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm.<span class=\"property\">_watchers</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = ++uid <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">      ? expOrFn.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">      : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">`Failed watching path: &quot;<span class=\"subst\">$&#123;expOrFn&#125;</span>&quot; `</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;For full control, use a function instead.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">addDep</span>(<span class=\"params\">dep: Dep</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Clean up for dependency collection.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">cleanupDeps</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dep = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(dep.<span class=\"property\">id</span>)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = tmp</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">    tmp = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = tmp</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Subscriber interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called when a dependency changes.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;<span class=\"comment\">//懒</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;<span class=\"comment\">//同步</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//批量跟新</span></span><br><span class=\"line\">      <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scheduler job interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called by the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ||</span><br><span class=\"line\">        <span class=\"title function_\">isObject</span>(value) ||</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">evaluate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">teardown</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_isBeingDestroyed</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_watchers</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Dep的类位于-src-core-observer-dep-js-在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\"><a href=\"#3-Dep的类位于-src-core-observer-dep-js-在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\" class=\"headerlink\" title=\"3.Dep的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher\"></a>3.Dep的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;dep.js 在响应式数据的get函数中被使用用于维护于该响应式数据有关的watcher</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addSub</span>(<span class=\"params\">sub: Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">removeSub</span>(<span class=\"params\">sub: Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//wathcer.appDep(dep)</span></span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.<span class=\"property\">async</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren&#x27;t sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.<span class=\"property\">id</span> - b.<span class=\"property\">id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].<span class=\"title function_\">update</span>()<span class=\"comment\">//Watcher</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetStack = [];</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span>(<span class=\"params\">target: ?Watcher</span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Observer的类位于-src-core-observer-index-js-将普通对象通过Object-defineProperty方法重写对象上的key转化为响应式数据\"><a href=\"#4-Observer的类位于-src-core-observer-index-js-将普通对象通过Object-defineProperty方法重写对象上的key转化为响应式数据\" class=\"headerlink\" title=\"4.Observer的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据\"></a>4.Observer的类位于&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js 将普通对象通过Object.defineProperty方法重写对象上的key转化为响应式数据</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  <span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>;</span><br><span class=\"line\">  <span class=\"attr\">vmCount</span>: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vmCount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title function_\">def</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"variable language_\">this</span>);<span class=\"comment\">// 表示是响应式数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">protoAugment</span>(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">observeArray</span>(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Walk through all properties and convert them into</span></span><br><span class=\"line\"><span class=\"comment\">   * getter/setters. This method should only be called when</span></span><br><span class=\"line\"><span class=\"comment\">   * value type is Object.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">walk</span>(<span class=\"params\">obj: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj);<span class=\"comment\">//[time,yidneg]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive</span>(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">observeArray</span>(<span class=\"params\">items: <span class=\"built_in\">Array</span>&lt;any&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">observe</span>(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">value: any, asRootData: ?boolean</span>): <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(value) || value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span><span class=\"comment\">//boolean number string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ob</span>: <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class=\"property\">__ob__</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Observer</span>) &#123;</span><br><span class=\"line\">    ob = value.<span class=\"property\">__ob__</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !<span class=\"title function_\">isServerRendering</span>() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value) || <span class=\"title function_\">isPlainObject</span>(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">isExtensible</span>(value) &amp;&amp;</span><br><span class=\"line\">    !value.<span class=\"property\">_isVue</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(value)<span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.<span class=\"property\">vmCount</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a reactive property on an Object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  obj: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">  key: string,</span></span><br><span class=\"line\"><span class=\"params\">  val: any,</span></span><br><span class=\"line\"><span class=\"params\">  customSetter?: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">  shallow?: boolean</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> property = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.<span class=\"property\">configurable</span> === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getter = property &amp;&amp; property.<span class=\"property\">get</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setter = property &amp;&amp; property.<span class=\"property\">set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(val)</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//使用数据的东西添加到电话本</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>();<span class=\"comment\">//打电话通知，数据被修改</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetStack = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span>(<span class=\"params\">target: ?Watcher</span>) &#123;</span><br><span class=\"line\">        targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"上述代码还是有些多的，简单阐述下我对整个流程的大致理解\"><a href=\"#上述代码还是有些多的，简单阐述下我对整个流程的大致理解\" class=\"headerlink\" title=\"上述代码还是有些多的，简单阐述下我对整个流程的大致理解\"></a>上述代码还是有些多的，简单阐述下我对整个流程的大致理解</h3><h4 id=\"1-我看可以在-src-core-observer-index-js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this-subs-，这是维护关系的数组了，再继续回到index-js中，我们可以看到Object-defineProperty中的get函数中会调用dep-depend方法，以及里面所使用的Dep-target和pushTarget方法\"><a href=\"#1-我看可以在-src-core-observer-index-js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this-subs-，这是维护关系的数组了，再继续回到index-js中，我们可以看到Object-defineProperty中的get函数中会调用dep-depend方法，以及里面所使用的Dep-target和pushTarget方法\" class=\"headerlink\" title=\"1.我看可以在&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs&#x3D;[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法\"></a>1.我看可以在&#x2F;src&#x2F;core&#x2F;observer&#x2F;index.js中看到defineReactive函数中new了一个用于维护响应式数据和watcher的关系实例，Dep实例化时生成了this.subs&#x3D;[]，这是维护关系的数组了，再继续回到index.js中，我们可以看到Object.defineProperty中的get函数中会调用dep.depend方法，以及里面所使用的Dep.target和pushTarget方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">// /src/core/observer/index.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      dep.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">        childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">      setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">    dep.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// /src/core/observer/dep.js</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-这个时候就需要看-src-core-observer-watcher-js中的get方法中调用了pushTarget方法把自己指向Dep-target，再调用this-getter-call-vm-vm-此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep-depend方法，depend方法又调用了Dep-target-addDep方法-再看Dep-target-addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\"><a href=\"#2-这个时候就需要看-src-core-observer-watcher-js中的get方法中调用了pushTarget方法把自己指向Dep-target，再调用this-getter-call-vm-vm-此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep-depend方法，depend方法又调用了Dep-target-addDep方法-再看Dep-target-addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\" class=\"headerlink\" title=\"2.这个时候就需要看&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中\"></a>2.这个时候就需要看&#x2F;src&#x2F;core&#x2F;observer&#x2F;watcher.js中的get方法中调用了pushTarget方法把自己指向Dep.target，再调用this.getter.call(vm, vm)此方法就是我们写入到computed里面的方法，如果此方法使用到了响应式数据就会调用到响应数据的get方法，继而调用自己的dep.depend方法，depend方法又调用了Dep.target.addDep方法,再看Dep.target.addDep方法发现watcher也会维护一个deps的数组用于存放和自己有关的dep数组，并在这个过程中调用addSub方法把自己加入到和自己有关的响应式数据的dep数组中</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// /src/core/observer/watcher.js</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value</span><br><span class=\"line\">        <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// &quot;touch&quot; every property so they are all tracked as</span></span><br><span class=\"line\">        <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"title function_\">addDep</span>(<span class=\"params\">dep: Dep</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-最后看bject-defineProperty中的set方法当响应数据发生改变时调用dep-notify-方法-通知每个watcher更新。\"><a href=\"#3-最后看bject-defineProperty中的set方法当响应数据发生改变时调用dep-notify-方法-通知每个watcher更新。\" class=\"headerlink\" title=\"3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。\"></a>3.最后看bject.defineProperty中的set方法当响应数据发生改变时调用dep.notify()方法,通知每个watcher更新。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// /src/core/observer/index.js</span></span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">customSetter</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">      setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">    dep.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// /src/core/observer/dep.js</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !config.<span class=\"property\">async</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// subs aren&#x27;t sorted in scheduler if not running async</span></span><br><span class=\"line\">    <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">    <span class=\"comment\">// order</span></span><br><span class=\"line\">    subs.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.<span class=\"property\">id</span> - b.<span class=\"property\">id</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].<span class=\"title function_\">update</span>()<span class=\"comment\">//Watcher</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-computed的惰性求值-可以在new-Wacther看到传入一个lazy-true-而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\"><a href=\"#4-computed的惰性求值-可以在new-Wacther看到传入一个lazy-true-而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\" class=\"headerlink\" title=\"4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值\"></a>4.computed的惰性求值 可以在new Wacther看到传入一个lazy:true 而watcher更新时根据这个值决定是用之前的值还是重新run一次重新获取值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// /src/core/observer/state.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> computedWatcherOptions = &#123; <span class=\"attr\">lazy</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">    watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">      vm,</span><br><span class=\"line\">      getter || noop,</span><br><span class=\"line\">      noop,</span><br><span class=\"line\">      computedWatcherOptions</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// /src/core/observer/watcher.js</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;<span class=\"comment\">//懒</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;<span class=\"comment\">//同步</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//批量跟新</span></span><br><span class=\"line\">    <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ||</span><br><span class=\"line\">      <span class=\"title function_\">isObject</span>(value) ||</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// set new value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"webcomponent","cover":"/img/web-c-z.webp","_content":"\n## Web Components的概念和使用\n\n- Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的web应用中使用它们。\n\n- Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n \n   - Custom elements（自定义元素）：一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。\n\n   - Shadow DOM（影子DOM）：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。\n\n   - HTML templates（HTML模板）： template 和 slot 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n\n### 代码demo\n\n1.customElements.define方法用来注册一个 custom element\n   - 表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线\n   - 用于定义元素行为的 类\n   - 可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素\n   - 例如：customElements.define('word-count', WordCount, { extends: 'p' })\n\n2.attributeChangedCallback 会在 custom element增加、删除或者修改某个属性时被调用。\n\n3.connectedCallback 会在 custom element首次被插入到文档DOM节点上时被调用。\n\n4.this.shadowRoot.innerHTML  ShadowRoot 接口的 innerHTML 属性设置或返回 ShadowRoot内的DOM树。\n\n5.observedAttributes 函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称。\n\n\n```js  webC.js在静态页面引入即可使用该组件 \n//写入html中的组件\n<my-counter count=\"10\"></my-counter> \n\nclass Counter extends HTMLElement {\n    constructor(){\n        super();\n        this.attachShadow({mode:'open'})\n    }\n\n    static get observedAttributes(){\n        return ['count']\n    }   \n\n    get count(){\n        return this.getAttribute('count')\n    }\n\n    set count(val){\n        this.setAttribute('count',val)\n    }\n\n    inc(){\n        this.count++\n    }\n\n    btnEvent(){\n        let btn = this.shadowRoot.querySelector('#btn');\n        btn.addEventListener('click',this.inc.bind(this))\n    }\n\n    attributeChangedCallback(prop,oldVal,newVal){   \n        if(prop === 'count'){\n            this.render()\n            this.btnEvent()\n        } \n    }\n\n    connectedCallback(){\n        this.render();\n        this.btnEvent()\n    }\n\n    render(){\n        this.shadowRoot.innerHTML = `\n            <h1>Counter</h1>\n            ${this.count}\n            <button id=\"btn\">Increment</button>\n\n            <style>\n                h1{\n                    color:rgba(0,0,0,.6)\n                }\n            </style>\n        `\n    }\n}\n\ncustomElements.define('my-counter',Counter)\n```","source":"_posts/webComponents.md","raw":"---\ntitle: webcomponent \ncover: /img/web-c-z.webp\n---\n\n## Web Components的概念和使用\n\n- Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的web应用中使用它们。\n\n- Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n \n   - Custom elements（自定义元素）：一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。\n\n   - Shadow DOM（影子DOM）：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。\n\n   - HTML templates（HTML模板）： template 和 slot 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n\n### 代码demo\n\n1.customElements.define方法用来注册一个 custom element\n   - 表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线\n   - 用于定义元素行为的 类\n   - 可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素\n   - 例如：customElements.define('word-count', WordCount, { extends: 'p' })\n\n2.attributeChangedCallback 会在 custom element增加、删除或者修改某个属性时被调用。\n\n3.connectedCallback 会在 custom element首次被插入到文档DOM节点上时被调用。\n\n4.this.shadowRoot.innerHTML  ShadowRoot 接口的 innerHTML 属性设置或返回 ShadowRoot内的DOM树。\n\n5.observedAttributes 函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称。\n\n\n```js  webC.js在静态页面引入即可使用该组件 \n//写入html中的组件\n<my-counter count=\"10\"></my-counter> \n\nclass Counter extends HTMLElement {\n    constructor(){\n        super();\n        this.attachShadow({mode:'open'})\n    }\n\n    static get observedAttributes(){\n        return ['count']\n    }   \n\n    get count(){\n        return this.getAttribute('count')\n    }\n\n    set count(val){\n        this.setAttribute('count',val)\n    }\n\n    inc(){\n        this.count++\n    }\n\n    btnEvent(){\n        let btn = this.shadowRoot.querySelector('#btn');\n        btn.addEventListener('click',this.inc.bind(this))\n    }\n\n    attributeChangedCallback(prop,oldVal,newVal){   \n        if(prop === 'count'){\n            this.render()\n            this.btnEvent()\n        } \n    }\n\n    connectedCallback(){\n        this.render();\n        this.btnEvent()\n    }\n\n    render(){\n        this.shadowRoot.innerHTML = `\n            <h1>Counter</h1>\n            ${this.count}\n            <button id=\"btn\">Increment</button>\n\n            <style>\n                h1{\n                    color:rgba(0,0,0,.6)\n                }\n            </style>\n        `\n    }\n}\n\ncustomElements.define('my-counter',Counter)\n```","slug":"webComponents","published":1,"date":"2021-08-22T02:23:36.906Z","updated":"2021-08-22T03:32:35.563Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40e000g42u70e111ce7","content":"<h2 id=\"Web-Components的概念和使用\"><a href=\"#Web-Components的概念和使用\" class=\"headerlink\" title=\"Web Components的概念和使用\"></a>Web Components的概念和使用</h2><ul>\n<li><p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的web应用中使用它们。</p>\n</li>\n<li><p>Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li><p>Custom elements（自定义元素）：一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</p>\n</li>\n<li><p>Shadow DOM（影子DOM）：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</p>\n</li>\n<li><p>HTML templates（HTML模板）： template 和 slot 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码demo\"><a href=\"#代码demo\" class=\"headerlink\" title=\"代码demo\"></a>代码demo</h3><p>1.customElements.define方法用来注册一个 custom element</p>\n<ul>\n<li>表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线</li>\n<li>用于定义元素行为的 类</li>\n<li>可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素</li>\n<li>例如：customElements.define(‘word-count’, WordCount, { extends: ‘p’ })</li>\n</ul>\n<p>2.attributeChangedCallback 会在 custom element增加、删除或者修改某个属性时被调用。</p>\n<p>3.connectedCallback 会在 custom element首次被插入到文档DOM节点上时被调用。</p>\n<p>4.this.shadowRoot.innerHTML  ShadowRoot 接口的 innerHTML 属性设置或返回 ShadowRoot内的DOM树。</p>\n<p>5.observedAttributes 函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称。</p>\n<figure class=\"highlight js\"><figcaption><span>webC.js在静态页面引入即可使用该组件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//写入html中的组件</span></span><br><span class=\"line\">&lt;my-counter count=<span class=\"string\">&quot;10&quot;</span>&gt;&lt;/my-counter&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123;<span class=\"attr\">mode</span>:<span class=\"string\">&#x27;open&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">observedAttributes</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">count</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;count&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">count</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;count&#x27;</span>,val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">inc</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">btnEvent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">this</span>.<span class=\"property\">shadowRoot</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">        btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inc</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">attributeChangedCallback</span>(<span class=\"params\">prop,oldVal,newVal</span>)&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prop === <span class=\"string\">&#x27;count&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>()</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">btnEvent</span>()</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">connectedCallback</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">btnEvent</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">shadowRoot</span>.<span class=\"property\">innerHTML</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1&gt;Counter&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.count&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">            &lt;button id=&quot;btn&quot;&gt;Increment&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">                h1&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    color:rgba(0,0,0,.6)</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-counter&#x27;</span>,<span class=\"title class_\">Counter</span>)</span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h2 id=\"Web-Components的概念和使用\"><a href=\"#Web-Components的概念和使用\" class=\"headerlink\" title=\"Web Components的概念和使用\"></a>Web Components的概念和使用</h2><ul>\n<li><p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的web应用中使用它们。</p>\n</li>\n<li><p>Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li><p>Custom elements（自定义元素）：一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</p>\n</li>\n<li><p>Shadow DOM（影子DOM）：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</p>\n</li>\n<li><p>HTML templates（HTML模板）： template 和 slot 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码demo\"><a href=\"#代码demo\" class=\"headerlink\" title=\"代码demo\"></a>代码demo</h3><p>1.customElements.define方法用来注册一个 custom element</p>\n<ul>\n<li>表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线</li>\n<li>用于定义元素行为的 类</li>\n<li>可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素</li>\n<li>例如：customElements.define(‘word-count’, WordCount, { extends: ‘p’ })</li>\n</ul>\n<p>2.attributeChangedCallback 会在 custom element增加、删除或者修改某个属性时被调用。</p>\n<p>3.connectedCallback 会在 custom element首次被插入到文档DOM节点上时被调用。</p>\n<p>4.this.shadowRoot.innerHTML  ShadowRoot 接口的 innerHTML 属性设置或返回 ShadowRoot内的DOM树。</p>\n<p>5.observedAttributes 函数体内包含一个 return语句，返回一个数组，包含了需要监听的属性名称。</p>\n<figure class=\"highlight js\"><figcaption><span>webC.js在静态页面引入即可使用该组件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//写入html中的组件</span></span><br><span class=\"line\">&lt;my-counter count=<span class=\"string\">&quot;10&quot;</span>&gt;&lt;/my-counter&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123;<span class=\"attr\">mode</span>:<span class=\"string\">&#x27;open&#x27;</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">observedAttributes</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">count</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;count&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">count</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;count&#x27;</span>,val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">inc</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">btnEvent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">this</span>.<span class=\"property\">shadowRoot</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">        btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">inc</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">attributeChangedCallback</span>(<span class=\"params\">prop,oldVal,newVal</span>)&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prop === <span class=\"string\">&#x27;count&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>()</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">btnEvent</span>()</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">connectedCallback</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">btnEvent</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">shadowRoot</span>.<span class=\"property\">innerHTML</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1&gt;Counter&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.count&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">            &lt;button id=&quot;btn&quot;&gt;Increment&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">                h1&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    color:rgba(0,0,0,.6)</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-counter&#x27;</span>,<span class=\"title class_\">Counter</span>)</span><br></pre></td></tr></table></figure>"},{"title":"pm2+ts-node启动node程序及其原理","_content":"\n## pm2简介\n\n### PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\n\n### PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.\n\n## pm2使用ts-node启动node程序的配置文件  \n\n### 注意点 ts-node需要全局安装 \n``` json\n{\n    \"interpreter\":\"./node_modules/.bin/ts-node\",  //ts-node启动文件在node_modules中的位置   \n    \"name\":\"xxx\",               // pm2项目名称\n    \"script\":\"./server/app.ts\", // node项目的启动文件\n    \"watch\":true,               // 是否监听文件变化\n    \"instacne\":\"max\",     // 解释器  interpreter absolute path (default to node)\n    \"exec_mode\":\"cluster\" // 什么模式启动 mode to start your app, can be “cluster” or “fork”, default fork\n}\n```\n\n## 了解pm2原理前我们需要知道主进程和子进程的关系\n\n### 主进程和子进程关系图\n\n- 程序 实例化 变为进程。\n- 程序变为进程后，内存空间分两段，一个是代码段，数据段。\n- 工作进程 依赖于 管理进程 执行的数据从管理的主进程去拿。\n- 主进程调起多个子进程 子进程共用主进程的数据文件，端口等内容，而不是cpu给子进程分配内存、端口等。\n- 多线程进程 只需要复制寄存器 和 栈里面的执行数据。\n\n![avatar](/img/thread.jpg)\n\n\n## pm2多线程原理基于node的多线程\n\n### nodejs主线程调用子线程代码\n\n```js\n//manager.js \nvar cluster = require('cluster');\nvar numCPUs = require('os').cpus().length; //cpu核心数\n \nif (cluster.isMaster) {  //判断是不是主进程 \n    console.log(numCPUs);\n    for (var i = 0; i < numCPUs; i++) {\n        var worker = cluster.fork();   //根据cpu核心数调起对应数量的子进程   \n    }\n} else {\n    require(\"./app.js\");               //子进程启动对应的web服务\n}\n//app.js 创建对应的服务\nvar http = require('http');\nhttp.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\n\");\n}).listen(8000);\n```\n\n\n### 可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务\n### 可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\n![avatar](/img/node.png)\n\n\n### 接下来我们访问localhost:8000可以看到node服务正常运行\n![avatar](/img/service.jpg)\n\n\n### pm2部分源码解读\n\n- 可以看到pm2是是通过cluster.fork生成新的工作进程 并监听了message事件用于和主进程之间的通信\n- getUncaughtExceptionListener函数中对于同步错误的会先触发disconnect事件发送消息给主进程，然后才执行exit退出程序\n\n```js\n    // lib/GodclusterMode.js  \n    God.nodeApp = function nodeApp(env_copy, cb){\n    var clu = null;\n    console.log(`App [${env_copy.name}:${env_copy.pm_id}] starting in -cluster mode-`)\n    if (env_copy.node_args && Array.isArray(env_copy.node_args)) {\n      cluster.settings.execArgv = env_copy.node_args;\n    }\n    env_copy._pm2_version = pkg.version;\n    try {\n      // node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:\n      // { \"args\": [\"foo\", \"bar\"], \"env\": { \"foo1\": \"bar1\" }} will be parsed to\n      // { \"args\": \"foo, bar\", \"env\": \"[object Object]\"}\n      // So we passing a stringified JSON here.\n      clu = cluster.fork({pm2_env: JSON.stringify(env_copy), windowsHide: true});\n    } catch(e) {\n      God.logAndGenerateError(e);\n      return cb(e);\n    }\n    clu.pm2_env = env_copy;\n    /**\n     * Broadcast message to God\n     */\n    clu.on('message', function cluMessage(msg) {\n      /*********************************\n       * If you edit this function\n       * Do the same in ForkMode.js !\n       *********************************/\n      if (msg.data && msg.type) {\n        return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n          at      : Utility.getDate(),\n          data    : msg.data,\n          process :  {\n            pm_id      : clu.pm2_env.pm_id,\n            name       : clu.pm2_env.name,\n            rev        : (clu.pm2_env.versioning && clu.pm2_env.versioning.revision) ? clu.pm2_env.versioning.revision : null,\n            namespace  : clu.pm2_env.namespace\n          }\n        });\n      }\n      else {\n            if (typeof msg == 'object' && 'node_version' in msg) {\n                clu.pm2_env.node_version = msg.node_version;\n                return false;\n            }\n                return God.bus.emit('process:msg', {\n                at      : Utility.getDate(),\n                raw     : msg,\n                process :  {\n                    pm_id      : clu.pm2_env.pm_id,\n                    name       : clu.pm2_env.name,\n                    namespace  : clu.pm2_env.namespace\n                }\n                });\n            }\n                });\n\n                return cb(null, clu);\n        };\n    };\n    // lib/ProcessContainer.js  \n    function getUncaughtExceptionListener(listener) {\n      return function uncaughtListener(err) {\n        var error = err && err.stack ? err.stack : err;\n        if (listener === 'unhandledRejection') {\n          error = 'You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:\\n' + error;\n        }\n        logError(['std', 'err'], error);\n        // Notify master that an uncaughtException has been catched\n        try {\n          if (err) {\n            var errObj = {};\n\n            Object.getOwnPropertyNames(err).forEach(function(key) {\n              errObj[key] = err[key];\n            });\n          }\n          process.send({\n            type : 'log:err',\n            topic : 'log:err',\n            data : '\\n' + error + '\\n'\n          });\n          process.send({\n            type    : 'process:exception',\n            data    : errObj !== undefined ? errObj : {message: 'No error but ' + listener + ' was caught!'}\n          });\n        } catch(e) {\n          logError(['std', 'err'], 'Channel is already closed can\\'t broadcast error:\\n' + e.stack);\n        }\n\n        if (!process.listeners(listener).filter(function (listener) {\n            return listener !== uncaughtListener;\n        }).length) {\n          if (listener == 'uncaughtException') {\n            process.emit('disconnect');\n            process.exit(cst.CODE_UNCAUGHTEXCEPTION);\n          }\n        }\n      }\n    } \n    process.on('uncaughtException', getUncaughtExceptionListener('uncaughtException'));\n    process.on('unhandledRejection', getUncaughtExceptionListener('unhandledRejection'));\n```\n","source":"_posts/pm2.md","raw":"---\ntitle: pm2+ts-node启动node程序及其原理\n---\n\n## pm2简介\n\n### PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\n\n### PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.\n\n## pm2使用ts-node启动node程序的配置文件  \n\n### 注意点 ts-node需要全局安装 \n``` json\n{\n    \"interpreter\":\"./node_modules/.bin/ts-node\",  //ts-node启动文件在node_modules中的位置   \n    \"name\":\"xxx\",               // pm2项目名称\n    \"script\":\"./server/app.ts\", // node项目的启动文件\n    \"watch\":true,               // 是否监听文件变化\n    \"instacne\":\"max\",     // 解释器  interpreter absolute path (default to node)\n    \"exec_mode\":\"cluster\" // 什么模式启动 mode to start your app, can be “cluster” or “fork”, default fork\n}\n```\n\n## 了解pm2原理前我们需要知道主进程和子进程的关系\n\n### 主进程和子进程关系图\n\n- 程序 实例化 变为进程。\n- 程序变为进程后，内存空间分两段，一个是代码段，数据段。\n- 工作进程 依赖于 管理进程 执行的数据从管理的主进程去拿。\n- 主进程调起多个子进程 子进程共用主进程的数据文件，端口等内容，而不是cpu给子进程分配内存、端口等。\n- 多线程进程 只需要复制寄存器 和 栈里面的执行数据。\n\n![avatar](/img/thread.jpg)\n\n\n## pm2多线程原理基于node的多线程\n\n### nodejs主线程调用子线程代码\n\n```js\n//manager.js \nvar cluster = require('cluster');\nvar numCPUs = require('os').cpus().length; //cpu核心数\n \nif (cluster.isMaster) {  //判断是不是主进程 \n    console.log(numCPUs);\n    for (var i = 0; i < numCPUs; i++) {\n        var worker = cluster.fork();   //根据cpu核心数调起对应数量的子进程   \n    }\n} else {\n    require(\"./app.js\");               //子进程启动对应的web服务\n}\n//app.js 创建对应的服务\nvar http = require('http');\nhttp.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\n\");\n}).listen(8000);\n```\n\n\n### 可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务\n### 可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\n![avatar](/img/node.png)\n\n\n### 接下来我们访问localhost:8000可以看到node服务正常运行\n![avatar](/img/service.jpg)\n\n\n### pm2部分源码解读\n\n- 可以看到pm2是是通过cluster.fork生成新的工作进程 并监听了message事件用于和主进程之间的通信\n- getUncaughtExceptionListener函数中对于同步错误的会先触发disconnect事件发送消息给主进程，然后才执行exit退出程序\n\n```js\n    // lib/GodclusterMode.js  \n    God.nodeApp = function nodeApp(env_copy, cb){\n    var clu = null;\n    console.log(`App [${env_copy.name}:${env_copy.pm_id}] starting in -cluster mode-`)\n    if (env_copy.node_args && Array.isArray(env_copy.node_args)) {\n      cluster.settings.execArgv = env_copy.node_args;\n    }\n    env_copy._pm2_version = pkg.version;\n    try {\n      // node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:\n      // { \"args\": [\"foo\", \"bar\"], \"env\": { \"foo1\": \"bar1\" }} will be parsed to\n      // { \"args\": \"foo, bar\", \"env\": \"[object Object]\"}\n      // So we passing a stringified JSON here.\n      clu = cluster.fork({pm2_env: JSON.stringify(env_copy), windowsHide: true});\n    } catch(e) {\n      God.logAndGenerateError(e);\n      return cb(e);\n    }\n    clu.pm2_env = env_copy;\n    /**\n     * Broadcast message to God\n     */\n    clu.on('message', function cluMessage(msg) {\n      /*********************************\n       * If you edit this function\n       * Do the same in ForkMode.js !\n       *********************************/\n      if (msg.data && msg.type) {\n        return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n          at      : Utility.getDate(),\n          data    : msg.data,\n          process :  {\n            pm_id      : clu.pm2_env.pm_id,\n            name       : clu.pm2_env.name,\n            rev        : (clu.pm2_env.versioning && clu.pm2_env.versioning.revision) ? clu.pm2_env.versioning.revision : null,\n            namespace  : clu.pm2_env.namespace\n          }\n        });\n      }\n      else {\n            if (typeof msg == 'object' && 'node_version' in msg) {\n                clu.pm2_env.node_version = msg.node_version;\n                return false;\n            }\n                return God.bus.emit('process:msg', {\n                at      : Utility.getDate(),\n                raw     : msg,\n                process :  {\n                    pm_id      : clu.pm2_env.pm_id,\n                    name       : clu.pm2_env.name,\n                    namespace  : clu.pm2_env.namespace\n                }\n                });\n            }\n                });\n\n                return cb(null, clu);\n        };\n    };\n    // lib/ProcessContainer.js  \n    function getUncaughtExceptionListener(listener) {\n      return function uncaughtListener(err) {\n        var error = err && err.stack ? err.stack : err;\n        if (listener === 'unhandledRejection') {\n          error = 'You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:\\n' + error;\n        }\n        logError(['std', 'err'], error);\n        // Notify master that an uncaughtException has been catched\n        try {\n          if (err) {\n            var errObj = {};\n\n            Object.getOwnPropertyNames(err).forEach(function(key) {\n              errObj[key] = err[key];\n            });\n          }\n          process.send({\n            type : 'log:err',\n            topic : 'log:err',\n            data : '\\n' + error + '\\n'\n          });\n          process.send({\n            type    : 'process:exception',\n            data    : errObj !== undefined ? errObj : {message: 'No error but ' + listener + ' was caught!'}\n          });\n        } catch(e) {\n          logError(['std', 'err'], 'Channel is already closed can\\'t broadcast error:\\n' + e.stack);\n        }\n\n        if (!process.listeners(listener).filter(function (listener) {\n            return listener !== uncaughtListener;\n        }).length) {\n          if (listener == 'uncaughtException') {\n            process.emit('disconnect');\n            process.exit(cst.CODE_UNCAUGHTEXCEPTION);\n          }\n        }\n      }\n    } \n    process.on('uncaughtException', getUncaughtExceptionListener('uncaughtException'));\n    process.on('unhandledRejection', getUncaughtExceptionListener('unhandledRejection'));\n```\n","slug":"pm2","published":1,"date":"2021-07-23T07:34:07.552Z","updated":"2021-08-07T02:57:35.607Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40e000h42u783s3fbe2","content":"<h2 id=\"pm2简介\"><a href=\"#pm2简介\" class=\"headerlink\" title=\"pm2简介\"></a>pm2简介</h2><h3 id=\"PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\"><a href=\"#PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\" class=\"headerlink\" title=\"PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\"></a>PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线</h3><h3 id=\"PM2-is-a-daemon-process-manager-that-will-help-you-manage-and-keep-your-application-online-Getting-started-with-PM2-is-straightforward-it-is-offered-as-a-simple-and-intuitive-CLI-installable-via-NPM\"><a href=\"#PM2-is-a-daemon-process-manager-that-will-help-you-manage-and-keep-your-application-online-Getting-started-with-PM2-is-straightforward-it-is-offered-as-a-simple-and-intuitive-CLI-installable-via-NPM\" class=\"headerlink\" title=\"PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.\"></a>PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.</h3><h2 id=\"pm2使用ts-node启动node程序的配置文件\"><a href=\"#pm2使用ts-node启动node程序的配置文件\" class=\"headerlink\" title=\"pm2使用ts-node启动node程序的配置文件\"></a>pm2使用ts-node启动node程序的配置文件</h2><h3 id=\"注意点-ts-node需要全局安装\"><a href=\"#注意点-ts-node需要全局安装\" class=\"headerlink\" title=\"注意点 ts-node需要全局安装\"></a>注意点 ts-node需要全局安装</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;interpreter&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;./node_modules/.bin/ts-node&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//ts-node启动文件在node_modules中的位置   </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span>               <span class=\"comment\">// pm2项目名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;script&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;./server/app.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// node项目的启动文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;watch&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span>               <span class=\"comment\">// 是否监听文件变化</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;instacne&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span>     <span class=\"comment\">// 解释器  interpreter absolute path (default to node)</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;exec_mode&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;cluster&quot;</span> <span class=\"comment\">// 什么模式启动 mode to start your app, can be “cluster” or “fork”, default fork</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"了解pm2原理前我们需要知道主进程和子进程的关系\"><a href=\"#了解pm2原理前我们需要知道主进程和子进程的关系\" class=\"headerlink\" title=\"了解pm2原理前我们需要知道主进程和子进程的关系\"></a>了解pm2原理前我们需要知道主进程和子进程的关系</h2><h3 id=\"主进程和子进程关系图\"><a href=\"#主进程和子进程关系图\" class=\"headerlink\" title=\"主进程和子进程关系图\"></a>主进程和子进程关系图</h3><ul>\n<li>程序 实例化 变为进程。</li>\n<li>程序变为进程后，内存空间分两段，一个是代码段，数据段。</li>\n<li>工作进程 依赖于 管理进程 执行的数据从管理的主进程去拿。</li>\n<li>主进程调起多个子进程 子进程共用主进程的数据文件，端口等内容，而不是cpu给子进程分配内存、端口等。</li>\n<li>多线程进程 只需要复制寄存器 和 栈里面的执行数据。</li>\n</ul>\n<p><img src=\"/img/thread.jpg\" alt=\"avatar\"></p>\n<h2 id=\"pm2多线程原理基于node的多线程\"><a href=\"#pm2多线程原理基于node的多线程\" class=\"headerlink\" title=\"pm2多线程原理基于node的多线程\"></a>pm2多线程原理基于node的多线程</h2><h3 id=\"nodejs主线程调用子线程代码\"><a href=\"#nodejs主线程调用子线程代码\" class=\"headerlink\" title=\"nodejs主线程调用子线程代码\"></a>nodejs主线程调用子线程代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//manager.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cluster&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>; <span class=\"comment\">//cpu核心数</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (cluster.<span class=\"property\">isMaster</span>) &#123;  <span class=\"comment\">//判断是不是主进程 </span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numCPUs);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> worker = cluster.<span class=\"title function_\">fork</span>();   <span class=\"comment\">//根据cpu核心数调起对应数量的子进程   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./app.js&quot;</span>);               <span class=\"comment\">//子进程启动对应的web服务</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//app.js 创建对应的服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;hello world</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"可以通过ps-aux-grep-node-查看是否启动的对应数量的子进程服务\"><a href=\"#可以通过ps-aux-grep-node-查看是否启动的对应数量的子进程服务\" class=\"headerlink\" title=\"可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务\"></a>可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务</h3><h3 id=\"可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\"><a href=\"#可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\" class=\"headerlink\" title=\"可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\"></a>可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。</h3><p><img src=\"/img/node.png\" alt=\"avatar\"></p>\n<h3 id=\"接下来我们访问localhost-8000可以看到node服务正常运行\"><a href=\"#接下来我们访问localhost-8000可以看到node服务正常运行\" class=\"headerlink\" title=\"接下来我们访问localhost:8000可以看到node服务正常运行\"></a>接下来我们访问localhost:8000可以看到node服务正常运行</h3><p><img src=\"/img/service.jpg\" alt=\"avatar\"></p>\n<h3 id=\"pm2部分源码解读\"><a href=\"#pm2部分源码解读\" class=\"headerlink\" title=\"pm2部分源码解读\"></a>pm2部分源码解读</h3><ul>\n<li>可以看到pm2是是通过cluster.fork生成新的工作进程 并监听了message事件用于和主进程之间的通信</li>\n<li>getUncaughtExceptionListener函数中对于同步错误的会先触发disconnect事件发送消息给主进程，然后才执行exit退出程序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/GodclusterMode.js  </span></span><br><span class=\"line\"><span class=\"title class_\">God</span>.<span class=\"property\">nodeApp</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">nodeApp</span>(<span class=\"params\">env_copy, cb</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clu = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`App [<span class=\"subst\">$&#123;env_copy.name&#125;</span>:<span class=\"subst\">$&#123;env_copy.pm_id&#125;</span>] starting in -cluster mode-`</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (env_copy.<span class=\"property\">node_args</span> &amp;&amp; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(env_copy.<span class=\"property\">node_args</span>)) &#123;</span><br><span class=\"line\">  cluster.<span class=\"property\">settings</span>.<span class=\"property\">execArgv</span> = env_copy.<span class=\"property\">node_args</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">env_copy.<span class=\"property\">_pm2_version</span> = pkg.<span class=\"property\">version</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; &quot;args&quot;: [&quot;foo&quot;, &quot;bar&quot;], &quot;env&quot;: &#123; &quot;foo1&quot;: &quot;bar1&quot; &#125;&#125; will be parsed to</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; &quot;args&quot;: &quot;foo, bar&quot;, &quot;env&quot;: &quot;[object Object]&quot;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// So we passing a stringified JSON here.</span></span><br><span class=\"line\">  clu = cluster.<span class=\"title function_\">fork</span>(&#123;<span class=\"attr\">pm2_env</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(env_copy), <span class=\"attr\">windowsHide</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">God</span>.<span class=\"title function_\">logAndGenerateError</span>(e);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clu.<span class=\"property\">pm2_env</span> = env_copy;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Broadcast message to God</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">clu.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">cluMessage</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*********************************</span></span><br><span class=\"line\"><span class=\"comment\">   * If you edit this function</span></span><br><span class=\"line\"><span class=\"comment\">   * Do the same in ForkMode.js !</span></span><br><span class=\"line\"><span class=\"comment\">   *********************************/</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msg.<span class=\"property\">data</span> &amp;&amp; msg.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">God</span>.<span class=\"property\">bus</span>.<span class=\"title function_\">emit</span>(msg.<span class=\"property\">type</span> ? msg.<span class=\"property\">type</span> : <span class=\"string\">&#x27;process:msg&#x27;</span>, &#123;</span><br><span class=\"line\">      at      : <span class=\"title class_\">Utility</span>.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">      data    : msg.<span class=\"property\">data</span>,</span><br><span class=\"line\">      process :  &#123;</span><br><span class=\"line\">        pm_id      : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">pm_id</span>,</span><br><span class=\"line\">        name       : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">        rev        : (clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span> &amp;&amp; clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span>.<span class=\"property\">revision</span>) ? clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span>.<span class=\"property\">revision</span> : <span class=\"literal\">null</span>,</span><br><span class=\"line\">        namespace  : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">namespace</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> msg == <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"string\">&#x27;node_version&#x27;</span> <span class=\"keyword\">in</span> msg) &#123;</span><br><span class=\"line\">            clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">node_version</span> = msg.<span class=\"property\">node_version</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">God</span>.<span class=\"property\">bus</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;process:msg&#x27;</span>, &#123;</span><br><span class=\"line\">            at      : <span class=\"title class_\">Utility</span>.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">            raw     : msg,</span><br><span class=\"line\">            process :  &#123;</span><br><span class=\"line\">                pm_id      : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">pm_id</span>,</span><br><span class=\"line\">                name       : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">                namespace  : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">namespace</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(<span class=\"literal\">null</span>, clu);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// lib/ProcessContainer.js  </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">uncaughtListener</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> error = err &amp;&amp; err.<span class=\"property\">stack</span> ? err.<span class=\"property\">stack</span> : err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listener === <span class=\"string\">&#x27;unhandledRejection&#x27;</span>) &#123;</span><br><span class=\"line\">      error = <span class=\"string\">&#x27;You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:\\n&#x27;</span> + error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">logError</span>([<span class=\"string\">&#x27;std&#x27;</span>, <span class=\"string\">&#x27;err&#x27;</span>], error);</span><br><span class=\"line\">    <span class=\"comment\">// Notify master that an uncaughtException has been catched</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(err).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">          errObj[key] = err[key];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      process.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        type : <span class=\"string\">&#x27;log:err&#x27;</span>,</span><br><span class=\"line\">        topic : <span class=\"string\">&#x27;log:err&#x27;</span>,</span><br><span class=\"line\">        data : <span class=\"string\">&#x27;\\n&#x27;</span> + error + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      process.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        type    : <span class=\"string\">&#x27;process:exception&#x27;</span>,</span><br><span class=\"line\">        data    : errObj !== <span class=\"literal\">undefined</span> ? errObj : &#123;<span class=\"attr\">message</span>: <span class=\"string\">&#x27;No error but &#x27;</span> + listener + <span class=\"string\">&#x27; was caught!&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">logError</span>([<span class=\"string\">&#x27;std&#x27;</span>, <span class=\"string\">&#x27;err&#x27;</span>], <span class=\"string\">&#x27;Channel is already closed can\\&#x27;t broadcast error:\\n&#x27;</span> + e.<span class=\"property\">stack</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!process.<span class=\"title function_\">listeners</span>(listener).<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span> (<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listener !== uncaughtListener;</span><br><span class=\"line\">    &#125;).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listener == <span class=\"string\">&#x27;uncaughtException&#x27;</span>) &#123;</span><br><span class=\"line\">        process.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(cst.<span class=\"property\">CODE_UNCAUGHTEXCEPTION</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>, <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>));</span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>, <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>));</span><br></pre></td></tr></table></figure>\n","cover":false,"excerpt":"","more":"<h2 id=\"pm2简介\"><a href=\"#pm2简介\" class=\"headerlink\" title=\"pm2简介\"></a>pm2简介</h2><h3 id=\"PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\"><a href=\"#PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\" class=\"headerlink\" title=\"PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线\"></a>PM2是一个守护进程管理器，它将帮助您管理和保持应用程序在线</h3><h3 id=\"PM2-is-a-daemon-process-manager-that-will-help-you-manage-and-keep-your-application-online-Getting-started-with-PM2-is-straightforward-it-is-offered-as-a-simple-and-intuitive-CLI-installable-via-NPM\"><a href=\"#PM2-is-a-daemon-process-manager-that-will-help-you-manage-and-keep-your-application-online-Getting-started-with-PM2-is-straightforward-it-is-offered-as-a-simple-and-intuitive-CLI-installable-via-NPM\" class=\"headerlink\" title=\"PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.\"></a>PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.</h3><h2 id=\"pm2使用ts-node启动node程序的配置文件\"><a href=\"#pm2使用ts-node启动node程序的配置文件\" class=\"headerlink\" title=\"pm2使用ts-node启动node程序的配置文件\"></a>pm2使用ts-node启动node程序的配置文件</h2><h3 id=\"注意点-ts-node需要全局安装\"><a href=\"#注意点-ts-node需要全局安装\" class=\"headerlink\" title=\"注意点 ts-node需要全局安装\"></a>注意点 ts-node需要全局安装</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;interpreter&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;./node_modules/.bin/ts-node&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//ts-node启动文件在node_modules中的位置   </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span>               <span class=\"comment\">// pm2项目名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;script&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;./server/app.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// node项目的启动文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;watch&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span>               <span class=\"comment\">// 是否监听文件变化</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;instacne&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;max&quot;</span><span class=\"punctuation\">,</span>     <span class=\"comment\">// 解释器  interpreter absolute path (default to node)</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;exec_mode&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;cluster&quot;</span> <span class=\"comment\">// 什么模式启动 mode to start your app, can be “cluster” or “fork”, default fork</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"了解pm2原理前我们需要知道主进程和子进程的关系\"><a href=\"#了解pm2原理前我们需要知道主进程和子进程的关系\" class=\"headerlink\" title=\"了解pm2原理前我们需要知道主进程和子进程的关系\"></a>了解pm2原理前我们需要知道主进程和子进程的关系</h2><h3 id=\"主进程和子进程关系图\"><a href=\"#主进程和子进程关系图\" class=\"headerlink\" title=\"主进程和子进程关系图\"></a>主进程和子进程关系图</h3><ul>\n<li>程序 实例化 变为进程。</li>\n<li>程序变为进程后，内存空间分两段，一个是代码段，数据段。</li>\n<li>工作进程 依赖于 管理进程 执行的数据从管理的主进程去拿。</li>\n<li>主进程调起多个子进程 子进程共用主进程的数据文件，端口等内容，而不是cpu给子进程分配内存、端口等。</li>\n<li>多线程进程 只需要复制寄存器 和 栈里面的执行数据。</li>\n</ul>\n<p><img src=\"/img/thread.jpg\" alt=\"avatar\"></p>\n<h2 id=\"pm2多线程原理基于node的多线程\"><a href=\"#pm2多线程原理基于node的多线程\" class=\"headerlink\" title=\"pm2多线程原理基于node的多线程\"></a>pm2多线程原理基于node的多线程</h2><h3 id=\"nodejs主线程调用子线程代码\"><a href=\"#nodejs主线程调用子线程代码\" class=\"headerlink\" title=\"nodejs主线程调用子线程代码\"></a>nodejs主线程调用子线程代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//manager.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cluster&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>).<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>; <span class=\"comment\">//cpu核心数</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (cluster.<span class=\"property\">isMaster</span>) &#123;  <span class=\"comment\">//判断是不是主进程 </span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numCPUs);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> worker = cluster.<span class=\"title function_\">fork</span>();   <span class=\"comment\">//根据cpu核心数调起对应数量的子进程   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./app.js&quot;</span>);               <span class=\"comment\">//子进程启动对应的web服务</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//app.js 创建对应的服务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;hello world</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"可以通过ps-aux-grep-node-查看是否启动的对应数量的子进程服务\"><a href=\"#可以通过ps-aux-grep-node-查看是否启动的对应数量的子进程服务\" class=\"headerlink\" title=\"可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务\"></a>可以通过ps -aux | grep node 查看是否启动的对应数量的子进程服务</h3><h3 id=\"可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\"><a href=\"#可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\" class=\"headerlink\" title=\"可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。\"></a>可以看到根据操作系统的cpu核心启动了对应的8个node的子进程。</h3><p><img src=\"/img/node.png\" alt=\"avatar\"></p>\n<h3 id=\"接下来我们访问localhost-8000可以看到node服务正常运行\"><a href=\"#接下来我们访问localhost-8000可以看到node服务正常运行\" class=\"headerlink\" title=\"接下来我们访问localhost:8000可以看到node服务正常运行\"></a>接下来我们访问localhost:8000可以看到node服务正常运行</h3><p><img src=\"/img/service.jpg\" alt=\"avatar\"></p>\n<h3 id=\"pm2部分源码解读\"><a href=\"#pm2部分源码解读\" class=\"headerlink\" title=\"pm2部分源码解读\"></a>pm2部分源码解读</h3><ul>\n<li>可以看到pm2是是通过cluster.fork生成新的工作进程 并监听了message事件用于和主进程之间的通信</li>\n<li>getUncaughtExceptionListener函数中对于同步错误的会先触发disconnect事件发送消息给主进程，然后才执行exit退出程序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/GodclusterMode.js  </span></span><br><span class=\"line\"><span class=\"title class_\">God</span>.<span class=\"property\">nodeApp</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">nodeApp</span>(<span class=\"params\">env_copy, cb</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clu = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`App [<span class=\"subst\">$&#123;env_copy.name&#125;</span>:<span class=\"subst\">$&#123;env_copy.pm_id&#125;</span>] starting in -cluster mode-`</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (env_copy.<span class=\"property\">node_args</span> &amp;&amp; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(env_copy.<span class=\"property\">node_args</span>)) &#123;</span><br><span class=\"line\">  cluster.<span class=\"property\">settings</span>.<span class=\"property\">execArgv</span> = env_copy.<span class=\"property\">node_args</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">env_copy.<span class=\"property\">_pm2_version</span> = pkg.<span class=\"property\">version</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; &quot;args&quot;: [&quot;foo&quot;, &quot;bar&quot;], &quot;env&quot;: &#123; &quot;foo1&quot;: &quot;bar1&quot; &#125;&#125; will be parsed to</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; &quot;args&quot;: &quot;foo, bar&quot;, &quot;env&quot;: &quot;[object Object]&quot;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// So we passing a stringified JSON here.</span></span><br><span class=\"line\">  clu = cluster.<span class=\"title function_\">fork</span>(&#123;<span class=\"attr\">pm2_env</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(env_copy), <span class=\"attr\">windowsHide</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">God</span>.<span class=\"title function_\">logAndGenerateError</span>(e);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clu.<span class=\"property\">pm2_env</span> = env_copy;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Broadcast message to God</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">clu.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">cluMessage</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*********************************</span></span><br><span class=\"line\"><span class=\"comment\">   * If you edit this function</span></span><br><span class=\"line\"><span class=\"comment\">   * Do the same in ForkMode.js !</span></span><br><span class=\"line\"><span class=\"comment\">   *********************************/</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msg.<span class=\"property\">data</span> &amp;&amp; msg.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">God</span>.<span class=\"property\">bus</span>.<span class=\"title function_\">emit</span>(msg.<span class=\"property\">type</span> ? msg.<span class=\"property\">type</span> : <span class=\"string\">&#x27;process:msg&#x27;</span>, &#123;</span><br><span class=\"line\">      at      : <span class=\"title class_\">Utility</span>.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">      data    : msg.<span class=\"property\">data</span>,</span><br><span class=\"line\">      process :  &#123;</span><br><span class=\"line\">        pm_id      : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">pm_id</span>,</span><br><span class=\"line\">        name       : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">        rev        : (clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span> &amp;&amp; clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span>.<span class=\"property\">revision</span>) ? clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">versioning</span>.<span class=\"property\">revision</span> : <span class=\"literal\">null</span>,</span><br><span class=\"line\">        namespace  : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">namespace</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> msg == <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"string\">&#x27;node_version&#x27;</span> <span class=\"keyword\">in</span> msg) &#123;</span><br><span class=\"line\">            clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">node_version</span> = msg.<span class=\"property\">node_version</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">God</span>.<span class=\"property\">bus</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;process:msg&#x27;</span>, &#123;</span><br><span class=\"line\">            at      : <span class=\"title class_\">Utility</span>.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">            raw     : msg,</span><br><span class=\"line\">            process :  &#123;</span><br><span class=\"line\">                pm_id      : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">pm_id</span>,</span><br><span class=\"line\">                name       : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">                namespace  : clu.<span class=\"property\">pm2_env</span>.<span class=\"property\">namespace</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(<span class=\"literal\">null</span>, clu);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// lib/ProcessContainer.js  </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">uncaughtListener</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> error = err &amp;&amp; err.<span class=\"property\">stack</span> ? err.<span class=\"property\">stack</span> : err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listener === <span class=\"string\">&#x27;unhandledRejection&#x27;</span>) &#123;</span><br><span class=\"line\">      error = <span class=\"string\">&#x27;You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:\\n&#x27;</span> + error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">logError</span>([<span class=\"string\">&#x27;std&#x27;</span>, <span class=\"string\">&#x27;err&#x27;</span>], error);</span><br><span class=\"line\">    <span class=\"comment\">// Notify master that an uncaughtException has been catched</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> errObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(err).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">          errObj[key] = err[key];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      process.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        type : <span class=\"string\">&#x27;log:err&#x27;</span>,</span><br><span class=\"line\">        topic : <span class=\"string\">&#x27;log:err&#x27;</span>,</span><br><span class=\"line\">        data : <span class=\"string\">&#x27;\\n&#x27;</span> + error + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      process.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        type    : <span class=\"string\">&#x27;process:exception&#x27;</span>,</span><br><span class=\"line\">        data    : errObj !== <span class=\"literal\">undefined</span> ? errObj : &#123;<span class=\"attr\">message</span>: <span class=\"string\">&#x27;No error but &#x27;</span> + listener + <span class=\"string\">&#x27; was caught!&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">logError</span>([<span class=\"string\">&#x27;std&#x27;</span>, <span class=\"string\">&#x27;err&#x27;</span>], <span class=\"string\">&#x27;Channel is already closed can\\&#x27;t broadcast error:\\n&#x27;</span> + e.<span class=\"property\">stack</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!process.<span class=\"title function_\">listeners</span>(listener).<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span> (<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listener !== uncaughtListener;</span><br><span class=\"line\">    &#125;).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listener == <span class=\"string\">&#x27;uncaughtException&#x27;</span>) &#123;</span><br><span class=\"line\">        process.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>);</span><br><span class=\"line\">        process.<span class=\"title function_\">exit</span>(cst.<span class=\"property\">CODE_UNCAUGHTEXCEPTION</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>, <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>));</span><br><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>, <span class=\"title function_\">getUncaughtExceptionListener</span>(<span class=\"string\">&#x27;unhandledRejection&#x27;</span>));</span><br></pre></td></tr></table></figure>\n"},{"title":"基于yapi-to-typescript根据yapi接口文档自动.d.ts文件","cover":"/img/yapi.png","_content":"\n#### 使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。\n\n- 下载安装依赖\n\n```ts\nyarn add -D yapi-to-typescript\n```\n\n- 配置 ytt 文件\n\n```ts\nimport { defineConfig } from \"yapi-to-typescript\";\n\nexport default defineConfig([\n  {\n    serverUrl: \"http://183.146.28.170:3000\",\n    typesOnly: true,\n    target: \"typescript\",\n    reactHooks: {\n      enabled: false,\n    },\n    prodEnvName: \"test\",\n    outputFilePath: \"./typings/api/yapi.d.ts\",\n    dataKey: \"data\",\n    projects: [\n      {\n        token: \"xxx\", // yapi文档设置-token配置\n        categories: [\n          {\n            id: 0,\n            getRequestFunctionName(interfaceInfo, changeCase) {\n              return changeCase.camelCase(interfaceInfo.path);\n            },\n          },\n        ],\n      },\n    ],\n  },\n]);\n```\n\n- 配置 package.json 文件\n\n```json\n\"ytt\": \"npx ytt\"\n```\n\n- 执行 yarn ytt 生成.d.ts 文件\n\n  ![avatar](/img/type.png)\n","source":"_posts/yapi.md","raw":"---\ntitle: 基于yapi-to-typescript根据yapi接口文档自动.d.ts文件\ncover: /img/yapi.png\n---\n\n#### 使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。\n\n- 下载安装依赖\n\n```ts\nyarn add -D yapi-to-typescript\n```\n\n- 配置 ytt 文件\n\n```ts\nimport { defineConfig } from \"yapi-to-typescript\";\n\nexport default defineConfig([\n  {\n    serverUrl: \"http://183.146.28.170:3000\",\n    typesOnly: true,\n    target: \"typescript\",\n    reactHooks: {\n      enabled: false,\n    },\n    prodEnvName: \"test\",\n    outputFilePath: \"./typings/api/yapi.d.ts\",\n    dataKey: \"data\",\n    projects: [\n      {\n        token: \"xxx\", // yapi文档设置-token配置\n        categories: [\n          {\n            id: 0,\n            getRequestFunctionName(interfaceInfo, changeCase) {\n              return changeCase.camelCase(interfaceInfo.path);\n            },\n          },\n        ],\n      },\n    ],\n  },\n]);\n```\n\n- 配置 package.json 文件\n\n```json\n\"ytt\": \"npx ytt\"\n```\n\n- 执行 yarn ytt 生成.d.ts 文件\n\n  ![avatar](/img/type.png)\n","slug":"yapi","published":1,"date":"2024-09-03T02:58:57.486Z","updated":"2024-09-03T03:08:37.784Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40e000i42u799x4ahnh","content":"<h4 id=\"使用代码生成工具，根据-YApi-或-Swagger-的接口定义生成-TypeScript-或-JavaScript-的接口类型及其请求函数代码。\"><a href=\"#使用代码生成工具，根据-YApi-或-Swagger-的接口定义生成-TypeScript-或-JavaScript-的接口类型及其请求函数代码。\" class=\"headerlink\" title=\"使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。\"></a>使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。</h4><ul>\n<li>下载安装依赖</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D yapi-to-typescript</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ytt 文件</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;yapi-to-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">serverUrl</span>: <span class=\"string\">&quot;http://183.146.28.170:3000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">typesOnly</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&quot;typescript&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">reactHooks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">prodEnvName</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">outputFilePath</span>: <span class=\"string\">&quot;./typings/api/yapi.d.ts&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataKey</span>: <span class=\"string\">&quot;data&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">projects</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">token</span>: <span class=\"string\">&quot;xxx&quot;</span>, <span class=\"comment\">// yapi文档设置-token配置</span></span><br><span class=\"line\">        <span class=\"attr\">categories</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"title function_\">getRequestFunctionName</span>(<span class=\"params\">interfaceInfo, changeCase</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> changeCase.<span class=\"title function_\">camelCase</span>(interfaceInfo.<span class=\"property\">path</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 package.json 文件</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ytt&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx ytt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行 yarn ytt 生成.d.ts 文件</p>\n<p><img src=\"/img/type.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h4 id=\"使用代码生成工具，根据-YApi-或-Swagger-的接口定义生成-TypeScript-或-JavaScript-的接口类型及其请求函数代码。\"><a href=\"#使用代码生成工具，根据-YApi-或-Swagger-的接口定义生成-TypeScript-或-JavaScript-的接口类型及其请求函数代码。\" class=\"headerlink\" title=\"使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。\"></a>使用代码生成工具，根据 YApi 或 Swagger 的接口定义生成 TypeScript 或 JavaScript 的接口类型及其请求函数代码。</h4><ul>\n<li>下载安装依赖</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D yapi-to-typescript</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ytt 文件</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;yapi-to-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">serverUrl</span>: <span class=\"string\">&quot;http://183.146.28.170:3000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">typesOnly</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&quot;typescript&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">reactHooks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">prodEnvName</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">outputFilePath</span>: <span class=\"string\">&quot;./typings/api/yapi.d.ts&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataKey</span>: <span class=\"string\">&quot;data&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">projects</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">token</span>: <span class=\"string\">&quot;xxx&quot;</span>, <span class=\"comment\">// yapi文档设置-token配置</span></span><br><span class=\"line\">        <span class=\"attr\">categories</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"title function_\">getRequestFunctionName</span>(<span class=\"params\">interfaceInfo, changeCase</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> changeCase.<span class=\"title function_\">camelCase</span>(interfaceInfo.<span class=\"property\">path</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 package.json 文件</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ytt&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx ytt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行 yarn ytt 生成.d.ts 文件</p>\n<p><img src=\"/img/type.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n"},{"title":"vue scope css 的实现原理","cover":"/img/scopecss-z.webp","_content":"\n### vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\n- 从图片中可以看到在style标签中加上了scoped后，打包的出的css部分会加上对用的属性选择器以此来实现css的隔离防止命名冲突造成的样式问题。\n![avatar](/img/moduleId.webp)\n\n### 源码位置\n- vue-loader lib/loader.js中通过hash算法取文件路径或者文件路径加上传入的内容生成的哈希值作为moduleId。\n```js\n    ...\n    const rawRequest = getRawRequest(this, options.excludedPreLoaders)\n    const filePath = this.resourcePath\n    const fileName = path.basename(filePath)\n    const context =\n        (this._compiler && this._compiler.context) ||\n        this.options.context ||\n        process.cwd()\n    const sourceRoot = path.dirname(path.relative(context, filePath))\n    const shortFilePath = path.relative(context, filePath).replace(/^(\\.\\.[\\\\\\/])+/, '').replace(/\\\\/g, '/')\n    const moduleId = 'data-v-' + hash(isProduction ? (shortFilePath + '\\n' + content) : shortFilePath)\n    console.log(moduleId,'🌛')\n    // 模块Id 也是属性选择器 \n    ...\n```\n\n![avatar](/img/moduleId1.webp)\n\n- vue-loader lib/loader.js中的getRawLoaderString对于template的处理是用的defaultLoaders.html，const templateCompilerPath = normalize.lib('template-compiler/index')，和compile = compiler.compile以及compile(html, compilerOptions)表明template-compiler/index.js调用了vue-template-compiler/build.js的compile方法来处理template，查看template-compiler/index.js可以看到导出了一个loader函数接受到了从template中解析出的html，经过vue-template-compiler/build.js中的compile方法编译成ast树，再经过组装生成code，可以看到.render('data-v-xxx',esEports)传入了moduleId，在之后的loader处理生成html时会给每个组件的元素加上属性data-v-xxx。\n![avatar](/img/moduleId4.webp)\n![avatar](/img/moduleId5.webp)\n```js\n// vue-loader lib/loader.js\n...\nconst templateCompilerPath = normalize.lib('template-compiler/index')// 引入了template-compiler解析template\n...\nconst defaultLoaders = {\n    html: templateCompilerPath + templateCompilerOptions, \n    css: options.extractCSS\n      ? getCSSExtractLoader()\n      : styleLoaderPath + '!' + 'css-loader' + cssLoaderOptions,\n    js: hasBuble\n      ? 'buble-loader' + bubleOptions\n      : hasBabel ? 'babel-loader' : ''\n  }\n  ...\n  function getRawLoaderString (type, part, index, scoped) {\n      ...\n      // if user defines custom loaders for html, add template compiler to it\n      if (type === 'template' && loader.indexOf(defaultLoaders.html) < 0) {\n        loader = defaultLoaders.html + '!' + loader\n      }\n      if(type === 'template'){\n        // console.log(loader,'🐟')\n      }\n      return injectString + ensureBang(loader)\n    } else {\n      // unknown lang, infer the loader to be used\n      switch (type) {\n        case 'template':\n          return (\n            defaultLoaders.html +\n            '!' +\n            templatePreprocessorPath +\n            '?engine=' +\n            lang +\n            '!'\n          )\n        case 'styles':\n          loader = addCssModulesToLoader(defaultLoaders.css, part, index)\n          return loader + '!' + styleCompiler + ensureBang(ensureLoader(lang))\n        case 'script':\n          return injectString + ensureBang(ensureLoader(lang))\n        default:\n          loader = loaders[type]\n          if (Array.isArray(loader)) {\n            loader = stringifyLoaders(loader)\n          }\n          return ensureBang(loader + buildCustomBlockLoaderString(part.attrs))\n      }\n    }\n  }\n...\n// template-compiler/index.js\nconst prettier = require('prettier')\nconst loaderUtils = require('loader-utils')\nconst normalize = require('../utils/normalize')\nconst compiler = require('vue-template-compiler')\nconst transpile = require('vue-template-es2015-compiler')\nconst hotReloadAPIPath = normalize.dep('vue-hot-reload-api')\nconst transformRequire = require('./modules/transform-require')\nconst transformSrcset = require('./modules/transform-srcset')\n\nmodule.exports = function (html) {\n  // console.log(html,'👀')\n  this.cacheable()\n  const isServer = this.target === 'node'\n  const isProduction = this.minimize || process.env.NODE_ENV === 'production'\n  const vueOptions = this.options.__vueOptions__ || {}\n  const options = loaderUtils.getOptions(this) || {}\n  const needsHotReload = !isServer && !isProduction && vueOptions.hotReload !== false\n  const defaultModules = [transformRequire(options.transformToRequire), transformSrcset()]\n  let userModules = vueOptions.compilerModules || options.compilerModules\n  // for HappyPack cross-process use cases\n  if (typeof userModules === 'string') {\n    userModules = require(userModules)\n  }\n  const compilerOptions = {\n    preserveWhitespace: options.preserveWhitespace,\n    modules: defaultModules.concat(userModules || []),\n    directives:\n      vueOptions.compilerDirectives || options.compilerDirectives || {},\n    scopeId: options.hasScoped ? options.id : null,\n    comments: options.hasComment\n  }\n\n  // vue-template-compiler 编译成ast  此处的compiler不是webpack的compiler模块是vue-template-compiler模块\n  const compile =\n    isServer && compiler.ssrCompile && vueOptions.optimizeSSR !== false\n      ? compiler.ssrCompile\n      : compiler.compile\n\n  const compiled = compile(html, compilerOptions)\n  // console.log(compiled,'🌟')\n  // tips\n  if (compiled.tips && compiled.tips.length) {\n    compiled.tips.forEach(tip => {\n      this.emitWarning(tip)\n    })\n  }\n  let code\n  if (compiled.errors && compiled.errors.length) {\n    this.emitError(\n      `\\n  Error compiling template:\\n${pad(html)}\\n` +\n        compiled.errors.map(e => `  - ${e}`).join('\\n') +\n        '\\n'\n    )\n    code = vueOptions.esModule\n      ? `var esExports = {render:function(){},staticRenderFns: []}\\nexport default esExports`\n      : 'module.exports={render:function(){},staticRenderFns:[]}'\n  } else {\n    const bubleOptions = options.buble\n    const stripWith = bubleOptions.transforms.stripWith !== false\n    const stripWithFunctional = bubleOptions.transforms.stripWithFunctional\n    const staticRenderFns = compiled.staticRenderFns.map(fn =>\n      toFunction(fn, stripWithFunctional)\n    )\n    // 组装ast生成render函数\n    code =\n      transpile(\n        'var render = ' +\n          toFunction(compiled.render, stripWithFunctional) +\n          '\\n' +\n          'var staticRenderFns = [' +\n          staticRenderFns.join(',') +\n          ']',\n        bubleOptions\n      ) + '\\n'\n    // prettify render fn\n    if (!isProduction) {\n      code = prettier.format(code, { semi: false, parser: 'babylon' })\n    }\n    // mark with stripped (this enables Vue to use correct runtime proxy detection)\n    if (!isProduction && stripWith) {\n      code += `render._withStripped = true\\n`\n    }\n    const exports = `{ render: render, staticRenderFns: staticRenderFns }`\n    code += vueOptions.esModule\n      ? `var esExports = ${exports}\\nexport default esExports`\n      : `module.exports = ${exports}`\n  }\n  // hot-reload\n  if (needsHotReload) {\n    const exportsName = vueOptions.esModule ? 'esExports' : 'module.exports'\n    code +=\n      '\\nif (module.hot) {\\n' +\n      '  module.hot.accept()\\n' +\n      '  if (module.hot.data) {\\n' +\n      '    require(\"' + hotReloadAPIPath + '\")' +\n      '      .rerender(\"' + options.id + '\", ' + exportsName + ')\\n' +\n      '  }\\n' +\n      '}'\n  }\n  // console.log(code,'🌞')\n  return code\n}\n...\n// vue-template-compiler/build.js \n\n```\n\n\n- vue-loader lib/loader.js中的getRawLoaderString来处理styles，并把moduleId传递进去，其中引入了styleCompilerPath执行了lib/style-compiler/index.js。\n```js\nconst styleCompilerPath = normalize.lib('style-compiler/index')\n\n...\n\nfunction getRawLoaderString (type, part, index, scoped) {\n    let lang = part.lang || defaultLang[type]\n    let styleCompiler = ''\n    if (type === 'styles') {\n      // style compiler that needs to be applied for all styles\n      styleCompiler =\n        styleCompilerPath +\n        '?' +\n        JSON.stringify({\n          // a marker for vue-style-loader to know that this is an import from a vue file\n          vue: true,\n          id: moduleId,\n          scoped: !!scoped,\n          hasInlineConfig: !!query.postcss\n        }) +\n        '!'\n      // normalize scss/sass/postcss if no specific loaders have been provided\n      if (!loaders[lang]) {\n        if (postcssExtensions.indexOf(lang) !== -1) {\n          lang = 'css'\n        } else if (lang === 'sass') {\n          lang = 'sass?indentedSyntax'\n        } else if (lang === 'scss') {\n          lang = 'sass'\n        }\n      }\n    }\n    let loader =\n      options.extractCSS && type === 'styles'\n        ? loaders[lang] || getCSSExtractLoader(lang)\n        : loaders[lang]\n    \n    const injectString =\n      type === 'script' && query.inject ? 'inject-loader!' : ''\n\n    if (loader != null) {\n      if (Array.isArray(loader)) {\n        loader = stringifyLoaders(loader)\n      } else if (typeof loader === 'object') {\n        loader = stringifyLoaders([loader])\n      }\n      if (type === 'styles') {\n        // add css modules\n        loader = addCssModulesToLoader(loader, part, index)\n        // inject rewriter before css loader for extractTextPlugin use cases\n        if (rewriterInjectRE.test(loader)) {\n          loader = loader.replace(\n            rewriterInjectRE,\n            (m, $1) => ensureBang($1) + styleCompiler\n          )\n        } else {\n          loader = ensureBang(loader) + styleCompiler\n        }\n      }\n      // if user defines custom loaders for html, add template compiler to it\n      if (type === 'template' && loader.indexOf(defaultLoaders.html) < 0) {\n        loader = defaultLoaders.html + '!' + loader\n      }\n      return injectString + ensureBang(loader)\n    } else {\n      // unknown lang, infer the loader to be used\n      switch (type) {\n        case 'template':\n          return (\n            defaultLoaders.html +\n            '!' +\n            templatePreprocessorPath +\n            '?engine=' +\n            lang +\n            '!'\n          )\n        case 'styles':\n          loader = addCssModulesToLoader(defaultLoaders.css, part, index)\n          return loader + '!' + styleCompiler + ensureBang(ensureLoader(lang))\n        case 'script':\n          return injectString + ensureBang(ensureLoader(lang))\n        default:\n          loader = loaders[type]\n          if (Array.isArray(loader)) {\n            loader = stringifyLoaders(loader)\n          }\n          return ensureBang(loader + buildCustomBlockLoaderString(part.attrs))\n      }\n    }\n  }\n```\n\n- vue-loader 中的lib/style-compiler/index.js引入处理scopeId的lib/style-compiler/plugins/scope-id.js，这里plugins.push(scopeId({ id: query.id }))把scope-id作为插件push到postcss(plugins)postcss的插件中。\n```js\nconst postcss = require('postcss')\nconst loaderUtils = require('loader-utils')\nconst loadPostcssConfig = require('./load-postcss-config')\nconst trim = require('./plugins/trim')\nconst scopeId = require('./plugins/scope-id')\nmodule.exports = function (css, map) {\n  this.cacheable()\n  const cb = this.async()\n  const query = loaderUtils.getOptions(this) || {}\n  let vueOptions = this.options.__vueOptions__\n  if (!vueOptions) {\n    if (query.hasInlineConfig) {\n      this.emitError(\n        `\\n  [vue-loader] It seems you are using HappyPack with inline postcss ` +\n          `options for vue-loader. This is not supported because loaders running ` +\n          `in different threads cannot share non-serializable options. ` +\n          `It is recommended to use a postcss config file instead.\\n` +\n          `\\n  See http://vue-loader.vuejs.org/en/features/postcss.html#using-a-config-file for more details.\\n`\n      )\n    }\n    vueOptions = Object.assign({}, this.options.vue, this.vue)\n  }\n  loadPostcssConfig(this, vueOptions.postcss)\n    .then(config => {\n      const plugins = config.plugins.concat(trim)\n      const options = Object.assign(\n        {\n          to: this.resourcePath,\n          from: this.resourcePath,\n          map: false\n        },\n        config.options\n      )\n      // add plugin for vue-loader scoped css rewrite\n      if (query.scoped) {\n        plugins.push(scopeId({ id: query.id }))\n      }\n      // source map\n      if (\n        this.sourceMap &&\n        !this.minimize &&\n        vueOptions.cssSourceMap !== false &&\n        process.env.NODE_ENV !== 'production' &&\n        !options.map\n      ) {\n        options.map = {\n          inline: false,\n          annotation: false,\n          prev: map\n        }\n      }\n      return postcss(plugins)\n        .process(css, options)\n        .then(result => {\n          if (result.messages) {\n            result.messages.forEach(({ type, file }) => {\n              if (type === 'dependency') {\n                this.addDependency(file)\n              }\n            })\n          }\n          const map = result.map && result.map.toJSON()\n          cb(null, result.css, map)\n          return null // silence bluebird warning\n        })\n    })\n    .catch(e => {\n      console.error(e)\n      cb(e)\n    })\n}\n```\n- vue-loader lib/style-compiler/plugins/scope-id.js中的postcss的插件，使用selector.insertAfter方法把id插入到生成虚拟节点上，并且从postcss-selector-parser引入selectorParser来解析样式的选择器。\n```js\nconst postcss = require('postcss')\nconst selectorParser = require('postcss-selector-parser')\n\nmodule.exports = postcss.plugin('add-id', ({ id }) => root => {\n  const keyframes = Object.create(null)\n  root.each(function rewriteSelector (node) {\n    if (!node.selector) {\n      // handle media queries\n      if (node.type === 'atrule') {\n        if (node.name === 'media' || node.name === 'supports') {\n          node.each(rewriteSelector)\n        } else if (/-?keyframes$/.test(node.name)) {\n          // register keyframes\n          keyframes[node.params] = node.params = node.params + '-' + id\n        }\n      }\n      return\n    }\n    node.selector = selectorParser(selectors => {\n      selectors.each(selector => {\n        let node = null\n        selector.each(n => {\n          // \">>>\" combinator\n          if (n.type === 'combinator' && n.value === '>>>') {\n            n.value = ' '\n            n.spaces.before = n.spaces.after = ''\n            return false\n          }\n          // /deep/ alias for >>>, since >>> doesn't work in SASS\n          if (n.type === 'tag' && n.value === '/deep/') {\n            const prev = n.prev()\n            if (prev && prev.type === 'combinator' && prev.value === ' ') {\n              prev.remove()\n            }\n            n.remove()\n            return false\n          }\n          if (n.type !== 'pseudo' && n.type !== 'combinator') {\n            node = n\n          }\n        })\n        selector.insertAfter(node, selectorParser.attribute({\n          attribute: id\n        }))\n        console.log(selector,'🍎')\n      })\n    }).process(node.selector).result\n  })\n\n  // If keyframes are found in this <style>, find and rewrite animation names\n  // in declarations.\n  // Caveat: this only works for keyframes and animation rules in the same\n  // <style> element.\n  if (Object.keys(keyframes).length) {\n    root.walkDecls(decl => {\n      // individual animation-name declaration\n      if (/-?animation-name$/.test(decl.prop)) {\n        decl.value = decl.value.split(',')\n          .map(v => keyframes[v.trim()] || v.trim())\n          .join(',')\n      }\n      // shorthand\n      if (/-?animation$/.test(decl.prop)) {\n        decl.value = decl.value.split(',')\n          .map(v => {\n            const vals = v.trim().split(/\\s+/)\n            const i = vals.findIndex(val => keyframes[val])\n            if (i !== -1) {\n              vals.splice(i, 1, keyframes[vals[i]])\n              return vals.join(' ')\n            } else {\n              return v\n            }\n          })\n          .join(',')\n      }\n    })\n  }\n})\n\n```\n![avatar](/img/moduleId2.webp)\n\n- postcss-selector-parser/dist/index.js中导出了./processor.js。\n```js\nvar _processor = require('./processor');\nvar _processor2 = _interopRequireDefault(_processor);\n...\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n...\nvar parser = function parser(processor) {\n    return new _processor2.default(processor);\n};\n...\nexports.default = parser;\nmodule.exports = exports['default'];\n```\n\n- postcss-selector-parser/dist/processor.js函数导出了一个立即执行函数返回了Processor对象，打印selectors可以看到此时的选择器已经被添加了属性选择器。\n```js\n'use strict';\nexports.__esModule = true;\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nvar _parser = require('./parser');\nvar _parser2 = _interopRequireDefault(_parser);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar Processor = function () {\n    function Processor(func) {\n        _classCallCheck(this, Processor);\n        this.func = func || function noop() {};\n        return this;\n    }\n    Processor.prototype.process = function process(selectors) {\n        console.log(selectors,'🌲')\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var input = new _parser2.default({\n            css: selectors,\n            error: function error(e) {\n                throw new Error(e);\n            },\n            options: options\n        });\n        this.res = input;\n        this.func(input);\n        return this;\n    };\n    _createClass(Processor, [{\n        key: 'result',\n        get: function get() {\n            return String(this.res);\n        }\n    }]);\n    return Processor;\n}();\nexports.default = Processor;\nmodule.exports = exports['default'];\n```\n![avatar](/img/moduleId3.webp)\n- 未完的疑问，当yarn dev 打包开发模式时在processor.js没有添加对应的属性选择器。","source":"_posts/vue-scoped-css.md","raw":"---\ntitle: vue scope css 的实现原理\ncover: /img/scopecss-z.webp\n---\n\n### vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\n- 从图片中可以看到在style标签中加上了scoped后，打包的出的css部分会加上对用的属性选择器以此来实现css的隔离防止命名冲突造成的样式问题。\n![avatar](/img/moduleId.webp)\n\n### 源码位置\n- vue-loader lib/loader.js中通过hash算法取文件路径或者文件路径加上传入的内容生成的哈希值作为moduleId。\n```js\n    ...\n    const rawRequest = getRawRequest(this, options.excludedPreLoaders)\n    const filePath = this.resourcePath\n    const fileName = path.basename(filePath)\n    const context =\n        (this._compiler && this._compiler.context) ||\n        this.options.context ||\n        process.cwd()\n    const sourceRoot = path.dirname(path.relative(context, filePath))\n    const shortFilePath = path.relative(context, filePath).replace(/^(\\.\\.[\\\\\\/])+/, '').replace(/\\\\/g, '/')\n    const moduleId = 'data-v-' + hash(isProduction ? (shortFilePath + '\\n' + content) : shortFilePath)\n    console.log(moduleId,'🌛')\n    // 模块Id 也是属性选择器 \n    ...\n```\n\n![avatar](/img/moduleId1.webp)\n\n- vue-loader lib/loader.js中的getRawLoaderString对于template的处理是用的defaultLoaders.html，const templateCompilerPath = normalize.lib('template-compiler/index')，和compile = compiler.compile以及compile(html, compilerOptions)表明template-compiler/index.js调用了vue-template-compiler/build.js的compile方法来处理template，查看template-compiler/index.js可以看到导出了一个loader函数接受到了从template中解析出的html，经过vue-template-compiler/build.js中的compile方法编译成ast树，再经过组装生成code，可以看到.render('data-v-xxx',esEports)传入了moduleId，在之后的loader处理生成html时会给每个组件的元素加上属性data-v-xxx。\n![avatar](/img/moduleId4.webp)\n![avatar](/img/moduleId5.webp)\n```js\n// vue-loader lib/loader.js\n...\nconst templateCompilerPath = normalize.lib('template-compiler/index')// 引入了template-compiler解析template\n...\nconst defaultLoaders = {\n    html: templateCompilerPath + templateCompilerOptions, \n    css: options.extractCSS\n      ? getCSSExtractLoader()\n      : styleLoaderPath + '!' + 'css-loader' + cssLoaderOptions,\n    js: hasBuble\n      ? 'buble-loader' + bubleOptions\n      : hasBabel ? 'babel-loader' : ''\n  }\n  ...\n  function getRawLoaderString (type, part, index, scoped) {\n      ...\n      // if user defines custom loaders for html, add template compiler to it\n      if (type === 'template' && loader.indexOf(defaultLoaders.html) < 0) {\n        loader = defaultLoaders.html + '!' + loader\n      }\n      if(type === 'template'){\n        // console.log(loader,'🐟')\n      }\n      return injectString + ensureBang(loader)\n    } else {\n      // unknown lang, infer the loader to be used\n      switch (type) {\n        case 'template':\n          return (\n            defaultLoaders.html +\n            '!' +\n            templatePreprocessorPath +\n            '?engine=' +\n            lang +\n            '!'\n          )\n        case 'styles':\n          loader = addCssModulesToLoader(defaultLoaders.css, part, index)\n          return loader + '!' + styleCompiler + ensureBang(ensureLoader(lang))\n        case 'script':\n          return injectString + ensureBang(ensureLoader(lang))\n        default:\n          loader = loaders[type]\n          if (Array.isArray(loader)) {\n            loader = stringifyLoaders(loader)\n          }\n          return ensureBang(loader + buildCustomBlockLoaderString(part.attrs))\n      }\n    }\n  }\n...\n// template-compiler/index.js\nconst prettier = require('prettier')\nconst loaderUtils = require('loader-utils')\nconst normalize = require('../utils/normalize')\nconst compiler = require('vue-template-compiler')\nconst transpile = require('vue-template-es2015-compiler')\nconst hotReloadAPIPath = normalize.dep('vue-hot-reload-api')\nconst transformRequire = require('./modules/transform-require')\nconst transformSrcset = require('./modules/transform-srcset')\n\nmodule.exports = function (html) {\n  // console.log(html,'👀')\n  this.cacheable()\n  const isServer = this.target === 'node'\n  const isProduction = this.minimize || process.env.NODE_ENV === 'production'\n  const vueOptions = this.options.__vueOptions__ || {}\n  const options = loaderUtils.getOptions(this) || {}\n  const needsHotReload = !isServer && !isProduction && vueOptions.hotReload !== false\n  const defaultModules = [transformRequire(options.transformToRequire), transformSrcset()]\n  let userModules = vueOptions.compilerModules || options.compilerModules\n  // for HappyPack cross-process use cases\n  if (typeof userModules === 'string') {\n    userModules = require(userModules)\n  }\n  const compilerOptions = {\n    preserveWhitespace: options.preserveWhitespace,\n    modules: defaultModules.concat(userModules || []),\n    directives:\n      vueOptions.compilerDirectives || options.compilerDirectives || {},\n    scopeId: options.hasScoped ? options.id : null,\n    comments: options.hasComment\n  }\n\n  // vue-template-compiler 编译成ast  此处的compiler不是webpack的compiler模块是vue-template-compiler模块\n  const compile =\n    isServer && compiler.ssrCompile && vueOptions.optimizeSSR !== false\n      ? compiler.ssrCompile\n      : compiler.compile\n\n  const compiled = compile(html, compilerOptions)\n  // console.log(compiled,'🌟')\n  // tips\n  if (compiled.tips && compiled.tips.length) {\n    compiled.tips.forEach(tip => {\n      this.emitWarning(tip)\n    })\n  }\n  let code\n  if (compiled.errors && compiled.errors.length) {\n    this.emitError(\n      `\\n  Error compiling template:\\n${pad(html)}\\n` +\n        compiled.errors.map(e => `  - ${e}`).join('\\n') +\n        '\\n'\n    )\n    code = vueOptions.esModule\n      ? `var esExports = {render:function(){},staticRenderFns: []}\\nexport default esExports`\n      : 'module.exports={render:function(){},staticRenderFns:[]}'\n  } else {\n    const bubleOptions = options.buble\n    const stripWith = bubleOptions.transforms.stripWith !== false\n    const stripWithFunctional = bubleOptions.transforms.stripWithFunctional\n    const staticRenderFns = compiled.staticRenderFns.map(fn =>\n      toFunction(fn, stripWithFunctional)\n    )\n    // 组装ast生成render函数\n    code =\n      transpile(\n        'var render = ' +\n          toFunction(compiled.render, stripWithFunctional) +\n          '\\n' +\n          'var staticRenderFns = [' +\n          staticRenderFns.join(',') +\n          ']',\n        bubleOptions\n      ) + '\\n'\n    // prettify render fn\n    if (!isProduction) {\n      code = prettier.format(code, { semi: false, parser: 'babylon' })\n    }\n    // mark with stripped (this enables Vue to use correct runtime proxy detection)\n    if (!isProduction && stripWith) {\n      code += `render._withStripped = true\\n`\n    }\n    const exports = `{ render: render, staticRenderFns: staticRenderFns }`\n    code += vueOptions.esModule\n      ? `var esExports = ${exports}\\nexport default esExports`\n      : `module.exports = ${exports}`\n  }\n  // hot-reload\n  if (needsHotReload) {\n    const exportsName = vueOptions.esModule ? 'esExports' : 'module.exports'\n    code +=\n      '\\nif (module.hot) {\\n' +\n      '  module.hot.accept()\\n' +\n      '  if (module.hot.data) {\\n' +\n      '    require(\"' + hotReloadAPIPath + '\")' +\n      '      .rerender(\"' + options.id + '\", ' + exportsName + ')\\n' +\n      '  }\\n' +\n      '}'\n  }\n  // console.log(code,'🌞')\n  return code\n}\n...\n// vue-template-compiler/build.js \n\n```\n\n\n- vue-loader lib/loader.js中的getRawLoaderString来处理styles，并把moduleId传递进去，其中引入了styleCompilerPath执行了lib/style-compiler/index.js。\n```js\nconst styleCompilerPath = normalize.lib('style-compiler/index')\n\n...\n\nfunction getRawLoaderString (type, part, index, scoped) {\n    let lang = part.lang || defaultLang[type]\n    let styleCompiler = ''\n    if (type === 'styles') {\n      // style compiler that needs to be applied for all styles\n      styleCompiler =\n        styleCompilerPath +\n        '?' +\n        JSON.stringify({\n          // a marker for vue-style-loader to know that this is an import from a vue file\n          vue: true,\n          id: moduleId,\n          scoped: !!scoped,\n          hasInlineConfig: !!query.postcss\n        }) +\n        '!'\n      // normalize scss/sass/postcss if no specific loaders have been provided\n      if (!loaders[lang]) {\n        if (postcssExtensions.indexOf(lang) !== -1) {\n          lang = 'css'\n        } else if (lang === 'sass') {\n          lang = 'sass?indentedSyntax'\n        } else if (lang === 'scss') {\n          lang = 'sass'\n        }\n      }\n    }\n    let loader =\n      options.extractCSS && type === 'styles'\n        ? loaders[lang] || getCSSExtractLoader(lang)\n        : loaders[lang]\n    \n    const injectString =\n      type === 'script' && query.inject ? 'inject-loader!' : ''\n\n    if (loader != null) {\n      if (Array.isArray(loader)) {\n        loader = stringifyLoaders(loader)\n      } else if (typeof loader === 'object') {\n        loader = stringifyLoaders([loader])\n      }\n      if (type === 'styles') {\n        // add css modules\n        loader = addCssModulesToLoader(loader, part, index)\n        // inject rewriter before css loader for extractTextPlugin use cases\n        if (rewriterInjectRE.test(loader)) {\n          loader = loader.replace(\n            rewriterInjectRE,\n            (m, $1) => ensureBang($1) + styleCompiler\n          )\n        } else {\n          loader = ensureBang(loader) + styleCompiler\n        }\n      }\n      // if user defines custom loaders for html, add template compiler to it\n      if (type === 'template' && loader.indexOf(defaultLoaders.html) < 0) {\n        loader = defaultLoaders.html + '!' + loader\n      }\n      return injectString + ensureBang(loader)\n    } else {\n      // unknown lang, infer the loader to be used\n      switch (type) {\n        case 'template':\n          return (\n            defaultLoaders.html +\n            '!' +\n            templatePreprocessorPath +\n            '?engine=' +\n            lang +\n            '!'\n          )\n        case 'styles':\n          loader = addCssModulesToLoader(defaultLoaders.css, part, index)\n          return loader + '!' + styleCompiler + ensureBang(ensureLoader(lang))\n        case 'script':\n          return injectString + ensureBang(ensureLoader(lang))\n        default:\n          loader = loaders[type]\n          if (Array.isArray(loader)) {\n            loader = stringifyLoaders(loader)\n          }\n          return ensureBang(loader + buildCustomBlockLoaderString(part.attrs))\n      }\n    }\n  }\n```\n\n- vue-loader 中的lib/style-compiler/index.js引入处理scopeId的lib/style-compiler/plugins/scope-id.js，这里plugins.push(scopeId({ id: query.id }))把scope-id作为插件push到postcss(plugins)postcss的插件中。\n```js\nconst postcss = require('postcss')\nconst loaderUtils = require('loader-utils')\nconst loadPostcssConfig = require('./load-postcss-config')\nconst trim = require('./plugins/trim')\nconst scopeId = require('./plugins/scope-id')\nmodule.exports = function (css, map) {\n  this.cacheable()\n  const cb = this.async()\n  const query = loaderUtils.getOptions(this) || {}\n  let vueOptions = this.options.__vueOptions__\n  if (!vueOptions) {\n    if (query.hasInlineConfig) {\n      this.emitError(\n        `\\n  [vue-loader] It seems you are using HappyPack with inline postcss ` +\n          `options for vue-loader. This is not supported because loaders running ` +\n          `in different threads cannot share non-serializable options. ` +\n          `It is recommended to use a postcss config file instead.\\n` +\n          `\\n  See http://vue-loader.vuejs.org/en/features/postcss.html#using-a-config-file for more details.\\n`\n      )\n    }\n    vueOptions = Object.assign({}, this.options.vue, this.vue)\n  }\n  loadPostcssConfig(this, vueOptions.postcss)\n    .then(config => {\n      const plugins = config.plugins.concat(trim)\n      const options = Object.assign(\n        {\n          to: this.resourcePath,\n          from: this.resourcePath,\n          map: false\n        },\n        config.options\n      )\n      // add plugin for vue-loader scoped css rewrite\n      if (query.scoped) {\n        plugins.push(scopeId({ id: query.id }))\n      }\n      // source map\n      if (\n        this.sourceMap &&\n        !this.minimize &&\n        vueOptions.cssSourceMap !== false &&\n        process.env.NODE_ENV !== 'production' &&\n        !options.map\n      ) {\n        options.map = {\n          inline: false,\n          annotation: false,\n          prev: map\n        }\n      }\n      return postcss(plugins)\n        .process(css, options)\n        .then(result => {\n          if (result.messages) {\n            result.messages.forEach(({ type, file }) => {\n              if (type === 'dependency') {\n                this.addDependency(file)\n              }\n            })\n          }\n          const map = result.map && result.map.toJSON()\n          cb(null, result.css, map)\n          return null // silence bluebird warning\n        })\n    })\n    .catch(e => {\n      console.error(e)\n      cb(e)\n    })\n}\n```\n- vue-loader lib/style-compiler/plugins/scope-id.js中的postcss的插件，使用selector.insertAfter方法把id插入到生成虚拟节点上，并且从postcss-selector-parser引入selectorParser来解析样式的选择器。\n```js\nconst postcss = require('postcss')\nconst selectorParser = require('postcss-selector-parser')\n\nmodule.exports = postcss.plugin('add-id', ({ id }) => root => {\n  const keyframes = Object.create(null)\n  root.each(function rewriteSelector (node) {\n    if (!node.selector) {\n      // handle media queries\n      if (node.type === 'atrule') {\n        if (node.name === 'media' || node.name === 'supports') {\n          node.each(rewriteSelector)\n        } else if (/-?keyframes$/.test(node.name)) {\n          // register keyframes\n          keyframes[node.params] = node.params = node.params + '-' + id\n        }\n      }\n      return\n    }\n    node.selector = selectorParser(selectors => {\n      selectors.each(selector => {\n        let node = null\n        selector.each(n => {\n          // \">>>\" combinator\n          if (n.type === 'combinator' && n.value === '>>>') {\n            n.value = ' '\n            n.spaces.before = n.spaces.after = ''\n            return false\n          }\n          // /deep/ alias for >>>, since >>> doesn't work in SASS\n          if (n.type === 'tag' && n.value === '/deep/') {\n            const prev = n.prev()\n            if (prev && prev.type === 'combinator' && prev.value === ' ') {\n              prev.remove()\n            }\n            n.remove()\n            return false\n          }\n          if (n.type !== 'pseudo' && n.type !== 'combinator') {\n            node = n\n          }\n        })\n        selector.insertAfter(node, selectorParser.attribute({\n          attribute: id\n        }))\n        console.log(selector,'🍎')\n      })\n    }).process(node.selector).result\n  })\n\n  // If keyframes are found in this <style>, find and rewrite animation names\n  // in declarations.\n  // Caveat: this only works for keyframes and animation rules in the same\n  // <style> element.\n  if (Object.keys(keyframes).length) {\n    root.walkDecls(decl => {\n      // individual animation-name declaration\n      if (/-?animation-name$/.test(decl.prop)) {\n        decl.value = decl.value.split(',')\n          .map(v => keyframes[v.trim()] || v.trim())\n          .join(',')\n      }\n      // shorthand\n      if (/-?animation$/.test(decl.prop)) {\n        decl.value = decl.value.split(',')\n          .map(v => {\n            const vals = v.trim().split(/\\s+/)\n            const i = vals.findIndex(val => keyframes[val])\n            if (i !== -1) {\n              vals.splice(i, 1, keyframes[vals[i]])\n              return vals.join(' ')\n            } else {\n              return v\n            }\n          })\n          .join(',')\n      }\n    })\n  }\n})\n\n```\n![avatar](/img/moduleId2.webp)\n\n- postcss-selector-parser/dist/index.js中导出了./processor.js。\n```js\nvar _processor = require('./processor');\nvar _processor2 = _interopRequireDefault(_processor);\n...\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n...\nvar parser = function parser(processor) {\n    return new _processor2.default(processor);\n};\n...\nexports.default = parser;\nmodule.exports = exports['default'];\n```\n\n- postcss-selector-parser/dist/processor.js函数导出了一个立即执行函数返回了Processor对象，打印selectors可以看到此时的选择器已经被添加了属性选择器。\n```js\n'use strict';\nexports.__esModule = true;\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nvar _parser = require('./parser');\nvar _parser2 = _interopRequireDefault(_parser);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar Processor = function () {\n    function Processor(func) {\n        _classCallCheck(this, Processor);\n        this.func = func || function noop() {};\n        return this;\n    }\n    Processor.prototype.process = function process(selectors) {\n        console.log(selectors,'🌲')\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var input = new _parser2.default({\n            css: selectors,\n            error: function error(e) {\n                throw new Error(e);\n            },\n            options: options\n        });\n        this.res = input;\n        this.func(input);\n        return this;\n    };\n    _createClass(Processor, [{\n        key: 'result',\n        get: function get() {\n            return String(this.res);\n        }\n    }]);\n    return Processor;\n}();\nexports.default = Processor;\nmodule.exports = exports['default'];\n```\n![avatar](/img/moduleId3.webp)\n- 未完的疑问，当yarn dev 打包开发模式时在processor.js没有添加对应的属性选择器。","slug":"vue-scoped-css","published":1,"date":"2021-08-25T01:50:28.085Z","updated":"2021-08-27T01:45:08.556Z","comments":1,"layout":"post","photos":[],"_id":"cm0lup40f000j42u7hb1199ri","content":"<h3 id=\"vue模块Id-每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\"><a href=\"#vue模块Id-每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\" class=\"headerlink\" title=\"vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\"></a>vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性</h3><ul>\n<li>从图片中可以看到在style标签中加上了scoped后，打包的出的css部分会加上对用的属性选择器以此来实现css的隔离防止命名冲突造成的样式问题。<br><img src=\"/img/moduleId.webp\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"源码位置\"><a href=\"#源码位置\" class=\"headerlink\" title=\"源码位置\"></a>源码位置</h3><ul>\n<li>vue-loader lib&#x2F;loader.js中通过hash算法取文件路径或者文件路径加上传入的内容生成的哈希值作为moduleId。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> rawRequest = <span class=\"title function_\">getRawRequest</span>(<span class=\"variable language_\">this</span>, options.<span class=\"property\">excludedPreLoaders</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> filePath = <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = path.<span class=\"title function_\">basename</span>(filePath)</span><br><span class=\"line\"><span class=\"keyword\">const</span> context =</span><br><span class=\"line\">    (<span class=\"variable language_\">this</span>.<span class=\"property\">_compiler</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_compiler</span>.<span class=\"property\">context</span>) ||</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">context</span> ||</span><br><span class=\"line\">    process.<span class=\"title function_\">cwd</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceRoot = path.<span class=\"title function_\">dirname</span>(path.<span class=\"title function_\">relative</span>(context, filePath))</span><br><span class=\"line\"><span class=\"keyword\">const</span> shortFilePath = path.<span class=\"title function_\">relative</span>(context, filePath).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^(\\.\\.[\\\\\\/])+/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleId = <span class=\"string\">&#x27;data-v-&#x27;</span> + <span class=\"title function_\">hash</span>(isProduction ? (shortFilePath + <span class=\"string\">&#x27;\\n&#x27;</span> + content) : shortFilePath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(moduleId,<span class=\"string\">&#x27;🌛&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 模块Id 也是属性选择器 </span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/img/moduleId1.webp\" alt=\"avatar\"></p>\n<ul>\n<li><p>vue-loader lib&#x2F;loader.js中的getRawLoaderString对于template的处理是用的defaultLoaders.html，const templateCompilerPath &#x3D; normalize.lib(‘template-compiler&#x2F;index’)，和compile &#x3D; compiler.compile以及compile(html, compilerOptions)表明template-compiler&#x2F;index.js调用了vue-template-compiler&#x2F;build.js的compile方法来处理template，查看template-compiler&#x2F;index.js可以看到导出了一个loader函数接受到了从template中解析出的html，经过vue-template-compiler&#x2F;build.js中的compile方法编译成ast树，再经过组装生成code，可以看到.render(‘data-v-xxx’,esEports)传入了moduleId，在之后的loader处理生成html时会给每个组件的元素加上属性data-v-xxx。<br><img src=\"/img/moduleId4.webp\" alt=\"avatar\"><br><img src=\"/img/moduleId5.webp\" alt=\"avatar\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue-loader lib/loader.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> templateCompilerPath = normalize.<span class=\"title function_\">lib</span>(<span class=\"string\">&#x27;template-compiler/index&#x27;</span>)<span class=\"comment\">// 引入了template-compiler解析template</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultLoaders = &#123;</span><br><span class=\"line\">    <span class=\"attr\">html</span>: templateCompilerPath + templateCompilerOptions, </span><br><span class=\"line\">    <span class=\"attr\">css</span>: options.<span class=\"property\">extractCSS</span></span><br><span class=\"line\">      ? <span class=\"title function_\">getCSSExtractLoader</span>()</span><br><span class=\"line\">      : styleLoaderPath + <span class=\"string\">&#x27;!&#x27;</span> + <span class=\"string\">&#x27;css-loader&#x27;</span> + cssLoaderOptions,</span><br><span class=\"line\">    <span class=\"attr\">js</span>: hasBuble</span><br><span class=\"line\">      ? <span class=\"string\">&#x27;buble-loader&#x27;</span> + bubleOptions</span><br><span class=\"line\">      : hasBabel ? <span class=\"string\">&#x27;babel-loader&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getRawLoaderString</span> (type, part, index, scoped) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"comment\">// if user defines custom loaders for html, add template compiler to it</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;template&#x27;</span> &amp;&amp; loader.<span class=\"title function_\">indexOf</span>(defaultLoaders.<span class=\"property\">html</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        loader = defaultLoaders.<span class=\"property\">html</span> + <span class=\"string\">&#x27;!&#x27;</span> + loader</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(type === <span class=\"string\">&#x27;template&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(loader,&#x27;🐟&#x27;)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(loader)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// unknown lang, infer the loader to be used</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;template&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            defaultLoaders.<span class=\"property\">html</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span> +</span><br><span class=\"line\">            templatePreprocessorPath +</span><br><span class=\"line\">            <span class=\"string\">&#x27;?engine=&#x27;</span> +</span><br><span class=\"line\">            lang +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;styles&#x27;</span>:</span><br><span class=\"line\">          loader = <span class=\"title function_\">addCssModulesToLoader</span>(defaultLoaders.<span class=\"property\">css</span>, part, index)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> loader + <span class=\"string\">&#x27;!&#x27;</span> + styleCompiler + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;script&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">          loader = loaders[type]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">            loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">ensureBang</span>(loader + <span class=\"title function_\">buildCustomBlockLoaderString</span>(part.<span class=\"property\">attrs</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// template-compiler/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> prettier = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;prettier&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> normalize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../utils/normalize&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transpile = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-es2015-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> hotReloadAPIPath = normalize.<span class=\"title function_\">dep</span>(<span class=\"string\">&#x27;vue-hot-reload-api&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformRequire = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./modules/transform-require&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformSrcset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./modules/transform-srcset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(html,&#x27;👀&#x27;)</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheable</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isServer = <span class=\"variable language_\">this</span>.<span class=\"property\">target</span> === <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isProduction = <span class=\"variable language_\">this</span>.<span class=\"property\">minimize</span> || process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vueOptions = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">__vueOptions__</span> || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>) || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> needsHotReload = !isServer &amp;&amp; !isProduction &amp;&amp; vueOptions.<span class=\"property\">hotReload</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModules = [<span class=\"title function_\">transformRequire</span>(options.<span class=\"property\">transformToRequire</span>), <span class=\"title function_\">transformSrcset</span>()]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userModules = vueOptions.<span class=\"property\">compilerModules</span> || options.<span class=\"property\">compilerModules</span></span><br><span class=\"line\">  <span class=\"comment\">// for HappyPack cross-process use cases</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userModules === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    userModules = <span class=\"built_in\">require</span>(userModules)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> compilerOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">preserveWhitespace</span>: options.<span class=\"property\">preserveWhitespace</span>,</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: defaultModules.<span class=\"title function_\">concat</span>(userModules || []),</span><br><span class=\"line\">    <span class=\"attr\">directives</span>:</span><br><span class=\"line\">      vueOptions.<span class=\"property\">compilerDirectives</span> || options.<span class=\"property\">compilerDirectives</span> || &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">scopeId</span>: options.<span class=\"property\">hasScoped</span> ? options.<span class=\"property\">id</span> : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">comments</span>: options.<span class=\"property\">hasComment</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// vue-template-compiler 编译成ast  此处的compiler不是webpack的compiler模块是vue-template-compiler模块</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compile =</span><br><span class=\"line\">    isServer &amp;&amp; compiler.<span class=\"property\">ssrCompile</span> &amp;&amp; vueOptions.<span class=\"property\">optimizeSSR</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">      ? compiler.<span class=\"property\">ssrCompile</span></span><br><span class=\"line\">      : compiler.<span class=\"property\">compile</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compiled = <span class=\"title function_\">compile</span>(html, compilerOptions)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(compiled,&#x27;🌟&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// tips</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (compiled.<span class=\"property\">tips</span> &amp;&amp; compiled.<span class=\"property\">tips</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    compiled.<span class=\"property\">tips</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">tip</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitWarning</span>(tip)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> code</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (compiled.<span class=\"property\">errors</span> &amp;&amp; compiled.<span class=\"property\">errors</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitError</span>(</span><br><span class=\"line\">      <span class=\"string\">`\\n  Error compiling template:\\n<span class=\"subst\">$&#123;pad(html)&#125;</span>\\n`</span> +</span><br><span class=\"line\">        compiled.<span class=\"property\">errors</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"string\">`  - <span class=\"subst\">$&#123;e&#125;</span>`</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>) +</span><br><span class=\"line\">        <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    code = vueOptions.<span class=\"property\">esModule</span></span><br><span class=\"line\">      ? <span class=\"string\">`var esExports = &#123;render:function()&#123;&#125;,staticRenderFns: []&#125;\\nexport default esExports`</span></span><br><span class=\"line\">      : <span class=\"string\">&#x27;module.exports=&#123;render:function()&#123;&#125;,staticRenderFns:[]&#125;&#x27;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bubleOptions = options.<span class=\"property\">buble</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stripWith = bubleOptions.<span class=\"property\">transforms</span>.<span class=\"property\">stripWith</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stripWithFunctional = bubleOptions.<span class=\"property\">transforms</span>.<span class=\"property\">stripWithFunctional</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticRenderFns = compiled.<span class=\"property\">staticRenderFns</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">toFunction</span>(fn, stripWithFunctional)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\">// 组装ast生成render函数</span></span><br><span class=\"line\">    code =</span><br><span class=\"line\">      <span class=\"title function_\">transpile</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;var render = &#x27;</span> +</span><br><span class=\"line\">          <span class=\"title function_\">toFunction</span>(compiled.<span class=\"property\">render</span>, stripWithFunctional) +</span><br><span class=\"line\">          <span class=\"string\">&#x27;\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;var staticRenderFns = [&#x27;</span> +</span><br><span class=\"line\">          staticRenderFns.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) +</span><br><span class=\"line\">          <span class=\"string\">&#x27;]&#x27;</span>,</span><br><span class=\"line\">        bubleOptions</span><br><span class=\"line\">      ) + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// prettify render fn</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProduction) &#123;</span><br><span class=\"line\">      code = prettier.<span class=\"title function_\">format</span>(code, &#123; <span class=\"attr\">semi</span>: <span class=\"literal\">false</span>, <span class=\"attr\">parser</span>: <span class=\"string\">&#x27;babylon&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark with stripped (this enables Vue to use correct runtime proxy detection)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProduction &amp;&amp; stripWith) &#123;</span><br><span class=\"line\">      code += <span class=\"string\">`render._withStripped = true\\n`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">exports</span> = <span class=\"string\">`&#123; render: render, staticRenderFns: staticRenderFns &#125;`</span></span><br><span class=\"line\">    code += vueOptions.<span class=\"property\">esModule</span></span><br><span class=\"line\">      ? <span class=\"string\">`var esExports = <span class=\"subst\">$&#123;<span class=\"built_in\">exports</span>&#125;</span>\\nexport default esExports`</span></span><br><span class=\"line\">      : <span class=\"string\">`module.exports = <span class=\"subst\">$&#123;<span class=\"built_in\">exports</span>&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// hot-reload</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (needsHotReload) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exportsName = vueOptions.<span class=\"property\">esModule</span> ? <span class=\"string\">&#x27;esExports&#x27;</span> : <span class=\"string\">&#x27;module.exports&#x27;</span></span><br><span class=\"line\">    code +=</span><br><span class=\"line\">      <span class=\"string\">&#x27;\\nif (module.hot) &#123;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  module.hot.accept()\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  if (module.hot.data) &#123;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;    require(&quot;&#x27;</span> + hotReloadAPIPath + <span class=\"string\">&#x27;&quot;)&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;      .rerender(&quot;&#x27;</span> + options.<span class=\"property\">id</span> + <span class=\"string\">&#x27;&quot;, &#x27;</span> + exportsName + <span class=\"string\">&#x27;)\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  &#125;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;&#125;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(code,&#x27;🌞&#x27;)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// vue-template-compiler/build.js </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>vue-loader lib&#x2F;loader.js中的getRawLoaderString来处理styles，并把moduleId传递进去，其中引入了styleCompilerPath执行了lib&#x2F;style-compiler&#x2F;index.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleCompilerPath = normalize.<span class=\"title function_\">lib</span>(<span class=\"string\">&#x27;style-compiler/index&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRawLoaderString</span> (type, part, index, scoped) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lang = part.<span class=\"property\">lang</span> || defaultLang[type]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> styleCompiler = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;styles&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// style compiler that needs to be applied for all styles</span></span><br><span class=\"line\">      styleCompiler =</span><br><span class=\"line\">        styleCompilerPath +</span><br><span class=\"line\">        <span class=\"string\">&#x27;?&#x27;</span> +</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// a marker for vue-style-loader to know that this is an import from a vue file</span></span><br><span class=\"line\">          <span class=\"attr\">vue</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">id</span>: moduleId,</span><br><span class=\"line\">          <span class=\"attr\">scoped</span>: !!scoped,</span><br><span class=\"line\">          <span class=\"attr\">hasInlineConfig</span>: !!query.<span class=\"property\">postcss</span></span><br><span class=\"line\">        &#125;) +</span><br><span class=\"line\">        <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// normalize scss/sass/postcss if no specific loaders have been provided</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!loaders[lang]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postcssExtensions.<span class=\"title function_\">indexOf</span>(lang) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;css&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lang === <span class=\"string\">&#x27;sass&#x27;</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;sass?indentedSyntax&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lang === <span class=\"string\">&#x27;scss&#x27;</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;sass&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> loader =</span><br><span class=\"line\">      options.<span class=\"property\">extractCSS</span> &amp;&amp; type === <span class=\"string\">&#x27;styles&#x27;</span></span><br><span class=\"line\">        ? loaders[lang] || <span class=\"title function_\">getCSSExtractLoader</span>(lang)</span><br><span class=\"line\">        : loaders[lang]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> injectString =</span><br><span class=\"line\">      type === <span class=\"string\">&#x27;script&#x27;</span> &amp;&amp; query.<span class=\"property\">inject</span> ? <span class=\"string\">&#x27;inject-loader!&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">        loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> loader === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        loader = <span class=\"title function_\">stringifyLoaders</span>([loader])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;styles&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// add css modules</span></span><br><span class=\"line\">        loader = <span class=\"title function_\">addCssModulesToLoader</span>(loader, part, index)</span><br><span class=\"line\">        <span class=\"comment\">// inject rewriter before css loader for extractTextPlugin use cases</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rewriterInjectRE.<span class=\"title function_\">test</span>(loader)) &#123;</span><br><span class=\"line\">          loader = loader.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">            rewriterInjectRE,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">m, $1</span>) =&gt;</span> <span class=\"title function_\">ensureBang</span>($1) + styleCompiler</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          loader = <span class=\"title function_\">ensureBang</span>(loader) + styleCompiler</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// if user defines custom loaders for html, add template compiler to it</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;template&#x27;</span> &amp;&amp; loader.<span class=\"title function_\">indexOf</span>(defaultLoaders.<span class=\"property\">html</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        loader = defaultLoaders.<span class=\"property\">html</span> + <span class=\"string\">&#x27;!&#x27;</span> + loader</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(loader)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// unknown lang, infer the loader to be used</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;template&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            defaultLoaders.<span class=\"property\">html</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span> +</span><br><span class=\"line\">            templatePreprocessorPath +</span><br><span class=\"line\">            <span class=\"string\">&#x27;?engine=&#x27;</span> +</span><br><span class=\"line\">            lang +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;styles&#x27;</span>:</span><br><span class=\"line\">          loader = <span class=\"title function_\">addCssModulesToLoader</span>(defaultLoaders.<span class=\"property\">css</span>, part, index)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> loader + <span class=\"string\">&#x27;!&#x27;</span> + styleCompiler + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;script&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">          loader = loaders[type]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">            loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">ensureBang</span>(loader + <span class=\"title function_\">buildCustomBlockLoaderString</span>(part.<span class=\"property\">attrs</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vue-loader 中的lib&#x2F;style-compiler&#x2F;index.js引入处理scopeId的lib&#x2F;style-compiler&#x2F;plugins&#x2F;scope-id.js，这里plugins.push(scopeId({ id: query.id }))把scope-id作为插件push到postcss(plugins)postcss的插件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loadPostcssConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./load-postcss-config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> trim = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/trim&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> scopeId = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/scope-id&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">css, map</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheable</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cb = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>) || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vueOptions = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">__vueOptions__</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vueOptions) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (query.<span class=\"property\">hasInlineConfig</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitError</span>(</span><br><span class=\"line\">        <span class=\"string\">`\\n  [vue-loader] It seems you are using HappyPack with inline postcss `</span> +</span><br><span class=\"line\">          <span class=\"string\">`options for vue-loader. This is not supported because loaders running `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in different threads cannot share non-serializable options. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`It is recommended to use a postcss config file instead.\\n`</span> +</span><br><span class=\"line\">          <span class=\"string\">`\\n  See http://vue-loader.vuejs.org/en/features/postcss.html#using-a-config-file for more details.\\n`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vueOptions = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">vue</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">vue</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">loadPostcssConfig</span>(<span class=\"variable language_\">this</span>, vueOptions.<span class=\"property\">postcss</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> plugins = config.<span class=\"property\">plugins</span>.<span class=\"title function_\">concat</span>(trim)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">to</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span>,</span><br><span class=\"line\">          <span class=\"attr\">from</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span>,</span><br><span class=\"line\">          <span class=\"attr\">map</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        config.<span class=\"property\">options</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"comment\">// add plugin for vue-loader scoped css rewrite</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (query.<span class=\"property\">scoped</span>) &#123;</span><br><span class=\"line\">        plugins.<span class=\"title function_\">push</span>(<span class=\"title function_\">scopeId</span>(&#123; <span class=\"attr\">id</span>: query.<span class=\"property\">id</span> &#125;))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// source map</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sourceMap</span> &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable language_\">this</span>.<span class=\"property\">minimize</span> &amp;&amp;</span><br><span class=\"line\">        vueOptions.<span class=\"property\">cssSourceMap</span> !== <span class=\"literal\">false</span> &amp;&amp;</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        !options.<span class=\"property\">map</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        options.<span class=\"property\">map</span> = &#123;</span><br><span class=\"line\">          <span class=\"attr\">inline</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">annotation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">prev</span>: map</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">postcss</span>(plugins)</span><br><span class=\"line\">        .<span class=\"title function_\">process</span>(css, options)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result.<span class=\"property\">messages</span>) &#123;</span><br><span class=\"line\">            result.<span class=\"property\">messages</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">&#123; type, file &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;dependency&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">addDependency</span>(file)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> map = result.<span class=\"property\">map</span> &amp;&amp; result.<span class=\"property\">map</span>.<span class=\"title function_\">toJSON</span>()</span><br><span class=\"line\">          <span class=\"title function_\">cb</span>(<span class=\"literal\">null</span>, result.<span class=\"property\">css</span>, map)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// silence bluebird warning</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e)</span><br><span class=\"line\">      <span class=\"title function_\">cb</span>(e)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>vue-loader lib&#x2F;style-compiler&#x2F;plugins&#x2F;scope-id.js中的postcss的插件，使用selector.insertAfter方法把id插入到生成虚拟节点上，并且从postcss-selector-parser引入selectorParser来解析样式的选择器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectorParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-selector-parser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = postcss.<span class=\"title function_\">plugin</span>(<span class=\"string\">&#x27;add-id&#x27;</span>, <span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyframes = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  root.<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">rewriteSelector</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">selector</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle media queries</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">type</span> === <span class=\"string\">&#x27;atrule&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">name</span> === <span class=\"string\">&#x27;media&#x27;</span> || node.<span class=\"property\">name</span> === <span class=\"string\">&#x27;supports&#x27;</span>) &#123;</span><br><span class=\"line\">          node.<span class=\"title function_\">each</span>(rewriteSelector)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?keyframes$/</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">name</span>)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// register keyframes</span></span><br><span class=\"line\">          keyframes[node.<span class=\"property\">params</span>] = node.<span class=\"property\">params</span> = node.<span class=\"property\">params</span> + <span class=\"string\">&#x27;-&#x27;</span> + id</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.<span class=\"property\">selector</span> = <span class=\"title function_\">selectorParser</span>(<span class=\"function\"><span class=\"params\">selectors</span> =&gt;</span> &#123;</span><br><span class=\"line\">      selectors.<span class=\"title function_\">each</span>(<span class=\"function\"><span class=\"params\">selector</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"literal\">null</span></span><br><span class=\"line\">        selector.<span class=\"title function_\">each</span>(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// &quot;&gt;&gt;&gt;&quot; combinator</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> === <span class=\"string\">&#x27;combinator&#x27;</span> &amp;&amp; n.<span class=\"property\">value</span> === <span class=\"string\">&#x27;&gt;&gt;&gt;&#x27;</span>) &#123;</span><br><span class=\"line\">            n.<span class=\"property\">value</span> = <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">            n.<span class=\"property\">spaces</span>.<span class=\"property\">before</span> = n.<span class=\"property\">spaces</span>.<span class=\"property\">after</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// /deep/ alias for &gt;&gt;&gt;, since &gt;&gt;&gt; doesn&#x27;t work in SASS</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> === <span class=\"string\">&#x27;tag&#x27;</span> &amp;&amp; n.<span class=\"property\">value</span> === <span class=\"string\">&#x27;/deep/&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prev = n.<span class=\"title function_\">prev</span>()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev &amp;&amp; prev.<span class=\"property\">type</span> === <span class=\"string\">&#x27;combinator&#x27;</span> &amp;&amp; prev.<span class=\"property\">value</span> === <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">              prev.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;pseudo&#x27;</span> &amp;&amp; n.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;combinator&#x27;</span>) &#123;</span><br><span class=\"line\">            node = n</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        selector.<span class=\"title function_\">insertAfter</span>(node, selectorParser.<span class=\"title function_\">attribute</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">attribute</span>: id</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(selector,<span class=\"string\">&#x27;🍎&#x27;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">process</span>(node.<span class=\"property\">selector</span>).<span class=\"property\">result</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If keyframes are found in this &lt;style&gt;, find and rewrite animation names</span></span><br><span class=\"line\">  <span class=\"comment\">// in declarations.</span></span><br><span class=\"line\">  <span class=\"comment\">// Caveat: this only works for keyframes and animation rules in the same</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;style&gt; element.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(keyframes).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    root.<span class=\"title function_\">walkDecls</span>(<span class=\"function\"><span class=\"params\">decl</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// individual animation-name declaration</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?animation-name$/</span>.<span class=\"title function_\">test</span>(decl.<span class=\"property\">prop</span>)) &#123;</span><br><span class=\"line\">        decl.<span class=\"property\">value</span> = decl.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> keyframes[v.<span class=\"title function_\">trim</span>()] || v.<span class=\"title function_\">trim</span>())</span><br><span class=\"line\">          .<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// shorthand</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?animation$/</span>.<span class=\"title function_\">test</span>(decl.<span class=\"property\">prop</span>)) &#123;</span><br><span class=\"line\">        decl.<span class=\"property\">value</span> = decl.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> vals = v.<span class=\"title function_\">trim</span>().<span class=\"title function_\">split</span>(<span class=\"regexp\">/\\s+/</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = vals.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> keyframes[val])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              vals.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>, keyframes[vals[i]])</span><br><span class=\"line\">              <span class=\"keyword\">return</span> vals.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> v</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/moduleId2.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>postcss-selector-parser&#x2F;dist&#x2F;index.js中导出了.&#x2F;processor.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _processor = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./processor&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _processor2 = <span class=\"title function_\">_interopRequireDefault</span>(_processor);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"params\">obj</span>) &#123; <span class=\"keyword\">return</span> obj &amp;&amp; obj.<span class=\"property\">__esModule</span> ? obj : &#123; <span class=\"attr\">default</span>: obj &#125;; &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> parser = <span class=\"keyword\">function</span> <span class=\"title function_\">parser</span>(<span class=\"params\">processor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _processor2.<span class=\"title function_\">default</span>(processor);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = parser;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span>[<span class=\"string\">&#x27;default&#x27;</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>postcss-selector-parser&#x2F;dist&#x2F;processor.js函数导出了一个立即执行函数返回了Processor对象，打印selectors可以看到此时的选择器已经被添加了属性选择器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">__esModule</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">function</span> <span class=\"title function_\">defineProperties</span>(<span class=\"params\">target, props</span>) &#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.<span class=\"property\">length</span>; i++) &#123; <span class=\"keyword\">var</span> descriptor = props[i]; descriptor.<span class=\"property\">enumerable</span> = descriptor.<span class=\"property\">enumerable</span> || <span class=\"literal\">false</span>; descriptor.<span class=\"property\">configurable</span> = <span class=\"literal\">true</span>; <span class=\"keyword\">if</span> (<span class=\"string\">&quot;value&quot;</span> <span class=\"keyword\">in</span> descriptor) descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">true</span>; <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, descriptor.<span class=\"property\">key</span>, descriptor); &#125; &#125; <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">Constructor, protoProps, staticProps</span>) &#123; <span class=\"keyword\">if</span> (protoProps) <span class=\"title function_\">defineProperties</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, protoProps); <span class=\"keyword\">if</span> (staticProps) <span class=\"title function_\">defineProperties</span>(<span class=\"title class_\">Constructor</span>, staticProps); <span class=\"keyword\">return</span> <span class=\"title class_\">Constructor</span>; &#125;; &#125;();</span><br><span class=\"line\"><span class=\"keyword\">var</span> _parser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./parser&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _parser2 = <span class=\"title function_\">_interopRequireDefault</span>(_parser);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"params\">obj</span>) &#123; <span class=\"keyword\">return</span> obj &amp;&amp; obj.<span class=\"property\">__esModule</span> ? obj : &#123; <span class=\"attr\">default</span>: obj &#125;; &#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) &#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Processor</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Processor</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_classCallCheck</span>(<span class=\"variable language_\">this</span>, <span class=\"title class_\">Processor</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">func</span> = func || <span class=\"keyword\">function</span> <span class=\"title function_\">noop</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Processor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">process</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">process</span>(<span class=\"params\">selectors</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(selectors,<span class=\"string\">&#x27;🌲&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"keyword\">new</span> _parser2.<span class=\"title function_\">default</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">css</span>: selectors,</span><br><span class=\"line\">            <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: options</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = input;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">func</span>(input);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">_createClass</span>(<span class=\"title class_\">Processor</span>, [&#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&#x27;result&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">res</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Processor</span>;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = <span class=\"title class_\">Processor</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span>[<span class=\"string\">&#x27;default&#x27;</span>];</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/moduleId3.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>未完的疑问，当yarn dev 打包开发模式时在processor.js没有添加对应的属性选择器。</p>\n</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h3 id=\"vue模块Id-每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\"><a href=\"#vue模块Id-每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\" class=\"headerlink\" title=\"vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性\"></a>vue模块Id 每个组件里面所有的dom元素都会加上对应组建的moduleId作为属性</h3><ul>\n<li>从图片中可以看到在style标签中加上了scoped后，打包的出的css部分会加上对用的属性选择器以此来实现css的隔离防止命名冲突造成的样式问题。<br><img src=\"/img/moduleId.webp\" alt=\"avatar\"></li>\n</ul>\n<h3 id=\"源码位置\"><a href=\"#源码位置\" class=\"headerlink\" title=\"源码位置\"></a>源码位置</h3><ul>\n<li>vue-loader lib&#x2F;loader.js中通过hash算法取文件路径或者文件路径加上传入的内容生成的哈希值作为moduleId。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> rawRequest = <span class=\"title function_\">getRawRequest</span>(<span class=\"variable language_\">this</span>, options.<span class=\"property\">excludedPreLoaders</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> filePath = <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = path.<span class=\"title function_\">basename</span>(filePath)</span><br><span class=\"line\"><span class=\"keyword\">const</span> context =</span><br><span class=\"line\">    (<span class=\"variable language_\">this</span>.<span class=\"property\">_compiler</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_compiler</span>.<span class=\"property\">context</span>) ||</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">context</span> ||</span><br><span class=\"line\">    process.<span class=\"title function_\">cwd</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceRoot = path.<span class=\"title function_\">dirname</span>(path.<span class=\"title function_\">relative</span>(context, filePath))</span><br><span class=\"line\"><span class=\"keyword\">const</span> shortFilePath = path.<span class=\"title function_\">relative</span>(context, filePath).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^(\\.\\.[\\\\\\/])+/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleId = <span class=\"string\">&#x27;data-v-&#x27;</span> + <span class=\"title function_\">hash</span>(isProduction ? (shortFilePath + <span class=\"string\">&#x27;\\n&#x27;</span> + content) : shortFilePath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(moduleId,<span class=\"string\">&#x27;🌛&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 模块Id 也是属性选择器 </span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/img/moduleId1.webp\" alt=\"avatar\"></p>\n<ul>\n<li><p>vue-loader lib&#x2F;loader.js中的getRawLoaderString对于template的处理是用的defaultLoaders.html，const templateCompilerPath &#x3D; normalize.lib(‘template-compiler&#x2F;index’)，和compile &#x3D; compiler.compile以及compile(html, compilerOptions)表明template-compiler&#x2F;index.js调用了vue-template-compiler&#x2F;build.js的compile方法来处理template，查看template-compiler&#x2F;index.js可以看到导出了一个loader函数接受到了从template中解析出的html，经过vue-template-compiler&#x2F;build.js中的compile方法编译成ast树，再经过组装生成code，可以看到.render(‘data-v-xxx’,esEports)传入了moduleId，在之后的loader处理生成html时会给每个组件的元素加上属性data-v-xxx。<br><img src=\"/img/moduleId4.webp\" alt=\"avatar\"><br><img src=\"/img/moduleId5.webp\" alt=\"avatar\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue-loader lib/loader.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> templateCompilerPath = normalize.<span class=\"title function_\">lib</span>(<span class=\"string\">&#x27;template-compiler/index&#x27;</span>)<span class=\"comment\">// 引入了template-compiler解析template</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultLoaders = &#123;</span><br><span class=\"line\">    <span class=\"attr\">html</span>: templateCompilerPath + templateCompilerOptions, </span><br><span class=\"line\">    <span class=\"attr\">css</span>: options.<span class=\"property\">extractCSS</span></span><br><span class=\"line\">      ? <span class=\"title function_\">getCSSExtractLoader</span>()</span><br><span class=\"line\">      : styleLoaderPath + <span class=\"string\">&#x27;!&#x27;</span> + <span class=\"string\">&#x27;css-loader&#x27;</span> + cssLoaderOptions,</span><br><span class=\"line\">    <span class=\"attr\">js</span>: hasBuble</span><br><span class=\"line\">      ? <span class=\"string\">&#x27;buble-loader&#x27;</span> + bubleOptions</span><br><span class=\"line\">      : hasBabel ? <span class=\"string\">&#x27;babel-loader&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getRawLoaderString</span> (type, part, index, scoped) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"comment\">// if user defines custom loaders for html, add template compiler to it</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;template&#x27;</span> &amp;&amp; loader.<span class=\"title function_\">indexOf</span>(defaultLoaders.<span class=\"property\">html</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        loader = defaultLoaders.<span class=\"property\">html</span> + <span class=\"string\">&#x27;!&#x27;</span> + loader</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(type === <span class=\"string\">&#x27;template&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(loader,&#x27;🐟&#x27;)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(loader)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// unknown lang, infer the loader to be used</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;template&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            defaultLoaders.<span class=\"property\">html</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span> +</span><br><span class=\"line\">            templatePreprocessorPath +</span><br><span class=\"line\">            <span class=\"string\">&#x27;?engine=&#x27;</span> +</span><br><span class=\"line\">            lang +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;styles&#x27;</span>:</span><br><span class=\"line\">          loader = <span class=\"title function_\">addCssModulesToLoader</span>(defaultLoaders.<span class=\"property\">css</span>, part, index)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> loader + <span class=\"string\">&#x27;!&#x27;</span> + styleCompiler + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;script&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">          loader = loaders[type]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">            loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">ensureBang</span>(loader + <span class=\"title function_\">buildCustomBlockLoaderString</span>(part.<span class=\"property\">attrs</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// template-compiler/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> prettier = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;prettier&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> normalize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../utils/normalize&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transpile = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-es2015-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> hotReloadAPIPath = normalize.<span class=\"title function_\">dep</span>(<span class=\"string\">&#x27;vue-hot-reload-api&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformRequire = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./modules/transform-require&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformSrcset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./modules/transform-srcset&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">html</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(html,&#x27;👀&#x27;)</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheable</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isServer = <span class=\"variable language_\">this</span>.<span class=\"property\">target</span> === <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isProduction = <span class=\"variable language_\">this</span>.<span class=\"property\">minimize</span> || process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vueOptions = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">__vueOptions__</span> || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>) || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> needsHotReload = !isServer &amp;&amp; !isProduction &amp;&amp; vueOptions.<span class=\"property\">hotReload</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModules = [<span class=\"title function_\">transformRequire</span>(options.<span class=\"property\">transformToRequire</span>), <span class=\"title function_\">transformSrcset</span>()]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userModules = vueOptions.<span class=\"property\">compilerModules</span> || options.<span class=\"property\">compilerModules</span></span><br><span class=\"line\">  <span class=\"comment\">// for HappyPack cross-process use cases</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userModules === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    userModules = <span class=\"built_in\">require</span>(userModules)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> compilerOptions = &#123;</span><br><span class=\"line\">    <span class=\"attr\">preserveWhitespace</span>: options.<span class=\"property\">preserveWhitespace</span>,</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: defaultModules.<span class=\"title function_\">concat</span>(userModules || []),</span><br><span class=\"line\">    <span class=\"attr\">directives</span>:</span><br><span class=\"line\">      vueOptions.<span class=\"property\">compilerDirectives</span> || options.<span class=\"property\">compilerDirectives</span> || &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">scopeId</span>: options.<span class=\"property\">hasScoped</span> ? options.<span class=\"property\">id</span> : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">comments</span>: options.<span class=\"property\">hasComment</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// vue-template-compiler 编译成ast  此处的compiler不是webpack的compiler模块是vue-template-compiler模块</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compile =</span><br><span class=\"line\">    isServer &amp;&amp; compiler.<span class=\"property\">ssrCompile</span> &amp;&amp; vueOptions.<span class=\"property\">optimizeSSR</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">      ? compiler.<span class=\"property\">ssrCompile</span></span><br><span class=\"line\">      : compiler.<span class=\"property\">compile</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compiled = <span class=\"title function_\">compile</span>(html, compilerOptions)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(compiled,&#x27;🌟&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// tips</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (compiled.<span class=\"property\">tips</span> &amp;&amp; compiled.<span class=\"property\">tips</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    compiled.<span class=\"property\">tips</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">tip</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitWarning</span>(tip)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> code</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (compiled.<span class=\"property\">errors</span> &amp;&amp; compiled.<span class=\"property\">errors</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitError</span>(</span><br><span class=\"line\">      <span class=\"string\">`\\n  Error compiling template:\\n<span class=\"subst\">$&#123;pad(html)&#125;</span>\\n`</span> +</span><br><span class=\"line\">        compiled.<span class=\"property\">errors</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"string\">`  - <span class=\"subst\">$&#123;e&#125;</span>`</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>) +</span><br><span class=\"line\">        <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    code = vueOptions.<span class=\"property\">esModule</span></span><br><span class=\"line\">      ? <span class=\"string\">`var esExports = &#123;render:function()&#123;&#125;,staticRenderFns: []&#125;\\nexport default esExports`</span></span><br><span class=\"line\">      : <span class=\"string\">&#x27;module.exports=&#123;render:function()&#123;&#125;,staticRenderFns:[]&#125;&#x27;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bubleOptions = options.<span class=\"property\">buble</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stripWith = bubleOptions.<span class=\"property\">transforms</span>.<span class=\"property\">stripWith</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stripWithFunctional = bubleOptions.<span class=\"property\">transforms</span>.<span class=\"property\">stripWithFunctional</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticRenderFns = compiled.<span class=\"property\">staticRenderFns</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"title function_\">toFunction</span>(fn, stripWithFunctional)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\">// 组装ast生成render函数</span></span><br><span class=\"line\">    code =</span><br><span class=\"line\">      <span class=\"title function_\">transpile</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;var render = &#x27;</span> +</span><br><span class=\"line\">          <span class=\"title function_\">toFunction</span>(compiled.<span class=\"property\">render</span>, stripWithFunctional) +</span><br><span class=\"line\">          <span class=\"string\">&#x27;\\n&#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;var staticRenderFns = [&#x27;</span> +</span><br><span class=\"line\">          staticRenderFns.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) +</span><br><span class=\"line\">          <span class=\"string\">&#x27;]&#x27;</span>,</span><br><span class=\"line\">        bubleOptions</span><br><span class=\"line\">      ) + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// prettify render fn</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProduction) &#123;</span><br><span class=\"line\">      code = prettier.<span class=\"title function_\">format</span>(code, &#123; <span class=\"attr\">semi</span>: <span class=\"literal\">false</span>, <span class=\"attr\">parser</span>: <span class=\"string\">&#x27;babylon&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark with stripped (this enables Vue to use correct runtime proxy detection)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isProduction &amp;&amp; stripWith) &#123;</span><br><span class=\"line\">      code += <span class=\"string\">`render._withStripped = true\\n`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">exports</span> = <span class=\"string\">`&#123; render: render, staticRenderFns: staticRenderFns &#125;`</span></span><br><span class=\"line\">    code += vueOptions.<span class=\"property\">esModule</span></span><br><span class=\"line\">      ? <span class=\"string\">`var esExports = <span class=\"subst\">$&#123;<span class=\"built_in\">exports</span>&#125;</span>\\nexport default esExports`</span></span><br><span class=\"line\">      : <span class=\"string\">`module.exports = <span class=\"subst\">$&#123;<span class=\"built_in\">exports</span>&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// hot-reload</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (needsHotReload) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exportsName = vueOptions.<span class=\"property\">esModule</span> ? <span class=\"string\">&#x27;esExports&#x27;</span> : <span class=\"string\">&#x27;module.exports&#x27;</span></span><br><span class=\"line\">    code +=</span><br><span class=\"line\">      <span class=\"string\">&#x27;\\nif (module.hot) &#123;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  module.hot.accept()\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  if (module.hot.data) &#123;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;    require(&quot;&#x27;</span> + hotReloadAPIPath + <span class=\"string\">&#x27;&quot;)&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;      .rerender(&quot;&#x27;</span> + options.<span class=\"property\">id</span> + <span class=\"string\">&#x27;&quot;, &#x27;</span> + exportsName + <span class=\"string\">&#x27;)\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;  &#125;\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;&#125;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(code,&#x27;🌞&#x27;)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// vue-template-compiler/build.js </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>vue-loader lib&#x2F;loader.js中的getRawLoaderString来处理styles，并把moduleId传递进去，其中引入了styleCompilerPath执行了lib&#x2F;style-compiler&#x2F;index.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleCompilerPath = normalize.<span class=\"title function_\">lib</span>(<span class=\"string\">&#x27;style-compiler/index&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getRawLoaderString</span> (type, part, index, scoped) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lang = part.<span class=\"property\">lang</span> || defaultLang[type]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> styleCompiler = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;styles&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// style compiler that needs to be applied for all styles</span></span><br><span class=\"line\">      styleCompiler =</span><br><span class=\"line\">        styleCompilerPath +</span><br><span class=\"line\">        <span class=\"string\">&#x27;?&#x27;</span> +</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// a marker for vue-style-loader to know that this is an import from a vue file</span></span><br><span class=\"line\">          <span class=\"attr\">vue</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">id</span>: moduleId,</span><br><span class=\"line\">          <span class=\"attr\">scoped</span>: !!scoped,</span><br><span class=\"line\">          <span class=\"attr\">hasInlineConfig</span>: !!query.<span class=\"property\">postcss</span></span><br><span class=\"line\">        &#125;) +</span><br><span class=\"line\">        <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// normalize scss/sass/postcss if no specific loaders have been provided</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!loaders[lang]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postcssExtensions.<span class=\"title function_\">indexOf</span>(lang) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;css&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lang === <span class=\"string\">&#x27;sass&#x27;</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;sass?indentedSyntax&#x27;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lang === <span class=\"string\">&#x27;scss&#x27;</span>) &#123;</span><br><span class=\"line\">          lang = <span class=\"string\">&#x27;sass&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> loader =</span><br><span class=\"line\">      options.<span class=\"property\">extractCSS</span> &amp;&amp; type === <span class=\"string\">&#x27;styles&#x27;</span></span><br><span class=\"line\">        ? loaders[lang] || <span class=\"title function_\">getCSSExtractLoader</span>(lang)</span><br><span class=\"line\">        : loaders[lang]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> injectString =</span><br><span class=\"line\">      type === <span class=\"string\">&#x27;script&#x27;</span> &amp;&amp; query.<span class=\"property\">inject</span> ? <span class=\"string\">&#x27;inject-loader!&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">        loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> loader === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        loader = <span class=\"title function_\">stringifyLoaders</span>([loader])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;styles&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// add css modules</span></span><br><span class=\"line\">        loader = <span class=\"title function_\">addCssModulesToLoader</span>(loader, part, index)</span><br><span class=\"line\">        <span class=\"comment\">// inject rewriter before css loader for extractTextPlugin use cases</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rewriterInjectRE.<span class=\"title function_\">test</span>(loader)) &#123;</span><br><span class=\"line\">          loader = loader.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">            rewriterInjectRE,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">m, $1</span>) =&gt;</span> <span class=\"title function_\">ensureBang</span>($1) + styleCompiler</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          loader = <span class=\"title function_\">ensureBang</span>(loader) + styleCompiler</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// if user defines custom loaders for html, add template compiler to it</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;template&#x27;</span> &amp;&amp; loader.<span class=\"title function_\">indexOf</span>(defaultLoaders.<span class=\"property\">html</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        loader = defaultLoaders.<span class=\"property\">html</span> + <span class=\"string\">&#x27;!&#x27;</span> + loader</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(loader)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// unknown lang, infer the loader to be used</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;template&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            defaultLoaders.<span class=\"property\">html</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span> +</span><br><span class=\"line\">            templatePreprocessorPath +</span><br><span class=\"line\">            <span class=\"string\">&#x27;?engine=&#x27;</span> +</span><br><span class=\"line\">            lang +</span><br><span class=\"line\">            <span class=\"string\">&#x27;!&#x27;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;styles&#x27;</span>:</span><br><span class=\"line\">          loader = <span class=\"title function_\">addCssModulesToLoader</span>(defaultLoaders.<span class=\"property\">css</span>, part, index)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> loader + <span class=\"string\">&#x27;!&#x27;</span> + styleCompiler + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;script&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> injectString + <span class=\"title function_\">ensureBang</span>(<span class=\"title function_\">ensureLoader</span>(lang))</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">          loader = loaders[type]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(loader)) &#123;</span><br><span class=\"line\">            loader = <span class=\"title function_\">stringifyLoaders</span>(loader)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">ensureBang</span>(loader + <span class=\"title function_\">buildCustomBlockLoaderString</span>(part.<span class=\"property\">attrs</span>))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vue-loader 中的lib&#x2F;style-compiler&#x2F;index.js引入处理scopeId的lib&#x2F;style-compiler&#x2F;plugins&#x2F;scope-id.js，这里plugins.push(scopeId({ id: query.id }))把scope-id作为插件push到postcss(plugins)postcss的插件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loaderUtils = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;loader-utils&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loadPostcssConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./load-postcss-config&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> trim = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/trim&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> scopeId = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugins/scope-id&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">css, map</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheable</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cb = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = loaderUtils.<span class=\"title function_\">getOptions</span>(<span class=\"variable language_\">this</span>) || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> vueOptions = <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">__vueOptions__</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vueOptions) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (query.<span class=\"property\">hasInlineConfig</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitError</span>(</span><br><span class=\"line\">        <span class=\"string\">`\\n  [vue-loader] It seems you are using HappyPack with inline postcss `</span> +</span><br><span class=\"line\">          <span class=\"string\">`options for vue-loader. This is not supported because loaders running `</span> +</span><br><span class=\"line\">          <span class=\"string\">`in different threads cannot share non-serializable options. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`It is recommended to use a postcss config file instead.\\n`</span> +</span><br><span class=\"line\">          <span class=\"string\">`\\n  See http://vue-loader.vuejs.org/en/features/postcss.html#using-a-config-file for more details.\\n`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vueOptions = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">options</span>.<span class=\"property\">vue</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">vue</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">loadPostcssConfig</span>(<span class=\"variable language_\">this</span>, vueOptions.<span class=\"property\">postcss</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> plugins = config.<span class=\"property\">plugins</span>.<span class=\"title function_\">concat</span>(trim)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">to</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span>,</span><br><span class=\"line\">          <span class=\"attr\">from</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">resourcePath</span>,</span><br><span class=\"line\">          <span class=\"attr\">map</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        config.<span class=\"property\">options</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"comment\">// add plugin for vue-loader scoped css rewrite</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (query.<span class=\"property\">scoped</span>) &#123;</span><br><span class=\"line\">        plugins.<span class=\"title function_\">push</span>(<span class=\"title function_\">scopeId</span>(&#123; <span class=\"attr\">id</span>: query.<span class=\"property\">id</span> &#125;))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// source map</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sourceMap</span> &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable language_\">this</span>.<span class=\"property\">minimize</span> &amp;&amp;</span><br><span class=\"line\">        vueOptions.<span class=\"property\">cssSourceMap</span> !== <span class=\"literal\">false</span> &amp;&amp;</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        !options.<span class=\"property\">map</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        options.<span class=\"property\">map</span> = &#123;</span><br><span class=\"line\">          <span class=\"attr\">inline</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">annotation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"attr\">prev</span>: map</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">postcss</span>(plugins)</span><br><span class=\"line\">        .<span class=\"title function_\">process</span>(css, options)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result.<span class=\"property\">messages</span>) &#123;</span><br><span class=\"line\">            result.<span class=\"property\">messages</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">&#123; type, file &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;dependency&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">addDependency</span>(file)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> map = result.<span class=\"property\">map</span> &amp;&amp; result.<span class=\"property\">map</span>.<span class=\"title function_\">toJSON</span>()</span><br><span class=\"line\">          <span class=\"title function_\">cb</span>(<span class=\"literal\">null</span>, result.<span class=\"property\">css</span>, map)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// silence bluebird warning</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e)</span><br><span class=\"line\">      <span class=\"title function_\">cb</span>(e)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>vue-loader lib&#x2F;style-compiler&#x2F;plugins&#x2F;scope-id.js中的postcss的插件，使用selector.insertAfter方法把id插入到生成虚拟节点上，并且从postcss-selector-parser引入selectorParser来解析样式的选择器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postcss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectorParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;postcss-selector-parser&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = postcss.<span class=\"title function_\">plugin</span>(<span class=\"string\">&#x27;add-id&#x27;</span>, <span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyframes = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  root.<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">rewriteSelector</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">selector</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle media queries</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">type</span> === <span class=\"string\">&#x27;atrule&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">name</span> === <span class=\"string\">&#x27;media&#x27;</span> || node.<span class=\"property\">name</span> === <span class=\"string\">&#x27;supports&#x27;</span>) &#123;</span><br><span class=\"line\">          node.<span class=\"title function_\">each</span>(rewriteSelector)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?keyframes$/</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">name</span>)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// register keyframes</span></span><br><span class=\"line\">          keyframes[node.<span class=\"property\">params</span>] = node.<span class=\"property\">params</span> = node.<span class=\"property\">params</span> + <span class=\"string\">&#x27;-&#x27;</span> + id</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.<span class=\"property\">selector</span> = <span class=\"title function_\">selectorParser</span>(<span class=\"function\"><span class=\"params\">selectors</span> =&gt;</span> &#123;</span><br><span class=\"line\">      selectors.<span class=\"title function_\">each</span>(<span class=\"function\"><span class=\"params\">selector</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = <span class=\"literal\">null</span></span><br><span class=\"line\">        selector.<span class=\"title function_\">each</span>(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// &quot;&gt;&gt;&gt;&quot; combinator</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> === <span class=\"string\">&#x27;combinator&#x27;</span> &amp;&amp; n.<span class=\"property\">value</span> === <span class=\"string\">&#x27;&gt;&gt;&gt;&#x27;</span>) &#123;</span><br><span class=\"line\">            n.<span class=\"property\">value</span> = <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">            n.<span class=\"property\">spaces</span>.<span class=\"property\">before</span> = n.<span class=\"property\">spaces</span>.<span class=\"property\">after</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// /deep/ alias for &gt;&gt;&gt;, since &gt;&gt;&gt; doesn&#x27;t work in SASS</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> === <span class=\"string\">&#x27;tag&#x27;</span> &amp;&amp; n.<span class=\"property\">value</span> === <span class=\"string\">&#x27;/deep/&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prev = n.<span class=\"title function_\">prev</span>()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev &amp;&amp; prev.<span class=\"property\">type</span> === <span class=\"string\">&#x27;combinator&#x27;</span> &amp;&amp; prev.<span class=\"property\">value</span> === <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">              prev.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;pseudo&#x27;</span> &amp;&amp; n.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;combinator&#x27;</span>) &#123;</span><br><span class=\"line\">            node = n</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        selector.<span class=\"title function_\">insertAfter</span>(node, selectorParser.<span class=\"title function_\">attribute</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">attribute</span>: id</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(selector,<span class=\"string\">&#x27;🍎&#x27;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">process</span>(node.<span class=\"property\">selector</span>).<span class=\"property\">result</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If keyframes are found in this &lt;style&gt;, find and rewrite animation names</span></span><br><span class=\"line\">  <span class=\"comment\">// in declarations.</span></span><br><span class=\"line\">  <span class=\"comment\">// Caveat: this only works for keyframes and animation rules in the same</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;style&gt; element.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(keyframes).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    root.<span class=\"title function_\">walkDecls</span>(<span class=\"function\"><span class=\"params\">decl</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// individual animation-name declaration</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?animation-name$/</span>.<span class=\"title function_\">test</span>(decl.<span class=\"property\">prop</span>)) &#123;</span><br><span class=\"line\">        decl.<span class=\"property\">value</span> = decl.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> keyframes[v.<span class=\"title function_\">trim</span>()] || v.<span class=\"title function_\">trim</span>())</span><br><span class=\"line\">          .<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// shorthand</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"regexp\">/-?animation$/</span>.<span class=\"title function_\">test</span>(decl.<span class=\"property\">prop</span>)) &#123;</span><br><span class=\"line\">        decl.<span class=\"property\">value</span> = decl.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> vals = v.<span class=\"title function_\">trim</span>().<span class=\"title function_\">split</span>(<span class=\"regexp\">/\\s+/</span>)</span><br><span class=\"line\">            <span class=\"keyword\">const</span> i = vals.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> keyframes[val])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              vals.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>, keyframes[vals[i]])</span><br><span class=\"line\">              <span class=\"keyword\">return</span> vals.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> v</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/moduleId2.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>postcss-selector-parser&#x2F;dist&#x2F;index.js中导出了.&#x2F;processor.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _processor = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./processor&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _processor2 = <span class=\"title function_\">_interopRequireDefault</span>(_processor);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"params\">obj</span>) &#123; <span class=\"keyword\">return</span> obj &amp;&amp; obj.<span class=\"property\">__esModule</span> ? obj : &#123; <span class=\"attr\">default</span>: obj &#125;; &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> parser = <span class=\"keyword\">function</span> <span class=\"title function_\">parser</span>(<span class=\"params\">processor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _processor2.<span class=\"title function_\">default</span>(processor);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = parser;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span>[<span class=\"string\">&#x27;default&#x27;</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>postcss-selector-parser&#x2F;dist&#x2F;processor.js函数导出了一个立即执行函数返回了Processor对象，打印selectors可以看到此时的选择器已经被添加了属性选择器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">__esModule</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _createClass = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">function</span> <span class=\"title function_\">defineProperties</span>(<span class=\"params\">target, props</span>) &#123; <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; props.<span class=\"property\">length</span>; i++) &#123; <span class=\"keyword\">var</span> descriptor = props[i]; descriptor.<span class=\"property\">enumerable</span> = descriptor.<span class=\"property\">enumerable</span> || <span class=\"literal\">false</span>; descriptor.<span class=\"property\">configurable</span> = <span class=\"literal\">true</span>; <span class=\"keyword\">if</span> (<span class=\"string\">&quot;value&quot;</span> <span class=\"keyword\">in</span> descriptor) descriptor.<span class=\"property\">writable</span> = <span class=\"literal\">true</span>; <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, descriptor.<span class=\"property\">key</span>, descriptor); &#125; &#125; <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">Constructor, protoProps, staticProps</span>) &#123; <span class=\"keyword\">if</span> (protoProps) <span class=\"title function_\">defineProperties</span>(<span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, protoProps); <span class=\"keyword\">if</span> (staticProps) <span class=\"title function_\">defineProperties</span>(<span class=\"title class_\">Constructor</span>, staticProps); <span class=\"keyword\">return</span> <span class=\"title class_\">Constructor</span>; &#125;; &#125;();</span><br><span class=\"line\"><span class=\"keyword\">var</span> _parser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./parser&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> _parser2 = <span class=\"title function_\">_interopRequireDefault</span>(_parser);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_interopRequireDefault</span>(<span class=\"params\">obj</span>) &#123; <span class=\"keyword\">return</span> obj &amp;&amp; obj.<span class=\"property\">__esModule</span> ? obj : &#123; <span class=\"attr\">default</span>: obj &#125;; &#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) &#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Constructor</span>)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Processor</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Processor</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_classCallCheck</span>(<span class=\"variable language_\">this</span>, <span class=\"title class_\">Processor</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">func</span> = func || <span class=\"keyword\">function</span> <span class=\"title function_\">noop</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Processor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">process</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">process</span>(<span class=\"params\">selectors</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(selectors,<span class=\"string\">&#x27;🌲&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"keyword\">new</span> _parser2.<span class=\"title function_\">default</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">css</span>: selectors,</span><br><span class=\"line\">            <span class=\"attr\">error</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: options</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = input;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">func</span>(input);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">_createClass</span>(<span class=\"title class_\">Processor</span>, [&#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&#x27;result&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">res</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Processor</span>;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = <span class=\"title class_\">Processor</span>;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span>[<span class=\"string\">&#x27;default&#x27;</span>];</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/moduleId3.webp\" alt=\"avatar\"></p>\n</li>\n<li><p>未完的疑问，当yarn dev 打包开发模式时在processor.js没有添加对应的属性选择器。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}